<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../assets/import/main.css"><script>let str;removeHtml=function(e){return e=(e=(e=(e=e.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(e){return e.match(/(<([^>]+)>)/gi)},setTranslator=function(e,t,n){let a;a=n?e.attr(n):e.html();let i=t[removeHtml(a)];if(null!=i&&i.length){t=retHtml(a);let o=0;t&&t.forEach(function(e,t){var n=i.replace("{"+o+"}",e);i=n===i?i.replace("{}",e):n,o++}),n?e.attr(n,i):e.html(i)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var e=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(e):($(".topic-header").append(e),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(e){return e.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={"A general description of what the function does":"函数执行操作的一般说明","All this script does is check to see if an instance has the same {}object_index{} as a given object and would be called simply as:":"此脚本执行的所有操作都是检查某个实例是否与给定对象具有相同的 {}object_index{}，并且可以简单地称为：",Examples:"示例","For example, see the following function:":"例如，请参见以下函数：","Hides the function from Feather's autocomplete":"对语法检查的自动完成隐藏函数","However, writing that into the code editor will show you the argument variable names directly ({}_id{} and {}_obj{}) which in most cases is not very descriptive.&nbsp;You can use JSDoc to define custom argument names and descriptions, along with information for the function as well:":"但是，将其写入代码编辑器将直接显示参数变量名称 ({}_id{} 和 {}_obj{})，在大多数情况下，这些名称的描述性不强。您可以使用 JSDoc 定义自定义参数名称和说明，以及函数的信息：","If you haven't specified a type for your arguments or return value, and you're using {}Feather{}, it will assume a data type for them automatically, based on your function body.":"如果您尚未为参数或返回值指定类型，并且正在使用{}语法检查{}，则它将根据您的函数体自动为这些参数指定数据类型。","If you wish your custom functions to have code completion and to show the required arguments in a specific manner&nbsp;in the code editor, then you need to add some {}JSDoc style{} comments. These comments are used to tell the auto-complete feature how the function should be used and filled out in the {}script editor{}.":"如果希望自定义函数具有代码完成功能并在代码编辑器中以特定方式显示所需的参数，则需要添加一些 {}JSDoc 样式 {} 注释。这些注释用于告诉自动完成功能应如何在 {} 脚本编辑器 {} 中使用和填写该函数。","Information on an argument, with an optional {}type{}&nbsp;in {}{}{} (or multiple acceptable types separated by {},{} or&nbsp;{}|{})":"有关参数的信息，在中具有可选的 {0}type{1} {}{ }{} （或由 {}、{} 或 {}|{} 分隔的多个可接受的类型）","Information on arguments, with an optional {}type{}":"有关具有可选{}类型{}的参数的信息","Marks the function as deprecated":"将函数标记为已弃用","Marks the function as&nbsp;{}pure{}":"将函数标记为 {}pure{}","Now, when calling this function anywhere in your project, you will see the new argument names that were entered in the JSDoc comments:":"现在，在项目中的任何位置调用此函数时，都会看到在 JSDoc 注释中输入的新参数名称：","See information on data types for {}@param{} and {}@return{} on {}Feather Data Types{}.":"有关 {}@param{} 和 {}@return{} 的数据类型的信息，请参阅 {} 语法检查数据类型 {}。","Sets the context for the function, which Feather auto-complete uses to provide contextual information. Can be an object or a constructor.":'设置函数的上下文，"语法检查自动完成"使用该上下文提供上下文信息。可以是对象或构造函数。',"Since scripts can have multiple functions in them, you can add JSDoc comments for each of them before its declaration:":"由于脚本中可以包含多个函数，因此可以在脚本声明之前为每个脚本添加 JSDoc 注释：",'The comments themselves need to be given an identifier (preceded by "{}@{}") and content. The available identifiers are as follows:&nbsp;':'需要为注释本身指定一个标识符 (前面带有 "{}@{}") 和内容。可用标识符如下：','The format for a typical function header would be to have the function name, the description of the function, and then the list of the different arguments (parameters) that the function takes, making sure to start each line with a triple forward slash "{}///{}" as that tells {}GameMaker{} to parse the comment as being JSDoc style. You can alternatively wrap your JSDoc comments in {}/**{}&nbsp;...&nbsp;{}*/{}, with the {}/**{} being on its own line.':'典型函数标题的格式为：函数名称、函数说明，然后是函数所采用的不同参数 (参数) 的列表，确保每行都以 "{}///{}" 三进制斜杠开头，这表示 {}GameMaker{} 将注释解析为 JSDoc 样式。您也可以用 {}/**{}...{}*/{} 封装 JSDoc 注释，{}/**{} 位于自己的行上。',"The full function name including arguments":"包含参数的完整函数名","The {}start_x{} and {}start_y{} arguments are marked as optional, which means the code editor will now expect 2 to 4 arguments, as can be seen in the warning message:":"{}start_x{} 和 {}start_y{} 参数被标记为可选，这意味着代码编辑器现在需要 2 到 4 个参数，如警告消息中所示：","To get an idea of how this would work when writing your own functions, let's take this basic example:":"要了解在编写自己的函数时如何工作，让我们以下列基本示例为例：","When using {}Feather{}, you will see detailed information on the function when you hover your mouse over it:":"使用{}语法检查{}时，将鼠标悬停在该函数上方时，将会看到有关该函数的详细信息：",'{}In the image above, the top part shows the function in the auto-complete and the bottom part shows how the argument helper at the bottom works. Note that both the optional "type" and the obligatory "description" parts of {}@param{} are not displayed by default in the IDE code complete, and to see them you must activate the options in the {}GML Preferences{}.':'{} 在上图中，顶部显示了自动完成中的功能，底部显示了底部参数帮助器的工作原理。请注意，{}@param{} 的可选 " 类型 " 和必填 " 说明 " 部分默认不会显示在 IDE 代码完成中，要查看它们，必须激活 {}GML 首选项 {} 中的选项。',"{}JSDoc Script Comments{}":"{}JSDoc 脚本注释{}","{}Type{} of data the function returns":"函数返回的数据{}类型{}","{}You can wrap an argument name in {}[]{} brackets to indicate that it is optional. The code editor will then expect any number of arguments between the minimum required arguments and the total number of arguments.":"{}您可以用{}[]{}括号括起参数名称，以表明它是可选的。然后，代码编辑器将期望在最小必需参数和参数总数之间有任意数量的参数。","{}{}NOTE{}{}&nbsp;You will get the same behaviour if you use optional arguments in the function declaration. See {}script functions{} for more information.":"{}{}注意{}{} 如果在函数声明中使用可选参数，将获得相同的行为。有关详细信息，请参阅{}脚本函数{}。","{}{}TIP{}{}&nbsp;You can generate these comments automatically using {}Feather{}'s&nbsp;{}Quick Fixes{}&nbsp;menu (press&nbsp;{} /&nbsp;{}&nbsp;+ Q or click the {}&nbsp;icon).":"{}{} 提示 {}{} 您可以使用 {} 语法检查 {} 的 {} 快速修复 {} 菜单 (按 {}/{}+ Q 或单击 {} 图标) 自动生成这些注释。","{}{}TIP{}{}&nbsp;You can generate these comments automatically using {}Feather{}'s&nbsp;{}Quick Fixes{}&nbsp;menu (press&nbsp;{} /&nbsp;{}&nbsp;+ Q or click the {}&nbsp;icon). The option is visible when your text cursor is placed on a function header (i.e. the line where the function's name is defined).":"{}{} 提示 {}{} 您可以使用 {} 语法检查 {} 的 {} 快速修复 {} 菜单 (按 {}/{}+ Q 或单击 {} 图标) 自动生成这些注释。当文本光标放在函数标题(即定义函数名称的行)上时，该选项可见。"},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(e){json_global=e}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../..",gTopicId="6.6.0_3"</script><script type="text/javascript" src="../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>JSDoc Script Comments</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../assets/css/default.css" type="text/css"><script src="../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Page that explains how JSDoc Script Comments work"><meta name="rh-index-keywords" content="Code Editor - JSDoc Comments,JSDoc"><meta name="search-keywords" content="JSDoc,JSDoc Comments"><meta name="brsnext" value="The_Asset_Editors/Code_Editor_Properties/Feather_Data_Types.htm"><meta name="brsprev" value="The_Asset_Editors/Code_Editor_Properties/Feather_Features.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="JSDoc Script Comments"><span>JSDoc Script Comments</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">JSDoc Script Comments</span></h1><p>If you wish your custom functions to have code completion and to show the required arguments in a specific manner&nbsp;in the code editor, then you need to add some <a href="https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html">JSDoc style</a> comments. These comments are used to tell the auto-complete feature how the function should be used and filled out in the <a href="../Scripts.htm">script editor</a>.</p><p class="note"><span data-conref="../../assets/snippets/Tag_tip.hts"><span class="tip">TIP</span></span>&nbsp;You can generate these comments automatically using <a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm">Feather</a>'s&nbsp;<a href="Feather_Features.htm#h1">Quick Fixes</a>&nbsp;menu (press&nbsp;<img class="icon" height="20" src="../../assets/Images/Icons/Icon_Ctrl.png" width="55"> /&nbsp;<img class="icon" height="20" src="../../assets/Images/Icons/Icon_Cmd.png" width="55">&nbsp;+ Q or click the <img class="icon" src="../../assets/Images/Icons/Icon_Feather.png">&nbsp;icon). The option is visible when your text cursor is placed on a function header (i.e. the line where the function's name is defined).</p><p>The format for a typical function header would be to have the function name, the description of the function, and then the list of the different arguments (parameters) that the function takes, making sure to start each line with a triple forward slash "<span class="inline">///</span>" as that tells <span data-keyref="GameMaker Name">GameMaker</span> to parse the comment as being JSDoc style. You can alternatively wrap your JSDoc comments in <span class="inline">/**</span>&nbsp;...&nbsp;<span class="inline">*/</span>, with the <span class="inline">/**</span> being on its own line.</p><p>The comments themselves need to be given an identifier (preceded by "<span class="inline">@</span>") and content. The available identifiers are as follows:&nbsp;</p><table><colgroup><col style="width:306px"><col style="width:488px"><col style="width:487px"></colgroup><tbody><tr><th>Identifier</th><th>Content</th><th>Syntax</th></tr><tr><td><span class="inline">@function</span> / <span class="inline">@func</span></td><td>The full function name including arguments</td><td><span class="inline">@func my_func(args)</span></td></tr><tr><td><span class="inline">@description</span> / <span class="inline">@desc</span></td><td>A general description of what the function does</td><td><span class="inline">@desc &lt;Description goes&gt;</span></td></tr><tr><td><span class="inline">@param</span>&nbsp;/ <span class="inline">@</span><span class="inline">parameter</span> / <span class="inline">@arg</span> / <span class="inline">@argument</span></td><td>Information on an argument, with an optional <a href="Feather_Data_Types.htm">type</a>&nbsp;in <span class="inline2">{}</span> (or multiple acceptable types separated by <span class="inline2">,</span> or&nbsp;<span class="inline2">|</span>)</td><td><span class="inline">@param {type,type} name &lt;Parameter description&gt;</span></td></tr><tr><td><span class="inline">@return / @returns</span></td><td><a href="Feather_Data_Types.htm">Type</a> of data the function returns</td><td><span class="inline">@return {type,type} &lt;Return description&gt;</span></td></tr><tr><th colspan="3"><a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm">Feather</a> only</th></tr><tr><td><span class="inline">@pure</span></td><td>Marks the function as&nbsp;<a class="tooltip" title="A pure function has no effect on the game, and does not create or change anything. It only returns a value. Given the same set of arguments, it always returns the same value.">pure</a></td><td><span class="inline">@pure</span></td></tr><tr><td style=""><span class="inline">@ignore</span></td><td style="">Hides the function from Feather's autocomplete</td><td><span class="inline">@ignore</span></td></tr><tr><td style=""><span class="inline">@deprecated</span></td><td style="">Marks the function as deprecated</td><td><span class="inline">@deprecated</span></td></tr><tr><td style=""><span class="inline">@context / @self</span></td><td style="">Sets the context for the function, which Feather auto-complete uses to provide contextual information. Can be an object or a constructor.</td><td><span class="inline">@self &lt;object&gt;</span></td></tr></tbody></table><p>If you haven't specified a type for your arguments or return value, and you're using <a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm">Feather</a>, it will assume a data type for them automatically, based on your function body.</p><p>See information on data types for <span class="inline">@param</span> and <span class="inline">@return</span> on <a href="Feather_Data_Types.htm">Feather Data Types</a>.</p><h2>Examples</h2><p>To get an idea of how this would work when writing your own functions, let's take this basic example:</p><p class="code">function is_same_object(_id, _obj)<br>{<br>&nbsp; &nbsp; if (_id.object_index == _obj)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; return true;<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; else return false;<br>}</p><p>All this script does is check to see if an instance has the same <span class="inline">object_index</span> as a given object and would be called simply as:</p><p class="code">if (is_same_object(id, obj_Player))<br>{<br>&nbsp; &nbsp; instance_destroy()<br>}</p><p>However, writing that into the code editor will show you the argument variable names directly (<span class="inline">_id</span> and <span class="inline">_obj</span>) which in most cases is not very descriptive.&nbsp;You can use JSDoc to define custom argument names and descriptions, along with information for the function as well:</p><p class="code">/// @function&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; is_same_object(inst_id, object_id)<br>/// @description&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Check if the given instance belongs to the given object.<br>/// @param {Id.Instance}&nbsp; &nbsp; &nbsp;inst_id&nbsp; &nbsp; The unique instance ID value of the instance to check.<br>/// @param {Asset.GMObject}&nbsp; object_id&nbsp; The object index to be checked against.<br>/// @return {Bool}<br><br>function is_same_object(_inst_id, _object_id)<br>{<br>&nbsp; &nbsp; return _inst_id.object_index == _object_id;<br>}</p><p>Now, when calling this function anywhere in your project, you will see the new argument names that were entered in the JSDoc comments:</p><p><img alt="JSDoc Example" class="center" height="652" src="../../assets/Images/Scripting_Reference/Additional_Information/JavaDoc_Example.png" width="672">In the image above, the top part shows the function in the auto-complete and the bottom part shows how the argument helper at the bottom works. Note that both the optional "type" and the obligatory "description" parts of <span class="inline">@param</span> are not displayed by default in the IDE code complete, and to see them you must activate the options in the <a href="../../Setting_Up_And_Version_Information/IDE_Preferences/GML_Code_Preferences.htm">GML Preferences</a>.</p><p>When using <a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm">Feather</a>, you will see detailed information on the function when you hover your mouse over it:</p><p><img class="center" src="../../assets/Images/Asset_Editors/JSDoc_Feather_Info.png">You can wrap an argument name in <span class="inline">[]</span> brackets to indicate that it is optional. The code editor will then expect any number of arguments between the minimum required arguments and the total number of arguments.</p><p>For example, see the following function:</p><p class="code">/// @function&nbsp;&nbsp; &nbsp;animate_position(end_x, end_y, start_x, start_y)<br>/// @desc&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Animates the instance to ending point, from optional starting point<br>/// @arg end_x<br>/// @arg end_y<br>/// @arg [start_x]<br>/// @arg [start_y]<br><br>function animate_position (x1, y1, x2, y2)<br>{<br>&nbsp;&nbsp; &nbsp;// Function code<br>}</p><p>The <span class="inline">start_x</span> and <span class="inline">start_y</span> arguments are marked as optional, which means the code editor will now expect 2 to 4 arguments, as can be seen in the warning message:</p><p><img class="center" height="150" src="../../assets/Images/Scripting_Reference/Additional_Information/JavaDoc_Optional.png" width="537"></p><p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;You will get the same behaviour if you use optional arguments in the function declaration. See <a href="../../GameMaker_Language/GML_Overview/Script_Functions.htm">script functions</a> for more information.</p><p>Since scripts can have multiple functions in them, you can add JSDoc comments for each of them before its declaration:</p><p><img alt="Multiple Functions With JSDoc Comments Example" class="center" src="../../assets/Images/Scripting_Reference/Additional_Information/JavaDoc_MultipleFunctions.png"></p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="../Scripts.htm">The Script Editor</a></div><div style="float:right">Next:&nbsp;<a href="Feather_Data_Types.htm">Feather Data Types</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>