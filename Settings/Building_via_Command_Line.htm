<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../assets/import/layer/layer.js"></script><script type="text/javascript" src="../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../assets/import/main.css"><script>let str;removeHtml=function(e){return e=(e=(e=(e=e.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(e){return e.match(/(<([^>]+)>)/gi)},setTranslator=function(e,t,a){let i;i=a?e.attr(a):e.html();let r=t[removeHtml(i)];if(null!=r&&r.length){t=retHtml(i);let o=0;t&&t.forEach(function(e,t){var a=r.replace("{"+o+"}",e);r=a===r?r.replace("{}",e):a,o++}),a?e.attr(a,r):e.html(r)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var e=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(e):($(".topic-header").append(e),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(e){return e.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={"Alternatively, you can supply a direct path to a {}tests.json{} file instead of a directory":"或者，您可以提供到{} tests.json {}文件的直接路径，而不是目录","Below you can find examples of build commands for all platforms:":"下面您可以找到所有平台的构建命令示例:","Build the projects through the IDE for the targets required, to make sure that they work fine":"通过IDE为所需目标构建项目，以确保它们工作正常","Building HTML5 folder (make sure to specify a target folder with {}/tf){}:":"构建 HTML5文件夹(确保用{}/tf 指定目标文件夹){} :","Building VM for Linux while on a PC:":"在 PC 上为 Linux VM 构建:","Building VM for PS4 while on a PC:":"在 PC 上为 PS4 VM 构建:","Building VM for PS5 while on a PC:":"在 PC 上为 PS5 VM 构建:","Building VM for Switch while on a PC:":"在 PC 上为 Switch VM 构建:","Building VM for Windows -- {}Run{}, {}PackageZip {}and {}PackageNsis{}:":"为 Windows 进行 VM 构建 —— {}Run{}、{} PackageZip {}和{} PackageNsis{} :","Building VM for Xbox One while on a PC:":"在 PC 上为 Xbox One VM 构建:","Building VM for Xbox Series X/S:":"为 Xbox X/S 系列 VM 构建:","Building VM for YYC while on a PC:":"在 PC 上为 Switch YYC 构建:","Building VM for iOS while on a Mac:":"在 Mac 上为 iOS VM 构建:","Building VM for iOS while on a PC:":"在 PC 上为 iOS VM 构建:","Building VM for macOS while on a Mac:":"在 Mac 上为 macOS VM 构建:","Building VM for macOS while on a PC:":"在 PC 上为 macOS VM 构建:","Building VM for tvOS while on a Mac:":"在 Mac 上为 tvOS VM 构建:","Building VM for tvOS while on a PC:":"在 PC 上为 tvOS VM 构建:","Building YYC for Linux while on a PC:":"在 PC 上为 Linux YYC 构建:","Building YYC for PS4 while on a PC:":"在PC上为 PS4 YYC 构建:","Building YYC for PS5 while on a PC:":"在PC上为 PS5 YYC 构建:","Building YYC for Windows-- {}Run{}, {}PackageZip {}and {}PackageNsis{}:":"为 Windows 进行 YYC 构建 ——{}Run{}、{}PackageZip{}和{}PackageNsis{} :","Building YYC for Xbox One while on a PC:":"在PC上为 Xbox One YYC 构建:","Building YYC for Xbox Series X/S:":"为 Xbox X/S 系列 YYC 构建:","Building YYC for iOS while on a Mac:":"在 Mac 上为 iOS YYC构建:","Building YYC for iOS while on a PC:":"在PC上为 iOS YYC 构建:","Building YYC for macOS while on a Mac:":"在 Mac 上为 macOS YYC 构建:","Building YYC for macOS while on a PC:":"在 PC 上为 macOS YYC 构建:","Building YYC for tvOS while on a Mac:":"在 Mac 上为 tvOS YYC 构建:","Building YYC for tvOS while on a PC:":"在PC上为 tvOS YYC 构建:","Building an Android APK using VM:":"使用 VM 构建 Android APK:","Building an Android APK using YYC:":"使用 YYC 构建 Android APK:","Building via Command Line":"通过命令行构建","By default, Igor can be found in:":"默认情况下，Igor可以在。","Calculates the checksums for all the installed files and compares them to the checksums written into the manifest {}folder{}. You can specify a folder to check, however if that is not specified it will default to the current directory. {} {} This will flag any files where the checksums don't match, files that are missing and files that should not be there. {} {} Do note that the manifest files themselves are not verified and a user can alter the manifest files to match the installed ones. ":"计算所有已安装文件的校验并将其与写入manifest{}文件夹{}的校验和进行比较。您可以指定要检查的文件夹，但是如果没有指定该文件夹，它将默认为工作目录。{}{}这将标记校验和不匹配的任何文件、丢失的文件和不应该存在的文件。{}{}请注意，manifest文件本身没有经过验证，用户可以修改manifest文件以匹配已安装的文件。","Calculates the checksums for all the installed files and compares them to the checksums written into the manifest {}folder{}. You can specify a folder to check, however if that is not specified it will default to the current directory.{} {} This will flag any files where the checksums don't match, files that are missing and files that should not be there.{} {} Do note that the manifest files themselves are not verified and a user can alter the manifest files to match the installed ones. ":"计算所有已安装文件的校验和，并将其与写入清单{}folder{}中的校验和进行比较。您可以指定要检查的文件夹，但如果没有指定，它将默认为当前目录。{}{}这将标记出任何校验和不匹配的文件、丢失的文件和不应该存在的文件。{}{}请注意，清单文件本身并没有经过验证，用户可以修改清单文件，使其与已安装的文件相匹配。","Cleaning Android project:":"清理 Android 项目:","Cleaning GX.games project:":"清理 GX.games 项目:","Cleaning HTML5 project:":"清理 HTML5项目:","Cleaning Linux project:":"清理 Linux 项目:","Cleaning PS4 project:":"清理 PS4 工程:","Cleaning PS5 project:":"清理 PS5 工程:","Cleaning Switch project:":"清理Switch项目:","Cleaning Windows project:":"清理 Windows 项目:","Cleaning Xbox One project:":"清理 Xbox One 项目:","Cleaning Xbox Series X/S project:":"清理 Xbox X/S 系列项目:","Cleaning macOS project:":"清理 MacOS 项目:","Cleaning tvOS project:":"清理 tvOS 工程:",'Comma-separated list of targets in the {}PLATFORM|DEVICE{} format, e.g.: {}/target="Windows|Local,HTML|Firefox"{} {} {} If you specify&nbsp;{}all{}, the tests will attempt to run for every device in the {}devices.json{} file ':'{}PLATFORM|DevICE{}格式中以逗号分隔的目标列表，例如: {}/target="Windows|Local,HTML|Firefox"{} {} {}如果指定{}all{} ，测试将尝试为{} devices.json {}文件中的每个设备运行','Comma-separated list of targets in the {}PLATFORM|DEVICE{} format, e.g.: {}/target="Windows|Local,HTML|Firefox"{}{} {} If you specify&nbsp;{}all{}, the tests will attempt to run for every device in the {}devices.json{} file ':'以逗号分隔的{}PLATFORM|DEVICE{}格式的目标列表，例如：{}/target="Windows|Local,HTML|Firefox"{}{} {} 如果你指定&nbsp;{}all{}，测试将尝试为{}devices.json{}文件中的每一个设备运行。',"Create a batch file that will do the build that you require within the task (test this from the command line)":"创建一个批处理文件，该文件将执行任务中所需的生成（从命令行测试）",'Each object should describe one test {} {}The test object must contain these keys: {} {}{}name{}: A name used to report whether the test has passed or failed{} {}{}path{}: A path to a {}.yyp{}, {}.yyz{}, {}.gml{}, {}.js{} file or folder for the test{} {}{}command{}: The Igor command for the test ({}Run{}, {}CreatePackage{}, etc.&nbsp;as described above){} {} {} {}The test object may also contain these keys: {} {}{}platform{}: Passed directly through to Igor to do the test{} {}{}device{}: The device name from the {}devices.json{} file{} {}{}target{}: The target in a "{}PLATFORM|TARGET"{} format, e.g.: "{}Windows|Local"{}{} {}{}timeout{}: A timeout for the total test including compile and run;&nbsp;if exceeded the test will be stopped and&nbsp;marked as failed{} {}{}waittime{}: The length of time to wait after entering the main loop before deciding whether the&nbsp;test has passed{} {}{}owner{}: the e-mail address of the user who will be e-mailed if this test fails{} {} {} {} ':'每个对象应该描述一个测试{}{}测试对象必须包含以下键:{}{}{}name{} : 用于报告测试是否通过或失败的名称{}{}{}path{} : 一个指向{}.yyp{},{}.yyz{},{}.gml{},{}.js{}的测试文件或文件夹路径。{}{}{}command{}: 测试的 Igor 命令({}Run{} ，{}CreatePackage{}等，如上所述){}{}{}{}测试对象还可以包含以下键:{}{}{}platform{} : 直接传递给 Igor 以执行测试{}{}{}device{} : 来自{}devices.json{}的设备名称{}{}{}target{} : 类似"{}平台|目标"{}格式，例如: "{}Windows|Local"{}{}{}{}timeout{} : 包括编译和运行在内的总测试的允许时长; 如果超时，将停止测试并标记为失败{}{}{}waittime{} : 在进入主循环之后等待的时间长度，然后再决定测试已通过{}{}{}owner{} : 如果此测试失败，将通过电子邮件发送的用户的电子邮件地址{}{}{}{}','Each object should describe one test {} {}The test object must contain these keys: {} {}{}name{}: A name used to report whether the test has passed or failed{} {}{}path{}: A path to a {}.yyp{}, {}{}.yyz{}{}, {}.gml{}, {}.js{} file or folder for the test{} {}{}command{}: The Igor command for the test ({}Run{}, {}CreatePackage{}, etc.&nbsp;as described above){} {} {} {}The test object may also contain these keys: {} {}{}platform{}: Passed directly through to Igor to do the test{} {}{}device{}: The device name from the {}devices.json{} file{} {}{}target{}: The target in a "{}PLATFORM|TARGET"{} format, e.g.: "{}Windows|Local"{}{} {}{}timeout{}: A timeout for the total test including compile and run;&nbsp;if exceeded the test will be stopped and&nbsp;marked as failed{} {}{}waittime{}: The length of time to wait after entering the main loop before deciding whether the&nbsp;test has passed{} {}{}owner{}: the e-mail address of the user who will be e-mailed if this test fails{} {} {} {} ':"每个对象应描述一个测试 {} {}测试对象必须包含这些键: {} {}{}name{}: 用于报告测试通过还是失败的名称{} {}{}path{}: 用于测试的{}.yyp{}、{}{}.yyz{}{}、{}.gml{}、{}.js{}文件或文件夹的路径{} {}{}command{}: 用于测试的Igor命令（如上所述的{}Run{}、{} Package {}等）{} {} {} {}测试对象也可以包含这些键: {} {}{}platform{}: 直接传给Igor做测试{} {}{}device{}: 来自{}devices.json{}文件的设备名称{} {}{}target{}: “{}平台|目标”{}格式，例如： “{}Windows|Local”{}{} {}{}timeout{}: 包括编译和运行在内的整个测试的超时;如果超时，测试将停止并标记为失败{} {}{}waittime{}: 进入主循环后在决定测试是否通过之前等待的时间长度{} {}{}owner{}: 如果此测试失败，将收到电子邮件的用户的电子邮件地址{} {} {} {} ","Each project found will be built and run on Windows":"",Example:"例子",Examples:"例子",Format:"格式","Generate a key and copy it to your clipboard":"生成一个密钥并将其复制到你的剪贴板上","Generate a licence file using Igor {} {}{}igor runtime FetchLicences -ak=&lt;KeyFromSite&gt; -of=&lt;OutputFileName&gt;{}{} {} ":"使用Igor生成许可证文件 {}{}{}igor runtime FetchLicences -ak=&lt;KeyFromSite&gt; -of=&lt;OutputFileName&gt;{}{} {} ","Generates a licence.plist file ({}-of{}) from an access key ({}-ak{}), see {}Access Key{}":"从访问密钥（{}-ak{}）生成 licence.plist 文件（{}-of{}），见 {}访问密钥{}。","Go to {}gamemaker.io/account/access_keys{}, and log in with an account that has the appropriate licence":"进入{}gamemaker.io/account/access_keys{}，用拥有相应许可证的账户登录。","Here are the commands that can be used with the Igor runtime:":"下面是可以与 Igor 运行时一起使用的命令:","Here are the options that can be used for testing your builds with Igor:":"下面是用 Igor 测试构建的选项:","Here are the options that can be used with the Igor runtime:":"下面是可以与 Igor 运行时一起使用的选项:","Here are the options that you can use while running the {}Igor {}executable:":"以下是运行{}Igor{}可执行文件时可以使用的选项：","Here is a step-by-step example for running a game on Windows:":"下面是一个在Windows上运行游戏的步骤示例：","Here is an example of a {}tests.json{} file:":"下面是{}tests.json{}文件的一个示例:","Hook the batch file into the CI task and test within the Jenkins environment":"将批处理文件挂接到CI任务并在Jenkins环境中进行测试","However, if you don't have access to an IDE installation, you can request an access key from the GameMaker website, and generate a {}licence.plist{} file from it.":"然而，如果你不能访问IDE安装，你可以从GameMaker网站上申请一个访问密钥，并从中生成一个{}licence.plist{}文件。","If a&nbsp;{}tests.json{} file {}is found{}, Igor will run the tests described in the file (see example below)":"如果找到{}tests.json{}文件{}，Igor将运行文件中描述的测试(参见下面的示例)","If it's a directory, Igor will look for a file called {}tests.json{} in the directory {} {}If the file {}is not found{}, Igor will recursively search for {}.yyz{} and {}.yyp{} files in the directory {} {}Each project found will be built and run on Windows{} {}It will wait till the runner reaches the main loop {} {}The test passes if the runner is still running after the wait time{} {}The test fails if the project does not compile within the timeout period, or crashes before the wait time is over{} {} {} {} {} {}If a&nbsp;{}tests.json{} file {}is found{}, Igor will run the tests described in the file (see example below){} {} ":"{12}注意{13}如果是一个目录，Igor 将在目录中查找名为{} tests.json {}的文件。{}{}如果{}没有找到{}文件 ，Igor 将递归地搜索在目录中的{}.yyz{}和{}.yyp{}文件。{}{}每个被找到的项目都将被构建并在 Windows 上运行它，直到运行程序到达主循环{}{}如果运行程序在等待时间之后仍在运行，则测试通过{}{}如果项目在超时期间内没有编译，或者在等待时间超过之前崩溃，则测试失败{}{}{}{}{}{}如果{26}找到{27}{}tests.json{}文件 ，Igor 将运行文件中描述的测试(参见下面的示例){}{}","If it's a directory, Igor will look for a file called {}tests.json{} in the directory {} {}If the file {}is not found{}, Igor will recursively search for {}{}.yyz{}{}&nbsp;and {}.yyp{} files in the directory {} {}Each project found will be built and run on Windows{} {}It will wait till the runner reaches the main loop {} {}The test passes if the runner is still running after the wait time{} {}The test fails if the project does not compile within the timeout period, or crashes before the wait time is over{} {} {} {} {} {}If a&nbsp;{}tests.json{} file {}is found{}, Igor will run the tests described in the file (see example below){} {} ":"如果是目录，Igor将在目录中查找名为{}tests.json{}的文件 {}{}如果{}找不到{}文件，Igor将递归搜索 {}{}.yyz{}{}&nbsp; &nbsp;和{}.yyp{}文件 {}{}找到的每个项目都将在Windows上构建和运行{}{}&nbsp; &nbsp;它会一直等到runner到达主环路{}{}如果运行程序在等待时间之后仍在运行，则测试通过 {}{}如果项目没有在超时时间内编译，或者在等待时间结束之前崩溃，则测试失败{}{}{}{}{}{}如果{28}找到{29}{}tests.json{}文件，Igor将运行文件中描述的测试(参见下面的示例){}{}","If找不到文件{}，Igor将递归搜索目录{}中的{}{}.yyz{}{}和{}.yyp{}文件{}Each project found will be built and run on Windows{} {}It will wait till the runner reaches the main loop {} {}The test passes if the runner is still running after the wait time{} {}The test fails if the project does not compile within the timeout period, or crashes before the wait time is over{} {} {} {} {} ":"","Igor CI Building":"Igor 持续集成构建","Igor Runtime":"Igor 运行时","Igor Testing":"Igor 测试","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- HTML5 Clean":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] -- HTML5 Clean","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Linux Clean":"Igor.exe /uf=[用户文件夹] /rp=[Runtime文件夹] /project=[YYP项目文件夹] /cache=[Cache文件夹] /temp=[临时文件夹] -- Linux Clean","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Mac Clean":"Igor.exe /uf=[用户文件夹] /rp=[Runtime文件夹] /project=[YYP项目文件夹] /cache=[Cache文件夹] /temp=[临时文件夹] -- Mac Clean","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- OperaGX Clean":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] -- OperaGX Clean","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- OperaGX Run":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] -- OperaGX Run","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Switch Clean":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] -- Switch Clean","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Clean":"Igor.exe /uf=[用户文件夹] /rp=[Runtime文件夹] /project=[YYP项目文件夹] /cache=[Cache文件夹] /temp=[临时文件夹] -- Android Clean","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Run":"Igor.exe /uf=[用户文件夹] /rp=[Runtime文件夹] /project=[YYP项目文件夹] /cache=[Cache文件夹] /temp=[临时文件夹] -- Windows Run","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- XBoxOne Clean":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] -- XBoxOne Clean","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- XBoxOneSeriesXS Clean":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] -- XBoxOneSeriesXS Clean","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- ps4 Clean":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] -- ps4 Clean","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- ps5 Clean":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] -- ps5 Clean","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- tvos Clean":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] -- tvos Clean","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- Android Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] -- Android Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- Mac Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] -- Mac Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- Windows PackageNsis":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] -- Windows PackageNsis","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- Windows PackageZip":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] -- Windows PackageZip","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- ios Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] -- ios Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- tvos Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] -- tvos Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- Linux Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /device=[设备名称] -- Linux Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- Mac Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /device=[设备名称] -- Mac Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- Switch Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /device=[设备名称] -- Switch Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- XBoxOne Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /device=[设备名称] -- XBoxOne Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- XBoxOneSeriesXS Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /device=[设备名称] -- XBoxOneSeriesXS Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- ios Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /device=[设备名称] -- ios Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- ps4 Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /device=[设备名称] -- ps4 Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- ps5 Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /device=[设备名称] -- ps5 Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- tvos Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /device=[设备名称] -- tvos Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- Android Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC -- Android Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- Mac Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC -- Mac Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- Windows PackageNsis":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC -- Windows PackageNsis","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- Windows PackageZip":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC -- Windows PackageZip","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- ios Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC -- ios Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- tvos Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC -- tvos Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- Linux Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC /device=[设备名称] -- Linux Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- Mac Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC /device=[设备名称] -- Mac Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- Switch Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC /device=[设备名称] -- Switch Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- XBoxOne Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC /device=[设备名称] -- XBoxOne Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- XBoxOneSeriesXS Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC /device=[设备名称] -- XBoxOneSeriesXS Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- ios Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC /device=[设备名称] -- ios Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- ps4 Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC /device=[设备名称] -- ps4 Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- ps5 Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC /device=[设备名称] -- ps5 Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- tvos Package":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] /platform=YYC /device=[设备名称] -- tvos Package","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_folder] -- HTML5 folder":"Igor.exe /uf=[用户文件夹] /rp=[Runtime路径] /project=[YYP项目文件] /cache=[Cache文件夹] /temp=[临时文件夹] /of=[输出文件夹] /tf=[目标文件] -- HTML5 folder","Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /platform=YYC -- Windows Run":"Igor.exe /uf=[用户文件夹] /rp=[Runtime文件夹] /project=[YYP项目文件夹] /cache=[Cache文件夹] /temp=[临时文件夹] /platform=YYC -- Windows Run","In addition to building your project through the IDE,&nbsp;{}GameMaker{}&nbsp;allows you to build your projects through a command-line interface using the many options and commands described below. You can use this to build your project, test it and deploy it to multiple platforms by running one batch file, and to set up continuous integration through an automation server such as {}Jenkins{}.":"{}GameMaker{}除了通过IDE构建项目外，还允许您使用下面介绍的许多选项和命令通过命令行界面构建项目。您可以通过运行一个批处理文件来生成项目、测试项目并将其部署到多个平台，以及通过自动化服务器（如{}Jenkins{}）设置连续集成。","Install {}GameMaker{} and the runtimes needed":"安装{}GameMaker{}和所需的运行时","Installs the latest runtime from the given feed using the given {}version{} as a search filter; if that is not specified, it defaults to the latest version. It will get all the modules that the user has on their licence.":"使用给定{}版本{}作为搜索筛选器从给定提要安装最新运行时; 如果未指定，则默认为最新版本。它将获得用户在其许可证上的所有模块。","It will wait till the runner reaches the main loop {} {}The test passes if the runner is still running after the wait time{} {}The test fails if the project does not compile within the timeout period, or crashes before the wait time is over{} {} ":"",'Launch the executable on the target device after building; same as the {}"Create Executable and Launch" option{}&nbsp;in the IDE':'生成后在目标设备上启动可执行文件与 IDE 中的{}"创建可执行文件并启动"{}选项相同',"Lists the runtimes available in the current folder ({}directory{}=full path to the folder) {} {} You can specify a directory to look in, but if it's not specified it will default to the current directory {} {} This also checks whether there is a {}receipt.json{} file and a {}manifest{} folder inside the directory (making sure that it's actually a runtime) ":"列出当前文件夹中可用的运行时({}directory{} = 文件夹的完整路径){}{}可以指定要查看的目录，但是如果没有指定，它将默认为工作目录{}{}这也检查目录中是否有{}Receipt.json{}文件和{}manifest{}文件夹(确保它实际上是一个运行时)","Lists the runtimes available in the current folder ({}directory{}=full path to the folder){} {} You can specify a directory to look in, but if it's not specified it will default to the current directory{} {} This also checks whether there is a {}receipt.json{} file and a {}manifest{} folder inside the directory (making sure that it's actually a runtime) ":"列出当前文件夹中可用的运行时（{}directory{}=文件夹的完整路径）{} {} 你可以指定要查找的目录，但如果没有指定，将默认为当前目录{} {}这也会检查目录内是否有{}receipt.json{}文件和{}manifest{}文件夹（确保它实际上是一个Runtime）","Lists the runtimes available on a feed (version number, date/time of build)":"列出提要上可用的运行时(版本号、生成日期/时间)","Navigate to the Igor directory given at the top of this page {} {}{}cd &lt;igor dir&gt;{}{} {} ":"导航到本页顶部给出的Igor目录 {} {}{}cd &lt;igor dir&gt;{}{} {} ",Notes:"注意","Number of seconds to wait in the main loop before declaring the test as passed, defaults to 30 seconds":"在主循环中声明测试通过之前等待的秒数，默认为30秒","Open a command prompt and navigate to the Igor directory (the path is given at the top of this page) {} {}{}cd &lt;igor dir&gt;{}{} {} ":"打开命令提示符，导航到Igor目录（路径在本页顶部给出） {}{}{}cd &lt;igor dir&gt;{}{}{}","Open a command prompt window {} {}Win+R, write {}cmd{}, press Enter{} {} ":"打开一个命令提示窗口{} {}Win+R，写上{}cmd{}，按Enter{} {}",Options:"选项","Platform Examples":"平台实例",'Prints out information about the most recent runtime on the given feed; also needs a licence file to show information regarding the modules available for the user {} {} {}version{} can either by a string used to search through the feed titles (e.g.: {}"739"{} would show information for all builds containing 739 in their version numbers), or it can be {}all{} to show information for all feeds {} {} It will list the modules with the {}.zip{} file names for each module ':"打印出给定提要上最近运行时的信息; 还需要一个许可文件来显示用户{}{}{}版本{}可以通过用于搜索提要标题的字符串(例如: {}“739”{}将显示所有包含739的版本号的构建的信息) ，或者它可以{}所有{}来显示所有提要的信息{}{}它将列出具有的每个模块的{} .zip {}文件名",'Prints out information about the most recent runtime on the given feed; also needs a licence file to show information regarding the modules available for the user{} {} {}version{} can either by a string used to search through the feed titles (e.g.: {}"739"{} would show information for all builds containing 739 in their version numbers), or it can be {}all{} to show information for all feeds{} {} It will list the modules with the {}.zip{} file names for each module ':'打印出关于给定feed的最新运行时间的信息；还需要一个许可文件，以显示关于用户可用的模块的信息{}{}{}version{}可以是一个字符串，用于搜索feed的标题（例如。{}"739"{}将显示所有版本号中包含739的构建的信息，或者可以是{}all{}来显示所有feeds的信息{} {}它将列出每个模块的{}.zip{}文件名的模块 ','Run a game by supplying the project file, runtime directory, licence file, platform and build type. Enclose each directory in double quotes ({}" "{}) to ensure spaces are handled properly. {} {}{}igor /project="&lt;yourProjectDir&gt;\\projectname.yyp" /rp="&lt;runtime dir&gt;" /lf="&lt;plist dir&gt;\\licence.plist" Windows Run{}{} {} ':'通过提供项目文件、运行时目录、许可证文件、平台和构建类型来运行一个游戏。用双引号（{}""{}）括住每个目录，以确保空间得到正确处理。{} {}{}igor /project="&lt;yourProjectDir&gt;\\projectname.yyp" /rp="&lt;runtime dir&gt;" /lf="&lt;plist dir&gt;\\licence.plist" Windows Run{}{} {} ',"Running GX.games:":"运行 GX.game:","Set a direct path to a licence file, can be used as an alternative to setting a user folder ({}/uf{})":"设置许可文件的直接路径，可以作为设置用户文件夹({}/uf{})的替代方法","Set a direct path to a {}devices.json{} file, can be used as an alternative to setting a user folder ({}/uf{})":"设置到{}devices.json{}文件的直接路径，可以作为设置用户文件夹({}/uf{})的替代方法","Set the URL to fetch runtime information from (defaults to the stable release)":"设置从中获取运行时信息的 URL (默认为稳定版本)","Set the direct path to a licence file, can be used as an alternative to setting a user folder ({}/uf{})":"设置许可文件的直接路径，可以作为设置用户文件夹({}/uf{})的替代方法","Set the local runtime install folder to list the installed runtimes or install new runtimes":"设置本地运行时安装文件夹以列出已安装的运行时或安装新的运行时","Set the user folder used for retrieving licence information so {}GameMaker{} knows which modules can be installed":"设置用于检索许可证信息的用户文件夹，以便{} GameMaker {}知道可以安装哪些模块","Set up a CI environment (this depends on how you are going to build your games), like&nbsp;{}Jenkins{}":"设置CI环境(这取决于您将如何构建游戏)，如 {}Jenkins{}","Set up a CI environment (this depends on how you are going to build your games); we suggest using {}Jenkins{}":"设置CI环境（这取决于您打算如何构建游戏）；我们建议使用{}Jenkins{}","Set up your CI task&nbsp;and ensure that all the prerequisites are setup (i.e. source control sync to your project)":"设置您的CI任务并确保已设置所有先决条件(即源代码管理与项目同步)","Setting Up":"设置","Some platforms (notably Android) will automatically&nbsp;{}subst{} a drive while building, so you may need to manually clean this up in the event of an error":"有些平台（特别是安卓）会在构建时自动{}subst{}一个驱动器，所以你可能需要在出现错误时手动清理。","Some platforms may have issues with the length of your file paths, in which case you will need to {}{}subst{}{}&nbsp;virtual drives on your PC (like the IDE does) before passing them into your commands":"某些平台可能会遇到文件路径长度问题，在这种情况下，您需要在PC上通过{}{}subst{}{}命令创建虚拟驱动器（如IDE所做的），然后才能将它们传递到您的命令中","Some platforms may have issues with the length of your file paths, in which case you will need to {}{}subst{}{}&nbsp;virtual drives on your PC before passing them into your commands":"一些平台可能对你的文件路径的长度有问题，在这种情况下，你需要{}{}subst{}{}&nbsp;你的PC上的虚拟驱动器，然后再把它们传到你的命令中。","Test building from the command line (see examples below)":"从命令行进行构建测试（请参见下面的示例）","Tests.json File":"Tests.json 文件","The JSON file should contain an array&nbsp;of objects":"JSON 文件应该包含一个对象数组","The actual file name of the ZIP file or NSIS installer that is created":"创建的 ZIP 文件或 NSIS 安装程序的实际文件名","The cache directory to use (defaults to {}\\cache{}&nbsp;in the current directory)":"要使用的缓存目录(默认为当前目录中的{}\\cache{})","The full path to the licence file, either from the IDE or from the {}Access Key{} service{} {} To retrieve the licence from the IDE, the paths are as follows:{} Windows:&nbsp;{}{}%appdata%\\GameMaker\\&lt;user_name&gt;_&lt;number&gt;\\licence.plist{}{}{} macOS:&nbsp;{}{}~/.config/GameMaker/&lt;user_name&gt;_&lt;number&gt;/licence.plist{}{} ":"许可证文件的完整路径，可从IDE或从{}Access Key{}服务{}{}获取。要从IDE中获取许可证，路径如下：{}Windows:&nbsp;{}{}%appdata%\\GameMaker&lt;user_name&gt;_&lt;number&gt;\\licence.plist{}{}{} macOS:&nbsp;{}{}~/.config/GameMaker/&lt;user_name&gt;_&lt;number&gt;/licence.plist{} {} ","The full path to the licence file, either from the IDE or from the {}Access Key{} service{} {} To retrieve the licence from the IDE, the paths are as follows:{} Windows:&nbsp;{}{}%appdata%\\{}GameMakerStudio2{}\\&lt;user_name&gt;_&lt;number&gt;\\licence.plist{}{}{} macOS:&nbsp;{}{}~/.config/{}GameMakerStudio2{}/&lt;user_name&gt;_&lt;number&gt;/licence.plist{}{} ":"许可证文件的完整路径，可以从IDE或访问{}密钥{}服务{}{}<div>路径如下:{} Windows:&nbsp;{}{}%appdata%\\{}GameMakerStudio2{}\\&lt;user_name&gt;_&lt;number&gt;\\licence.plist{}{}{} macOS:&nbsp;{}{}~/.config/{}GameMakerStudio2{}/&lt;user_name&gt;_&lt;number&gt;/licence.plist{}{} </div>","The full path to the project's {}.yyp{} file":"*{}.yyp{}文件的完整路径","The name of the configuration to use (defaults to {}Default{})":"要使用的配置的名称(默认值为{} Default {})","The name of the target device as set up in the IDE":"在 IDE 中设置的目标设备的名称","The name of the target device to build to, as set up in the IDE":"要构建的目标设备的名称，如IDE中设置的那样","The number of CPUs to use during the build process":"生成过程中要使用的 CPU 数","The output directory where the build will be extracted; do not specify just a directory as the trailing entry is always removed (e.g.: specifying {}d:\\game\\output{} will place the game files in {}d:\\game{}) {} {} If this is not specified, a directory named {}output{} will be created in the same directory as the {}.bat{} file (or where the command is running from), containing the extracted build files ":"将提取构建的输出目录; 不要指定一个目录，因为后面的条目总是被删除(例如: 指定{}d:\\game\\output{}将把游戏文件放在{}d:\\game{}){}{}如果没有指定，将在相同的目录中创建一个名为{}output{}的目录，{}.bat{}文件(或命令从其中运行) ，包含提取的生成文件","The output directory where the build will be extracted; do not specify just a directory as the trailing entry is always removed (e.g.: specifying {}d:\\game\\output{} will place the game files in {}d:\\game{}){} {} If this is not specified, a directory named {}output{} will be created in the same directory as the {}.bat{} file (or where the command is running from), containing the extracted build files ":"将提取构建文件的输出目录；不要只指定一个目录，因为后面的条目总是被删除（例如：指定{}d:\\game\\output{}将把游戏文件放在{}d:\\game{}）{}{}如果没有指定，将在{}.bat{}文件（或命令运行的地方）的同一目录下创建一个名为{}output{}的目录，其中包含提取的构建文件 ","The output type (either YYC or VM), defaults to VM":"输出类型(YYC 或 VM) ，默认为 VM","The path to your {}devices.json{} file, required when building to other devices.{} {} On Windows, this will be:&nbsp;{}{}%appdata%\\GameMaker\\&lt;user_name&gt;_&lt;number&gt;\\devices.json{}{}{} On macOS, this will be:&nbsp;{}{}~/.config/GameMaker/&lt;user_name&gt;_&lt;number&gt;/devices.json{}{} ":"你的{}devices.json{}文件的路径，在构建到其他设备时需要{}{}在Windows上，这将是：&nbsp;{}{}%appdata%\\GameMaker\\&lt;user_name&gt;_&lt;number&gt;\\devices.json{}{}{}在macOS上，这将是：&nbsp;{}{}~/.config/GameMaker/&lt;user_name&gt;_&lt;number&gt;/devices.json{}{}","The path to your {}devices.json{} file, required when building to other devices.{} {} On Windows, this will be:&nbsp;{}{}%appdata%\\{}GameMakerStudio2{}\\&lt;user_name&gt;_&lt;number&gt;\\devices.json{}{}{} On macOS, this will be:&nbsp;{}{}~/.config/{}GameMakerStudio2{}/&lt;user_name&gt;_&lt;number&gt;/devices.json{}{} ":"在构建到其他设备时需要{}devices.json{}文件的路径。{}{}在Windows上，这将是：{}{}%appdata%\\{}GameMakerStudio2{}\\&lt;user_name&gt;_&lt;number&gt;\\devices.json{}{}{}在macOS, 这将是:&nbsp;{}{}~/.config/{}GameMakerStudio2{}/&lt;user_name&gt;_&lt;number&gt;/devices.json{}{} ","The root folder of the runtime":"Runtime的根目录","The temporary directory to use (defaults to {}c:\\temp{})":"要使用的临时目录(默认为{}c:\\temp{})","The test fails if the project does not compile within the timeout period, or crashes before the wait time is over":"","The test passes if the runner is still running after the wait time":"","The timeout to use for the test in seconds, defaults to 120 seconds; the test will be stopped after this timeout is over and will be marked as failed":"用于测试的超时(秒) ，默认为120秒; 超时结束后，测试将停止，并将标记为失败","The user folder used for retrieving licence information {} {} On Windows, this will be:&nbsp;{}{}%appdata%\\GameMaker\\&lt;user_name&gt;_&lt;number&gt;{}{} {} On macOS, this will be:&nbsp;{}{}~/.config/GameMaker/&lt;user_name&gt;_&lt;number&gt;{}{} ":"用于检索许可证信息的用户文件夹{}{}在Windows上，这将是：{}{}%appdata%\\GameMaker\\&lt;user_name&gt;_&lt;number&gt;{}{}{}在MacOS上，这将是：{}{}~/.config/GameMaker/&lt;user_name&gt;_&lt;number&gt;{}{} ","The user folder used for retrieving licence information, alternative to {}/lf{}{} {} On Windows, this will be:&nbsp;{}{}%appdata%\\GameMaker\\&lt;user_name&gt;_&lt;number&gt;{}{}{} On macOS, this will be:&nbsp;{}{}~/.config/GameMaker/&lt;user_name&gt;_&lt;number&gt;{}{} ":"用于检索许可证信息的用户文件夹，用于替代{}/lf{}{}{}在Windows上，这将是：&nbsp;{}{}%appdata%\\GameMaker\\&lt;user_name&gt;_&lt;number&gt;{}{}{}在 macOS 上，这将是：&nbsp;{}{}~/.config/GameMaker/&lt;user_name&gt;_&lt;number&gt; {}{}","The user folder used for retrieving licence information, alternative to {}/lf{}{} {} On Windows, this will be:&nbsp;{}{}%appdata%\\{}GameMakerStudio2{}\\&lt;user_name&gt;_&lt;number&gt;{}{}{} On macOS, this will be:&nbsp;{}{}~/.config/{}GameMakerStudio2{}/&lt;user_name&gt;_&lt;number&gt;{}{} ":"用于检索许可证信息的用户文件夹,&nbsp; {}/lf{}{} {} 的替代方法在Windows上, 是这样的:&nbsp;{}{}%appdata%\\{}GameMakerStudio2{}\\&lt;user_name&gt;_&lt;number&gt;{}{}{} 在 macOS, 是这样的:&nbsp;{}{}~/.config/{}GameMakerStudio2{}/&lt;user_name&gt;_&lt;number&gt;{}{} ","The {}/lf{} option requires a path to your {}licence.plist{} file, which can be retrieved from your GameMaker installation after you've logged into the IDE, as described in the table above.":"{}/lf{}选项需要你的{}licence.plist{}文件的路径，你可以在登录IDE后从GameMaker安装中获取，如上表所述。","The {}licence.plist{} file generated to the {}-of{} path can now be used in the {}/lf{} option":"生成到{}-of{}路径的{}licence.plist{}文件现在可以在{}/lf{}选项中使用。","The {}tests.json{} file must have the following format:":"{}tests.json{}文件必须具有以下格式:","There is one command that you can use to run tests with Igor:":"有一个命令可以用来对 Igor 运行测试:","This is done by running the {}Igor.exe{} executable present within your runtime folder and passing in the options and commands listed on this page.":"这是由运行{}Igor.exe{}可执行文件来完成的，该文件存在于你的运行文件夹中，并传入本页所列的选项和命令。","This is done by running the {}Igor.exe{} executable present within your runtime folder and passing in the options and commands listed on this page. On Windows this will be present in the&nbsp;{}C:\\ProgramData\\GameMaker\\Cache\\runtimes\\runtime-[version]\\bin{}&nbsp;folder and on Mac under {}/Users/Shared/GameMaker/Cache/runtimes/runtime-[version]/bin{}.":"这是通过运行Runtime文件夹中存在的{}Igor.exe{}可执行文件并输入此页上列出的选项和命令来完成的。在Windows上，该文件在 {}C:\\ProgramData\\GameMaker\\Cache\\runtimes\\runtime-[版本号]\\bin{}文件夹和Mac上的{}/Users/Shared/GameMaker/Cache/runtimes/runtime-[版本号]/bin{}下。","To set up CI&nbsp;building on a machine, you will need to do the following:":"要在计算机上设置CI构建，需要执行以下操作：","Used to look up the device name in the user folder's {}devices.json{} file":"用于在用户文件夹的{}devices.json{}文件中查找设备名称","Write {}igor{} and hit Enter to confirm you are in the correct place. Doing this should give you a list of Igor's commands. If you get a different result, ensure you are in the correct directory.":"写下{}igor{}，然后按回车键，确认你在正确的位置。这样做应该会给你一个Igor的命令列表。如果你得到一个不同的结果，请确保你在正确的目录中。","You must specify either a test directory or a test file name.":"必须指定测试目录或测试文件名。","Your game should now run!":"你的游戏现在应该运行了!","{}GameMaker{}除了通过IDE{}构建项目外，还允许您使用下面介绍的许多选项和命令通过命令行界面构建项目。您可以通过运行一个批处理文件来生成项目、测试项目并将其部署到多个平台，以及通过自动化服务器（如{}Jenkins{}）设置连续集成。":"GameMaker{}除了通过IDE{}构建项目外，还允许您使用下面介绍的许多选项和命令通过命令行界面构建项目。您可以通过运行一个批处理文件来生成项目、测试项目并将其部署到多个平台，以及通过自动化服务器（如{}Jenkins{}）设置连续集成。","{}Note{} that on Mac you will need to use mono to run Igor, so you will need to write {}{}mono{}{} before all your commands, e.g.:&nbsp;{}mono Igor.exe [options]{}":"{}注意{}，在 Mac 上需要使用 mono 来运行 Igor，所以在所有命令之前需要编写{}{} mono {}{} ，例如: {}mono Igor.exe [options]{}","{}{}Access Key":"{}{}访问密钥","{}{}NOTE{}{}&nbsp;Building executable packages via command line is only&nbsp;available on specific licences, so please look at {}this page{} to find out whether your licence supports that. For all other licences, you can run and debug your project through a command line without any restrictions.":"{}{}注意{}{}通过命令行生成可执行文件包仅在特定许可证上可用，因此请查看{}此页面{}以了解您的许可证是否支持此操作。对于所有其他许可证，您可以通过命令行运行和调试项目，而不受任何限制。","{}{}NOTE{}{}&nbsp;You must have logged into the IDE with your account at least once before attempting command line building.":"{}{}注意{}{}&nbsp;在尝试命令行构建之前，你必须至少用你的账户登录过IDE。","某些平台可能会遇到文件路径长度问题，在这种情况下，您需要在PC上通过{}{}subst{}{}命令创建虚拟驱动器（如IDE所做的），然后才能将它们传递到您的命令中":"某些平台可能会遇到文件路径长度问题，在这种情况下，您需要在PC上通过{}{}subst{}{}命令创建虚拟驱动器（如IDE所做的），然后才能将它们传递到您的命令中"},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(e){json_global=e}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="..",gTopicId="5.4.0_1"</script><script type="text/javascript" src="../template/scripts/rh.min.js"></script><script type="text/javascript" src="../template/scripts/common.min.js"></script><script type="text/javascript" src="../template/scripts/topic.min.js"></script><script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Building via Command Line</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../assets/css/default.css" type="text/css"><script src="../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Gurpreet S. Matharoo"><meta name="topic-comment" content="Page that explains how your project can be compiled and tested through a CLI
"><meta name="rh-index-keywords" content="Building via Command Line"><meta name="search-keywords" content="build, command line, cli, ci, igor, continuous integration"><meta name="brsnext" value="Settings/Runner_Details/Compiler_Batch_Files.htm"><meta name="brsprev" value="Settings/Runner_Details/Runner_Details.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Building via Command Line"><span>Building via Command Line</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1 id="h">Building via Command Line</h1><p class="note"><span class="note"><strong>NOTE</strong></span>&nbsp;Building executables via command line requires you to have&nbsp;<a href="../Setting_Up_And_Version_Information/Licencing_Information.htm">logged in to the IDE</a>.</p><p>In addition to building your project through the IDE,&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>&nbsp;allows you to build your projects through a command-line interface using the many options and commands described below. You can use this to build your project, test it and deploy it to multiple platforms by running one batch file, and to set up continuous integration through an automation server such as <a href="https://www.jenkins.io/" title="Jenkins">Jenkins</a>.</p><p>This is done by running the <span class="inline2">Igor.exe</span> executable present within your runtime folder and passing in the options and commands listed on this page.</p><p>By default, Igor can be found in:</p><ul class="colour"><li>Windows:&nbsp;<span class="inline2">C:\ProgramData\<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>\Cache\runtimes\runtime-[version]\bin\igor\&lt;OS&gt;\&lt;architecture&gt;\</span></li><li>macOS:&nbsp;<span class="inline2">/Users/Shared/<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>/Cache/runtimes/runtime-[version]/bin/igor/osx/&lt;architecture&gt;/</span></li></ul><p class="note"><span data-conref="../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;You must have logged into the IDE with your account at least once before attempting command line building.</p><p>&nbsp;</p><h1>Igor CI Building</h1><h2>Setting Up</h2><p>To set up CI&nbsp;building on a machine, you will need to do the following:</p><ul class="colour"><li>Install <span data-keyref="GameMaker Name">GameMaker</span> and the runtimes needed</li><li>Build the projects through the IDE for the targets required, to make sure that they work fine</li><li>Test building from the command line (see examples below)</li><li>Create a batch file that will do the build that you require within the task (test this from the command line)</li><li>Set up a CI environment (this depends on how you are going to build your games), like&nbsp;<a href="https://www.jenkins.io/" title="Jenkins">Jenkins</a></li><li>Set up your CI task&nbsp;and ensure that all the prerequisites are setup (i.e. source control sync to your project)</li><li>Hook the batch file into the CI task and test within the Jenkins environment</li></ul><h2>Notes</h2><ul class="colour"><li>Some platforms may have issues with the length of your file paths, in which case you will need to <span class="inline"><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst" title="subst documentation">subst</a></span>&nbsp;virtual drives on your PC before passing them into your commands</li><li>Some platforms (notably Android) will automatically&nbsp;<span class="inline2">subst</span> a drive while building, so you may need to manually clean this up in the event of an error</li></ul><h2>Options</h2><p>Here are the options that you can use while running the <strong>Igor</strong> executable:</p><table><colgroup><col style="width:316px"><col></colgroup><tbody><tr><th style="">Option</th><th style="">Description</th></tr><tr><td style=""><span class="inline">/lf=[licence_plist_file]</span></td><td style="">The full path to the licence file, either from the IDE or from the <a href="#access_key">Access Key</a> service<br><br>To retrieve the licence from the IDE, the paths are as follows:<br>Windows:&nbsp;<span class="inline2"><span>%appdata%\<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>\&lt;user_name&gt;_&lt;number&gt;\licence.plist</span></span><br>macOS:&nbsp;<span class="inline2"><span>~/.config/<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>/&lt;user_name&gt;_&lt;number&gt;/licence.plist</span></span></td></tr><tr><td style=""><span class="inline">/uf=[user_folder]<strong></strong></span></td><td style="">The user folder used for retrieving licence information, alternative to <span class="inline2">/lf</span><br><br>On Windows, this will be:&nbsp;<span class="inline2"><span>%appdata%\<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>\&lt;user_name&gt;_&lt;number&gt;</span></span><br>On macOS, this will be:&nbsp;<span class="inline2"><span>~/.config/<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>/&lt;user_name&gt;_&lt;number&gt;</span></span></td></tr><tr><td style=""><span class="inline">/rp=[runtime_root]</span></td><td style="">The root folder of the runtime</td></tr><tr><td style=""><span class="inline">/project=[project_YYP_file]</span></td><td style="">The full path to the project's <span class="inline2">.yyp</span> file</td></tr><tr><td style=""><span class="inline">/cache=[cache_dir_path]</span></td><td style="">The cache directory to use (defaults to <span class="inline2">\cache</span>&nbsp;in the current directory)</td></tr><tr><td style=""><span class="inline">/temp=[temp_dir_path]</span></td><td style="">The temporary directory to use (defaults to <span class="inline2">c:\temp</span>)</td></tr><tr><td style=""><span class="inline">/of=[output_filename]</span></td><td style="">The filename of the output executable without the extension, e.g.&nbsp;<span class="inline2">C:/output/game</span>, which would output the executable at&nbsp;<span class="inline2">C:/output/game.zip</span>&nbsp;(or a different file format depending on the platform)<br><br>If this is not specified, a directory named <span class="inline2">output</span> will be created in the same directory as the <span class="inline">.bat</span> file (or where the command is running from), containing the extracted build files</td></tr><tr><td style=""><span class="inline">/tf=[target_file]</span></td><td style="">The actual file name of the ZIP file or NSIS installer that is created</td></tr><tr><td style=""><span class="inline">/config=[configName]</span></td><td style="">The name of the configuration to use (defaults to <span class="inline">Default</span>)</td></tr><tr><td style=""><span class="inline">/runtime=YYC|VM</span></td><td style="">The output type (either YYC or VM), defaults to VM</td></tr><tr><td style=""><span class="inline">/j=[NumCPUs]</span></td><td style="">The number of CPUs to use during the build process</td></tr><tr><td style=""><span class="inline">/df=[devices_json_file]</span></td><td style="">The path to your <span class="inline2">devices.json</span> file, required when building to other devices.<br><br>On Windows, this will be:&nbsp;<span class="inline2"><span>%appdata%\<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>\&lt;user_name&gt;_&lt;number&gt;\devices.json</span></span><br>On macOS, this will be:&nbsp;<span class="inline2"><span>~/.config/<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>/&lt;user_name&gt;_&lt;number&gt;/devices.json</span></span></td></tr><tr><td style=""><span class="inline">/device=[device_name_from_IDE]</span></td><td style="">The name of the target device to build to, as set up in the IDE</td></tr><tr><td style=""><span class="inline">/launch</span></td><td style="">Launch the executable on the target device after building; same as the <a href="../IDE_Navigation/Menus/The_Build_Menu.htm">"Create Executable and Launch" option</a>&nbsp;in the IDE</td></tr></tbody></table><h2 id="h1"><a id="access_key"></a>Access Key</h2><p>The <span class="inline2">/lf</span> option requires a path to your <span class="inline2">licence.plist</span> file, which can be retrieved from your GameMaker installation after you've logged into the IDE, as described in the table above.</p><p>However, if you don't have access to an IDE installation, you can request an access key from the GameMaker website, and generate a <span class="inline2">licence.plist</span> file from it.</p><ul class="colour"><li>Go to <a href="https://gamemaker.io/account/access_keys">gamemaker.io/account/access_keys</a>, and log in with an account that has the appropriate licence</li><li>Generate a key and copy it to your clipboard</li><li>Open a command prompt and navigate to the Igor directory (the path is given at the top of this page)<ul><li><span class="inline2">cd &lt;igor dir&gt;</span></li></ul></li><li>Generate a licence file using Igor<ul><li><span class="inline2">igor runtime FetchLicences -ak=&lt;KeyFromSite&gt; -of=&lt;OutputFileName&gt;</span></li></ul></li><li>The <span class="inline2">licence.plist</span> file generated to the <span class="inline2">-of</span> path can now be used in the <span class="inline2">/lf</span> option</li></ul><h2>Hello World</h2><p>Here is a step-by-step example for running a game on Windows:</p><ul class="colour"><li>Open a command prompt window<ul><li>Win+R, write <span class="inline2">cmd</span>, press Enter</li></ul></li><li>Navigate to the Igor directory given at the top of this page<ul><li><span class="inline2">cd &lt;igor dir&gt;</span></li></ul></li><li>Write <span class="inline2">igor</span> and hit Enter to confirm you are in the correct place. Doing this should give you a list of Igor's commands. If you get a different result, ensure you are in the correct directory.</li><li>Run a game by supplying the project file, runtime directory, licence file, platform and build type. Enclose each directory in double quotes (<span class="inline2">" "</span>) to ensure spaces are handled properly.<ul><li><span class="inline2">igor /project="&lt;yourProjectDir&gt;\projectname.yyp" /rp="&lt;runtime dir&gt;" /lf="&lt;plist dir&gt;\licence.plist" Windows Run</span></li></ul></li><li>Your game should now run!</li></ul><h2>Platform Examples</h2><p>Below you can find examples of build commands for all platforms:</p><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#"><span data-open-text="true" data-skip-index="true">GX.games</span><span data-close-text="true">GX.games</span></a></p><div class="droptext" data-targetname="drop-down12"><p>Cleaning GX.games project:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- OperaGX Clean</p><p>Running GX.games:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- OperaGX Run</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true" data-skip-index="true">Windows</span><span data-close-text="true">Windows</span></a></p><div class="droptext" data-targetname="drop-down"><p>Cleaning Windows project:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Clean</p><p>Building VM for Windows -- <span class="inline">Run</span>, <span class="inline">PackageZip</span> and <span class="inline">PackageNsis</span>:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Run</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] -- Windows PackageZip</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] -- Windows PackageNsis</p><p>Building YYC for Windows-- <span class="inline">Run</span>, <span class="inline">PackageZip</span> and <span class="inline">PackageNsis</span>:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /runtime=YYC -- Windows Run</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC -- Windows PackageZip</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC -- Windows PackageNsis</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true" data-skip-index="true">macOS</span><span data-close-text="true">macOS</span></a></p><div class="droptext" data-targetname="drop-down1"><p class="note"><span data-conref="../assets/snippets/Tag_important.hts"><span class="important">IMPORTANT</span></span>&nbsp;On Mac you will need to use <strong>mono</strong> to run Igor, so you will need to write <span class="inline"><strong>mono</strong></span> before all your commands, e.g.:&nbsp;<span class="inline">mono Igor.exe [options]</span></p><p>Cleaning macOS project:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Mac Clean</p><p>Building VM for macOS while on a Mac:</p><p class="note"><span data-conref="../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;Use&nbsp;<strong>PackageZip</strong>&nbsp;to build a ZIP file, and <strong>PackageDMG</strong>&nbsp;to build a DMG. These examples use <strong>PackageZip</strong>.</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] -- Mac PackageZip</p><p>Building VM for macOS while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- Mac PackageZip</p><p>Building YYC for macOS while on a Mac:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC -- Mac PackageZip</p><p>Building YYC for macOS while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- Mac PackageZip</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true" data-skip-index="true">Linux / Ubuntu</span><span data-close-text="true">Linux / Ubuntu</span></a></p><div class="droptext" data-targetname="drop-down2"><p>Cleaning Linux project:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Linux Clean</p><p>Building VM for Linux while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- Linux Package</p><p>Building YYC for Linux while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- Linux Package</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span data-open-text="true" data-skip-index="true">HTML5</span><span data-close-text="true">HTML5</span></a></p><div class="droptext" data-targetname="drop-down3"><p>Cleaning HTML5 project:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- HTML5 Clean</p><p>Building HTML5 folder (make sure to specify a target folder with <span class="inline">/tf)</span>:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_folder] -- HTML5 folder</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#"><span data-open-text="true" data-skip-index="true">iOS</span><span data-close-text="true">iOS</span></a></p><div class="droptext" data-targetname="drop-down4"><p>Building VM for iOS while on a Mac:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] -- ios Package</p><p>Building VM for iOS while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- ios Package</p><p>Building YYC for iOS while on a Mac:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC -- ios Package</p><p>Building YYC for iOS while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- ios Package</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#"><span data-open-text="true" data-skip-index="true">Android</span><span data-close-text="true">Android</span></a></p><div class="droptext" data-targetname="drop-down5"><p>Cleaning Android project:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Clean</p><p>Building an Android APK using VM:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] -- Android Package</p><p>Building an Android APK using YYC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC -- Android Package</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#"><span data-open-text="true" data-skip-index="true">tvOS</span><span data-close-text="true">tvOS</span></a></p><div class="droptext" data-targetname="drop-down6"><p>Cleaning tvOS project:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- tvos Clean</p><p>Building VM for tvOS while on a Mac:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] -- tvos Package</p><p>Building VM for tvOS while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- tvos Package</p><p>Building YYC for tvOS while on a Mac:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC -- tvos Package</p><p>Building YYC for tvOS while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- tvos Package</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#"><span data-open-text="true" data-skip-index="true">PS4</span><span data-close-text="true">PS4</span></a></p><div class="droptext" data-targetname="drop-down7"><p>Cleaning PS4 project:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- ps4 Clean</p><p>Building VM for PS4 while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- ps4 Package</p><p>Building YYC for PS4 while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- ps4 Package</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#"><span data-open-text="true" data-skip-index="true">PS5</span><span data-close-text="true">PS5</span></a></p><div class="droptext" data-targetname="drop-down10"><p>Cleaning PS5 project:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- ps5 Clean</p><p>Building VM for PS5 while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- ps5 Package</p><p>Building YYC for PS5 while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- ps5 Package</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#"><span data-open-text="true" data-skip-index="true">Xbox One</span><span data-close-text="true">Xbox One</span></a></p><div class="droptext" data-targetname="drop-down8"><p>Cleaning Xbox One project:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- XBoxOne Clean</p><p>Building VM for Xbox One while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- XBoxOne Package</p><p>Building YYC for Xbox One while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- XBoxOne Package</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#"><span data-open-text="true" data-skip-index="true">Xbox Series X/S</span><span data-close-text="true">Xbox Series X/S</span></a></p><div class="droptext" data-targetname="drop-down11"><p>Cleaning Xbox Series X/S project:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- XBoxOneSeriesXS Clean</p><p>Building VM for Xbox Series X/S:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- XBoxOneSeriesXS Package</p><p>Building YYC for Xbox Series X/S:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- XBoxOneSeriesXS Package</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#"><span data-open-text="true" data-skip-index="true">Switch</span><span data-close-text="true">Switch</span></a></p><div class="droptext" data-targetname="drop-down9"><p>Cleaning Switch project:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Switch Clean</p><p>Building VM for Switch while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- Switch Package</p><p>Building VM for YYC while on a PC:</p><p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- Switch Package</p></div><p>&nbsp;</p><h1>Igor Runtime</h1><p>Here are the options that can be used with the Igor runtime:</p><table><tbody><tr><th style="">Option</th><th style="">Description</th></tr><tr><td style=""><span class="inline">/uf=[user_folder]<strong></strong></span></td><td style="">Set the user folder used for retrieving licence information so <span data-keyref="GameMaker Name">GameMaker</span> knows which modules can be installed</td></tr><tr><td style=""><span class="inline">/lf=[license_file]</span></td><td style="">Set the direct path to a licence file, can be used as an alternative to setting a user folder (<span class="inline">/uf</span>)</td></tr><tr><td style=""><span class="inline">/ru=[runtime_url]</span></td><td style="">Set the URL to fetch runtime information from (defaults to the stable release)</td></tr><tr><td style=""><span class="inline">/rp=[runtime_root]</span></td><td style="">Set the local runtime install folder to list the installed runtimes or install new runtimes</td></tr></tbody></table><p>Here are the commands that can be used with the Igor runtime:</p><h4>Syntax:</h4><p class="code">Igor.exe [command]</p><table><colgroup><col style="width:237px"><col style="width:537px"></colgroup><tbody><tr><th style="">Command</th><th style="">Description</th></tr><tr><td style=""><span class="inline">Runtime List</span></td><td style="">Lists the runtimes available on a feed (version number, date/time of build)</td></tr><tr><td style=""><span class="inline">Runtime ListInstalled [-directory]</span></td><td style="">Lists the runtimes available in the current folder (<span class="inline">directory</span>=full path to the folder)<br><br>You can specify a directory to look in, but if it's not specified it will default to the current directory<br><br>This also checks whether there is a <span class="inline">receipt.json</span> file and a <span class="inline">manifest</span> folder inside the directory (making sure that it's actually a runtime)</td></tr><tr><td style=""><span class="inline">Runtime&nbsp;Info [-version]</span></td><td style="">Prints out information about the most recent runtime on the given feed; also needs a licence file to show information regarding the modules available for the user<br><br><span class="inline">version</span> can either by a string used to search through the feed titles (e.g.: <span class="inline">"739"</span> would show information for all builds containing 739 in their version numbers), or it can be <span class="inline">all</span> to show information for all feeds<br><br>It will list the modules with the <span class="inline">.zip</span> file names for each module</td></tr><tr><td style=""><span class="inline">Runtime Install [-version]</span></td><td style="">Installs the latest runtime from the given feed using the given <span class="inline">version</span> as a search filter; if that is not specified, it defaults to the latest version. It will get all the modules that the user has on their licence.</td></tr><tr><td style=""><span class="inline">Runtime Verify [-folder=.]</span></td><td style="">Calculates the checksums for all the installed files and compares them to the checksums written into the manifest <span class="inline">folder</span>. You can specify a folder to check, however if that is not specified it will default to the current directory.<br><br>This will flag any files where the checksums don't match, files that are missing and files that should not be there.<br><br>Do note that the manifest files themselves are not verified and a user can alter the manifest files to match the installed ones.</td></tr><tr><td style=""><span class="inline">Runtime FetchLicences [-ak] [-of]</span></td><td style="">Generates a licence.plist file (<span class="inline2">-of</span>) from an access key (<span class="inline2">-ak</span>), see <a href="#access_key">Access Key</a></td></tr></tbody></table><p>&nbsp;</p><h1>Igor Testing</h1><p>Here are the options that can be used for testing your builds with Igor:</p><table><tbody><tr><th style="">Option</th><th style="">Description</th></tr><tr><td style=""><span class="inline">/uf=[user_folder]<strong></strong></span></td><td style="">Set the user folder used for retrieving licence information so <span data-keyref="GameMaker Name">GameMaker</span> knows which modules can be installed</td></tr><tr><td style=""><span class="inline">/lf=[license_file]</span></td><td style="">Set a direct path to a licence file, can be used as an alternative to setting a user folder (<span class="inline">/uf</span>)</td></tr><tr><td style=""><span class="inline">/df=[device_file]</span></td><td style="">Set a direct path to a <span class="inline">devices.json</span> file, can be used as an alternative to setting a user folder (<span class="inline">/uf</span>)</td></tr><tr><td style=""><span class="inline">/timeout=[number_of_seconds_to_wait]</span></td><td style="">The timeout to use for the test in seconds, defaults to 120 seconds; the test will be stopped after this timeout is over and will be marked as failed</td></tr><tr><td style=""><span class="inline">/waittime=[number_of_seconds_to_wait]</span></td><td style="">Number of seconds to wait in the main loop before declaring the test as passed, defaults to 30 seconds</td></tr><tr><td style=""><span class="inline">/device=[device_name]</span></td><td style="">Used to look up the device name in the user folder's <span class="inline">devices.json</span> file</td></tr><tr><td style=""><span class="inline">/target=[list_of_targets]</span></td><td style="">Comma-separated list of targets in the <span class="inline">PLATFORM|DEVICE</span> format, e.g.: <span class="inline">/target="Windows|Local,HTML|Firefox"</span><br><br>If you specify&nbsp;<strong>all</strong>, the tests will attempt to run for every device in the <span class="inline">devices.json</span> file</td></tr></tbody></table><p>There is one command that you can use to run tests with Igor:</p><p class="code">Igor.exe Tests RunTests [test_directory/test_filename]</p><p>You must specify either a test directory or a test file name.</p><ul class="colour"><li>If it's a directory, Igor will look for a file called <span class="inline">tests.json</span> in the directory<ul><li>If the file <strong>is not found</strong>, Igor will recursively search for <span class="inline"><span data-keyref="Const_ExportProject_Extension">.yyz</span></span>&nbsp;and <span class="inline">.yyp</span> files in the directory<ul><li>Each project found will be built and run on Windows</li><li>It will wait till the runner reaches the main loop<ul><li>The test passes if the runner is still running after the wait time</li><li>The test fails if the project does not compile within the timeout period, or crashes before the wait time is over</li></ul></li></ul></li><li>If a&nbsp;<span class="inline">tests.json</span> file <strong>is found</strong>, Igor will run the tests described in the file (see example below)</li></ul></li><li>Alternatively, you can supply a direct path to a <span class="inline">tests.json</span> file instead of a directory</li></ul><p>&nbsp;</p><h1>Tests.json File</h1><h2>Format</h2><p>The <span class="inline">tests.json</span> file must have the following format:</p><ul class="colour"><li>The JSON file should contain an array&nbsp;of objects</li><li>Each object should describe one test<ul><li>The test object must contain these keys:<ul><li><span class="inline">name</span>: A name used to report whether the test has passed or failed</li><li><span class="inline">path</span>: A path to a <span class="inline">.yyp</span>, <span class="inline"><span data-keyref="Const_ExportProject_Extension">.yyz</span></span>, <span class="inline">.gml</span>, <span class="inline">.js</span> file or folder for the test</li><li><span class="inline">command</span>: The Igor command for the test (<span class="inline">Run</span>, <span class="inline">CreatePackage</span>, etc.&nbsp;as described above)</li></ul></li><li>The test object may also contain these keys:<ul><li><span class="inline">platform</span>: Passed directly through to Igor to do the test</li><li><span class="inline">device</span>: The device name from the <span class="inline">devices.json</span> file</li><li><span class="inline">target</span>: The target in a "<span class="inline">PLATFORM|TARGET"</span> format, e.g.: "<span class="inline">Windows|Local"</span></li><li><span class="inline">timeout</span>: A timeout for the total test including compile and run;&nbsp;if exceeded the test will be stopped and&nbsp;marked as failed</li><li><span class="inline">waittime</span>: The length of time to wait after entering the main loop before deciding whether the&nbsp;test has passed</li><li><span class="inline">owner</span>: the e-mail address of the user who will be e-mailed if this test fails</li></ul></li></ul></li></ul><h2>Example</h2><p>Here is an example of a <span class="inline">tests.json</span> file:</p><p class="code">[<br>&nbsp;{<br>&nbsp; "name" : "Game Idea Windows",<br>&nbsp; "path" : "C:/scratch/GameIdea.yyz",<br>&nbsp; "platform" : "Windows",<br>&nbsp; "command" : "Run",<br>&nbsp; "timeout" : "500",<br>&nbsp; "waittime" : "30"<br>&nbsp;},<br>&nbsp;{<br>&nbsp; "name" : "Platformer Game Windows",<br>&nbsp; "path" : "C:/Users/&lt;MY USERNAME&gt;/Documents/<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>/Platformer Game/PlatformerGame.yyp",<br>&nbsp; "target" : "Windows|Local,HTML5|selenium:firefox,PS4|Default",<br>&nbsp; "command" : "Run"<br>&nbsp;},<br>&nbsp;{<br>&nbsp; "name" : "Puzzle Game Windows",<br>&nbsp; "path" : "C:/Users/&lt;MY USERNAME&gt;/Documents/<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>/Puzzle Game/PuzzleGame.yyp",<br>&nbsp; "platform" : "HTML5",<br>&nbsp; "command" : "Run",<br>&nbsp; "device" : "selenium:chrome"<br>&nbsp;}<br>]</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back:&nbsp;<a href="Runner_Details/Runner_Details.htm">Runner &amp; Compiler</a></div><div style="float:right">Next:&nbsp;<a href="Runner_Details/Compiler_Batch_Files.htm">Compiler Batch Files / Scripts</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>