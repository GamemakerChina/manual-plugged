rh._.exports({"0":[[" ","json_stringify"]],"1":[["json_stringify"]],"2":[[" ","json_stringify"]],"3":[[" ","With this function you can convert single or nested structs and arrays into a valid JSON string."," ","You supply the initial value to use (an array index or a struct reference) and then the function will \"stringify\" it, converting it into a JSON string (converting GameMaker arrays into JSON arrays, and GameMaker structs into JSON objects). You can optionally choose to \"pretty print\" it, meaning the final JSON will be formatted for easy readability."," ","When using this function there are some important things to note:"," ","The function will ","not "," convert DS maps, lists or any other data structure into JSON, and will simply store the internal index value for the structure (which is of little use as the index will change between runs of the game), and as such you should not try to stringify any value that may contain references to data structures (for that you have ","json_encode()",")."," ","The function will convert just about any value into a \"valid\" JSON string, however the actual values contained in the string may not be exactly what you expect due to the way that the JSON standard operates:"," ","\n      \"JSON is agnostic about numbers. In any programming language, there can be a variety of number types of various capacities and complements, fixed or floating, binary or decimal. That can make interchange between different programming languages difficult. JSON instead offers only the representation of numbers that humans use: a sequence of digits. All programming languages know how to make sense of digit sequences even if they disagree on internal representations.\""," ","\n      For more information see the ","ECMA JSON Standard",".\n    "," ","If the provided struct contains any circular references, such as references back to the main struct itself (forming an infinite loop) or references to structs within the main struct forming such infinite loops, such references will be converted to ","\"null\""," upon stringifying."," ","If you include an int64 in the values to convert to JSON it will write it as an ","int"," if it is in the valid range for an int32, as a ","double"," if it can do so without losing precision or (if neither of those cases is applicable) as a ","string"," with an identifier \"","@i64@","\" before it and \"","$i64$","\" after it. When you come to parse the JSON again ","GameMaker"," will pick these identifiers up and re-convert the value back into an int64. This does mean that if the JSON is intended for a server or some other non-GameMaker target, these values will not be appropriate and so should be avoided."," ","infinity"," and ","NaN"," will be written into the JSON as ","\"@@infinity$$\""," (","\"@@-infinity$$\""," for negative) and ","\"@@nan$$\""," respectively. These values will be correctly loaded back into memory when the JSON is loaded with ","json_parse","."," ","If you include ","undefined"," in the struct, it will be encoded as ","\"null\"",", and upon reading that back into GameMaker you will get ","pointer_null","."," ","Care should be taken when writing any returned JSON string to an ","ini"," file, as the ","ini"," specifications can cause issues when using quotes and escape characters. See the function ","ini_write_string()"," for more information."],[" ","json_stringify","(val, [pretty_print]);"," ","Argument"," ","Type"," ","Description"," ","val"," ","Struct"," or ","Array"," ","The reference value for a struct or array to convert into a JSON string"," ","pretty_print"," ","Boolean"," ","OPTIONAL"," Whether to pretty print the string, i.e. insert indentation and line breaks for readability"],[" ","String"],[" ","var _contents =","\n    {","\n        version : \"1.0.0\",","\n        data:","\n        {","\n            coins : 4,","\n            mana : 15,","\n            playername : \"Gurpreet\",","\n            items :","\n            [","\n                ITEM.SWORD,","\n                ITEM.BOW,","\n                ITEM.GUITAR","\n            ]","\n        }","\n    };"," ","\n    var _json_string = json_stringify(_contents);\n  "," ","The above code will convert the ","_contents"," struct into a JSON string and stores the string in a variable. The returned string would look like this:"," ","{ \"data\": { \"items\": [ 0.0, 1.0, 2.0 ], \"coins\": 4.0, \"mana\": 15.0, \"playername\": \"Gurpreet\" }, \"version\": \"1.0.0\" }"],[" ","var _contents = ","\n    {","\n        version: \"1.0.0\",","\n        data:","\n        {","\n            coins : 5,","\n            mana : 0,","\n            playername : \"Bart\",","\n            items :","\n            [","\n                ITEM.SWORD,","\n                ITEM.BOW,","\n                ITEM.PIANO","\n            ]","\n        }","\n    }","\n    var _json_string = json_stringify(_contents, true);"," ","The above code converts the ","_contents"," struct into a JSON string and stores it in a variable. With the ","pretty_print"," parameter set to ","true",", the struct's contents are ","pretty printed"," to the string, i.e. indentation and line breaks are inserted to make the resulting string look \"pretty\" and more readable. The string then looks like this: "," ","{","\n      \"data\":{","\n        \"mana\":0.0,","\n        \"playername\":\"Bart\",","\n        \"items\":[","\n          0,","\n          1,","\n          2","\n        ],","\n        \"coins\":5.0","\n      },","\n      \"version\":\"1.0.0\"","\n    }"," ","Back: ","File Encoding"," ","Next: ","json_parse"]],"4":[[" ","© Copyright YoYo Games Ltd. 2023 All Rights Reserved"]],"5":[["json_stringify"]],"6":[[" ","Syntax:"],[" ","Returns:"],[" ","Example 1:"],[" ","Example 2: Pretty Print"]],"id":"2628"})