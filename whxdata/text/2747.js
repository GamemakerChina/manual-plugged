rh._.exports({"0":[[" ","with"]],"1":[["with"]],"2":[["with"]],"3":[[" ","with"]],"4":[[" ","As indicated in the section ","Addressing Variables in Other Instances",", it is possible to read and change the value of variables in instances and ","structs"," other than the one currently executing any given code. However, in a number of cases you want to do a lot more than just change a single variable within those other instances, and may want to perform more complex code actions that require multiple functions and lines of code. For example, imagine that you want to move all the instances of a ball object in your game 8 pixels down. You may think that this is achieved simply by the following piece of code:"," ","obj_ball.y = obj_ball.y + 8;"," ","But this is not correct, as the right-hand side of the assignment gets the value of the y-coordinate of the first ball and adds 8 to it. Next this new value is set as the y-coordinate of ","all ","balls, so the result is that all balls get the same y-coordinate, and even if you use the following:"," ","obj_ball.y += 8;"," ","it will have exactly the same effect because it is simply an abbreviation of the first statement. So how ","do"," we achieve something like this? This is why the ","with"," statement exists in GML."],[" ","The ","with"," statement takes the form:"," ","with"," (<expression>)","\n    {","\n        <statement>;","\n        <statement>;","\n        ...","\n    }"," ","The ","expression"," can take a number of different inputs:"," ","One or more instances to perform the code on: a single ","Object Instance",", an ","Object Asset"," (which indicates that ","all instances"," of this object in the room are to run the code block)."," ","One or more structs, or the keyword ","global"," to access the ","The Global Struct","."," ","One of the special ","keywords"," (","self",", ","other",", ","all"," or ","noone",")."," ","This will then change the ","scope"," of the code within the curly brackets ","{ }"," from the instance, struct or function that executes the ","with"," to the instance (or instances or struct) given in the expression."," ","Once the expression has set the scope of the ","with",", the ","statement"," will then be executed for each of the indicated instances or structs, as if it is the current (i.e. ","self","). So, returning to our original problem, to move all instances of the ball object 8 pixels down you would type:"," ","with (obj_ball)","\n    {","\n        y += 8;","\n    }"," ","If you want to execute multiple statements, just include them in the curly brackets, the same as you would around any other code block. So for example, to move all the balls in our example to a random position and give them a random speed and direction, you would use:"," ","with (obj_ball)","\n    {","\n        x = random(room_width);","\n        y = random(room_height);","\n        speed = 1 + random(2);","\n        direction = random(360);","\n    }"," ","NOTE"," Instances in a room are created in a certain ","order",", and their Create events are also executed as they are created one-by-one. This means that you must be careful when reading variables from other instances in the Create event, as that other instance may not have run its Create event yet!"," ","\n    For example: let's say ","ObjectA"," is created before ","ObjectB",", and you have the following code in those objects' Create events:"," ","ObjectA ","Create - ","myValue = objectB.myValue;"," ","ObjectB ","Create - ","myValue = 10;"," ","\n    ObjectA is created first and its Create event runs, which then crashes the game:"," ","\"Variable objectB.myValue(100003, -2147483648) not set before reading it.\""," ","\n    That's simply because ObjectB has not even been created yet, so any variables initialised in its Create event do not yet exist. This is why you must take caution when referencing other instances like this in the Create event, including any code run inside ","with()"," blocks.\n  "],[" ","The ","with"," statement essentially performs a loop. Depending on the result of the expression, the statements inside the curly brackets ","{ }"," will either be not executed at all, executed a single time or multiple times: "," ","When ","with"," receives ","noone",", it executes 0 times, i.e. it runs the code for \"no one\"."," ","When it receives an ","Object Instance",", a ","Struct"," or one of the keywords ","self",", ","other"," or ","global",", it runs the code once, for the instance or struct being referenced."," ","When it receives an ","Object Asset"," or the keyword ","all",", it runs the code multiple times: every ","iteration"," of the loop will run on one instance of the object or on all instances, respectively."," ","Because ","with"," behaves as a loop, you can use the special ","break"," and ","continue"," statements in it as well. Using ","break"," will immediately exit the ","with"," code block and move on to any code that is in the event or function after the ","with"," should have finished, e.g.:"," ","var _count = 0;","\n    with (obj_enemy)","\n    {","\n        if (++_count > 10)","\n        {","\n            break;","\n        }","\n        hp = 100;","\n    }"," ","The above code loops through the instances in the room of an object ","obj_enemy"," and sets the variable ","hp"," to 100 for the first 10 it finds. If any more than 10 instances exist, the with code will call ","break"," and end."," ","An example of using ","continue"," in a ","with"," loop would be:"," ","with (obj_enemy_parent)","\n    {","\n        if (invulnerable == true)","\n        {","\n            continue;","\n        }","\n        hp -= 25;","\n    }"," ","This code will loop through all instances with the parent ","obj_enemy_parent",", then checks each instance to see if the ","invulnerable"," instance variable is ","true"," or not. If it is, the ","continue"," keyword ends the current iteration of the loop and moves on to the next available instance, otherwise it removes 25 from the ","hp"," variable. This will repeat until all instances with that parent have been checked."],[" ","As mentioned above, within the statement(s), the indicated instance or struct has become the target (","self",") instance that runs the code block, which means that the original instance (that contains the ","with"," and the entire code block) has become the ","other"," instance."," ","So - for example - to move all balls to the position of the current instance that actually contains the code, you can type this:"," ","with (obj_ball)","\n    {","\n        x = other.x;","\n        y = other.y;","\n    }"],[" ","with (instance_create_layer(x, y, \"Instances\", obj_ball))","\n    {","\n        speed = other.speed;","\n        direction = other.direction;","\n    }"," ","The above code will create an instance of ","obj_ball"," and assign it the speed and direction of the instance that runs the whole code block."," ","TIP"," If you simply need to assign values to the new instance's variables, you can pass them through the","var_struct"," parameter of ","instance_create_layer"," / ","instance_create_depth","."],[" ","Quite a few ","instance functions"," return either an ","Object Instance"," or ","noone",". This makes them convenient to use in combination with the ","with"," statement: "," ","with (instance_nearest(x, y, obj_ball))","\n    {","\n        instance_destroy();","\n    }"," ","The above code will destroy the instance of ","obj_ball"," nearest to the instance running the code. When no instance is found, the function returns ","noone"," so that the code inside the ","with"," isn't executed."],[" ","with(clone_struct)","\n    {","\n        xx = other.x;","\n        yy = other.y;","\n        spd = other.speed;","\n        dir = other.direction;","\n    }"," ","The above code uses ","with"," to target a struct and set the given struct member variables to the values stored in the instance variables from the instance calling the code."],[" ","var _inst = noone;","\n    with (obj_ball)","\n    {","\n        if (str > other.str)","\n        {","\n            _inst = id;","\n        }","\n    }","\n    if (_inst != noone)","\n    {","\n        target = _inst;","\n    }"," ","The above code is slightly more complex than previous ones due to it using a ","local variable",". This variable is ","local ","to either the ","event"," or the ","script ","function"," and not to the instance or struct and so can be used and accessed by all instances that are referenced within the code block. So, in the code above we have set a local variable to the special keyword ","noone"," and then use the ","with"," construction to have every instance of ","obj_ball"," check their ","str"," variable against that of the instance running the code block. If the value of the variable is larger, then they store their unique ID in the ","inst"," local variable, meaning that at the end of the code, only the instance with a value greater than the calling instance (or the keyword ","noone"," if none are larger) will be stored in the local variable ","_inst","."," ","Back: ","Language Features"," ","Next: ","return"]],"6":[[" ","© Copyright YoYo Games Ltd. 2024 All Rights Reserved"]],"7":[[" ","The \"other\" Instance or Struct"],[" ","Executing Code in a New Instance"],[" ","Instance Checking Functions"],[" ","Assigning Struct Variables"],[" ","Local Variable to Cross Scopes"]],"8":[[" ","Syntax"],[" ","With as a Loop"],[" ","Specific Uses"]],"id":"2747"})