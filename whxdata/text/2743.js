rh._.exports({"0":[[" ","Static Struct"]],"1":[["Static Structs"]],"2":[["Static Structs, static_get, static_set, is_instanceof"]],"3":[[" ","Static Struct"]],"4":[[" ","Every function has a \"static struct\", where its static variables are stored. You can get that struct using ","static_get",":"," ","function counter()","\n    {","\n        static count = 0;","\n        return count ++;","\n    }"," ","\n    repeat (10) counter();"," ","\n    // Get static struct of counter()","\n    var _static_counter = static_get(counter);"," ","\n    // Both of these read the same variable","\n    show_debug_message(counter.count); // 10","\n    show_debug_message(_static_counter.count); // 10\n  "," ","This is also true for ","constructor functions",". Each constructor has a static struct, where its static variables and static methods are stored."," ","Every struct created from the constructor accesses its static variables from that static struct."," ","WARNING"," You can't access a static variable from a function that was never called, as static variables are initialised on the first call to a function. Trying to do so will give you an error and crash your game."],[" ","When you use constructor inheritance, those constructors form a \"static chain\" - a chain of static structs where each child links to its parent."," ","For example, let's say you have a constructor ","item",", and a constructor ","potion"," which is a child of ","item",":"," ","function item() constructor {}"," ","\n    function potion() : item() constructor {}"," ","\n    var _potion = new potion();\n  "," ","You can get the static struct of ","potion"," using ","static_get(potion)"," - this is where the static variables for ","potion"," are stored. Let's call this ","static_potion","."," ","Now, if you call ","static_get(static_potion)",", you will get the static struct for ","item","! This is the same struct you would get from ","static_get(item)","."," ","function item () constructor {}","\n    function potion () : item () constructor {}"," ","\n    var _potion = new potion();","\n    var _static_potion = static_get(potion);"," ","\n    show_debug_message(static_get(item) == static_get(_static_potion)); // true (1)\n  "," ","This is because ","item"," is the parent of the ","potion"," constructor, so the static struct for ","item"," is linked to the static struct for ","potion","."," ","The static structs of the top-level constructor functions, i.e. those that don't have a parent constructor, share the same parent struct. This struct is the \"root\" static struct, which has ","undefined"," as its parent struct: "," ","var _static_item = static_get(item);         // the static struct of item","\n    var _root = static_get(_static_item);        // the static struct of all top-level static structs","\n    var _must_be_undefined = static_get(_root);  // undefined"," ","This shared struct is the root parent struct of ","all"," structs and defines the default ","toString"," function that's called when the struct is converted to string."," ","This means that you can get the full static chain of a struct as follows:"," ","static_chain = [];","\n    var _node = static_get(potion);                        // the static struct to start at","\n    while (!is_undefined(_node))","\n    {","\n        array_push(static_chain, _node);","\n        _node = static_get(_node);","\n    };"," ","\n    array_foreach(static_chain, show_debug_message);       // output the path to the root struct\n  "],[" ","As static variables belong to the constructor in which they're defined, it is possible to define a static variable in a child constructor with the same name as a static variable of the parent constructor. For example: "," ","function shape () constructor","\n    {","\n        static count = 0;","\n        count++;"," ","\n        static shapes = [];","\n        array_push(shapes, self);","\n    }","\n    function rectangle () : shape () constructor","\n    {","\n        static count = 0;","\n        count++;","\n    }","\n    function square () : rectangle () constructor","\n    {","\n        static count = 0;","\n        count++;","\n    }","\n    function ellipse () : shape () constructor","\n    {","\n        static count = 0;","\n        count++;","\n    }"," ","Each shape now has its own ","count"," static variable that keeps track of the number of items of that shape. Child shapes will increment the ","count"," of their parent shapes as well, as they run their parents' constructors in addition to their own."," ","s1 = new shape();        // Added 1 shape","\n    s2 = new rectangle();    // Added 1 rectangle (and therefore also 1 shape)","\n    s3 = new square();       // Added 1 square (and therefore also 1 rectangle and 1 shape)","\n    s4 = new ellipse();      // Added 1 ellipse (and therefore also 1 shape)"," ","\n    show_debug_message($\"Number of shapes: {shape.count}\");          // 4","\n    show_debug_message($\"Number of rectangles: {rectangle.count}\");  // 2","\n    show_debug_message($\"Number of squares: {square.count}\");        // 1","\n    show_debug_message($\"Number of ellipses: {ellipse.count}\");      // 1\n  "],[" ","Let's say you're looking for a specific variable in a struct, using the dot operator (i.e. ","struct.variable_name",")."," ","If the struct contains a non-static variable with that name, the dot operator returns that variable. If it doesn't, the dot operator returns the first variable in the static chain with that name, checking the current static struct, and then traversing back the entire static chain, if needed, until a variable with that name is encountered. If the variable name cannot be found anywhere in the static chain, ","GameMaker"," will throw an error."," ","For example:"," ","function root() constructor","\n    {","\n        static show = function()","\n        {","\n            show_debug_message(\"root\");","\n        }","\n    }"," ","\n    function child() : root() constructor { }"," ","\n    function child_with_static_func() : root() constructor","\n    {","\n        static show = function()","\n        {","\n            show_debug_message(\"child_with_static_func\");","\n        }","\n    }"," ","\n    function child_with_func() : root() constructor","\n    {","\n        show = function()","\n        {","\n            show_debug_message(\"child_with_func\");","\n        }","\n    }"," ","\n    child1 = new child();","\n    child1.show();"," ","\n    child2 = new child_with_static_func();","\n    child2.show();"," ","\n    child3 = new child_with_func();","\n    child3.show();\n  "," ","The following happens in the above code: "," ","child1"," is a ","child",", which has no ","show()"," method of its own but inherits from ","root",". ","root.show()"," is called and ","\"root\""," is output."," ","child2"," is a ","child_with_static_func",", which has a static ","show()"," method. This method is called, which outputs ","\"child_with_static_func\"","."," ","child3"," is a ","child_with_func",", which inherits from ","root"," but also has its own (non-static) ","show()"," method. It calls its own ","show()"," method, outputting ","\"child_with_func\"","."],[" ","In certain situations you may want to access a static variable or method of the parent constructor from within the child constructor. To achieve this, you can go up the static chain and access the parent's static variable: "," ","function parent() constructor","\n    {","\n        static init = function() { show_debug_message(\"Parent Innit?\"); }","\n    }"," ","\n    function child() : parent() constructor","\n    {","\n        static init = function()","\n        {","\n            var _static = static_get(self);","\n            var _static_parent = static_get(_static);","\n            _static_parent.init(); // Calls the parent's init()"," ","\n            show_debug_message(\"Child Innit!\");","\n        }","\n    }\n  "],[" ","You can use ","is_instanceof"," to check if a struct belongs to the given constructor, or has the constructor as a parent."," ","This is done by checking if your struct has the given constructor's static struct anywhere in its static chain."," ","function item() constructor {}"," ","\n    function potion() : item() constructor {}"," ","\n    function enemy() constructor {}"," ","\n    var _potion = new potion();"," ","\n    show_debug_message(is_instanceof(_potion, potion)); // true (1)","\n    show_debug_message(is_instanceof(_potion, item)); // true (1)","\n    show_debug_message(is_instanceof(_potion, enemy)); // false (0)\n  "," ","The above code shows three constructors: ","item",", ","potion"," which is a child of ","item",", and ","enemy",", which is a separate constructor."," ","It creates a struct from the ","potion"," constructor. Using ","is_instanceof()",", we can check that the new struct:"," ","is a ","potion"," ","is an ","item"," ","is not an ","enemy"," ","This way you can check whether a struct \"is\" something, as ","a potion is an item",", so it returns ","true"," for both constructors. However if wouldn't be true the other way around: ","an item is not a potion","."],[" ","The function ","static_set"," is provided to let you change the static struct of a function (constructor or not). This way you can change what static variables are available to a constructor and its structs, and also change the \"static chain\" that a constructor belongs to."," ","The recommended use-case for this function is deserialisation. If you're loading structs from JSON, those structs won't belong to any constructors, however you can change that by using ","static_set"," to \"apply\" a constructor to a struct, so that that struct receives its shared static variables and you can run ","is_instanceof"," to check its kind."," ","var _potion = json_parse(_json_string);"," ","\n    show_debug_message(is_instanceof(_potion, potion)); // false (0)"," ","\n    var _static_potion = static_get(potion);","\n    static_set(_potion, _static_potion);"," ","\n    show_debug_message(is_instanceof(_potion, potion)); // true (1)\n  "," ","In the code above, upon loading the potion struct from a JSON string, it's only created as a simple struct and doesn't belong to a constructor, nor does it have any static variables."," ","After applying the static struct for ","potion"," to it (which is a constructor), it becomes an instance of ","potion"," (as tested with ","is_instanceof()",") and also gets any static variables and static methods contained in the ","potion"," constructor."," ","Back: ","Structs"," ","Next: ","Struct Forbidden Variables"]],"6":[[" ","© Copyright YoYo Games Ltd. 2024 All Rights Reserved"]],"8":[[" ","Static Chain"],[" ","Same Variable Name in Parent & Child Constructor"],[" ","How the Dot Operator Looks Up a Variable Name"],[" ","Parent's Static Variable or Method"],[" ","Checking Inheritance"],[" ","Changing The Static Struct"]],"id":"2743"})