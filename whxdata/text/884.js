rh._.exports({"0":[[" ","weak_ref_alive"]],"1":[["weak_ref_alive"]],"2":[[" ","weak_ref_alive"]],"3":[[" ","With this function you can check the ","weak reference"," to a struct to see if it is still \"alive\" or not. You supply the weak reference to check (as returned by the function ","weak_ref_create()","), and the function will return ","true"," if the struct is still being referenced somewhere or ","false"," if it's not and has been garbage collected. Note that if you supply a value that is not a weak reference, the function will return ","undefined","."],[" ","weak_ref_alive(weak_ref);"," ","Argument"," ","Type"," ","Description"," ","weak_ref"," ","Struct Weak Reference"," ","The weak reference to the struct you want to check."],[" ","Boolean"," (or undefined)"],[" ","if weak_ref_alive(inventory_ref)","\n    {","\n        inventory = -1;","\n    }"," ","The above code checks a weak reference to a struct and if it is still alive the variable referencing it is set to -1, de-referencing the struct and enabling it to be garbage collected."," ","Back: ","Garbage Collection"," ","Next: ","weak_ref_any_alive"]],"4":[[" ","© Copyright YoYo Games Ltd. 2023 All Rights Reserved"]],"5":[["weak_ref_alive"]],"6":[[" ","Syntax:"],[" ","Returns:"],[" ","Example:"]],"id":"884"})