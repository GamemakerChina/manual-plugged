rh._.exports({"0":[[" ","json_parse"]],"1":[["json_parse"]],"2":[["json_parse"]],"3":[[" ","json_parse"]],"4":[[" ","This function can be used to parse a JSON string (either previously created using ","json_stringify"," or from any valid source), and convert it into a collection of arrays or structs, where an array is the equivalent of a JSON array and a struct is the equivalent of a JSON object. You supply the string to parse, and the function will return the top level array or struct which can then be used in your code. If you are not sure of the contents of the JSON, you can use the different ","Variable Functions"," (like ","typeof()"," and ","variable_struct_get_names()"," in case of a struct) to check the returned contents. Note that trying to parse an invalid value (i.e.: not a string) will throw an exception error."," ","When using this function there are some important things to note:"," ","If the supplied JSON string includes ","undefined"," as a value for any property, it will be converted to ","pointer_null"," upon being parsed."," ","This function only allows you to load JSON files with a maximum nesting limit of 128."],[" ","json_parse(json)"," ","Argument","Type"," ","Description"," ","json","String"," ","The JSON string to parse"],[" ","Struct"," or ","Array"],[" ","json = \"{\\\"myObj\\\": { \\\"apples\\\":10, \\\"oranges\\\":12, \\\"potatoes\\\":100000, \\\"avocados\\\":0 }, \\\"myArray\\\":[0, 1, 2, 2, 4, 0, 1, 5, 1]}\";"," ","\n    data = json_parse(json);","\n    show_debug_message(data);\n  "," ","The above code creates a new string containing a valid JSON object, and then calls ","json_parse()"," to convert that string into a GML struct. It then prints the result to the debug log."," ","NOTE"," You will notice that the JSON string contains a backslash (","\\",") before every double quote (","\"",") inside it:"," ","json = \"{ ","\\\" ","myObj"," ","\n    This is to ensure that the double quote is read as an actual character within the string, instead of being read as part of the code and closing the string prematurely. This way we are using a backslash to \"escape\" the double quote."," ","\n    If you are loading JSON from an external file however, there is no need to escape characters in that file and doing so may result in errors during parsing.\n  "," ","After parsing the JSON string above, if you know its structure, you can use various ","Variable Functions"," to check and read its contents:"," ","data = json_parse(json);"," ","\n    // Check if the struct has myObj variable","\n    if variable_struct_exists(data, \"myObj\")","\n    {","\n        // Check if it's a struct","\n        if is_struct(data.myObj)","\n        {","\n            // Print all struct members to the log","\n            var _names = variable_struct_get_names(data.myObj);","\n            var _str = \"\";","\n            for (var i = 0; i < array_length(_names); i++;)","\n            {","\n                _str = _names[i] + \": \" + string(variable_struct_get(data.myObj, _names[i]));","\n                show_debug_message(_str);","\n            }","\n        }","\n    }"," ","\n    // Check if the struct has myArray variable","\n    if variable_struct_exists(data, \"myArray\")","\n    {","\n        // Check if it's an array","\n        if is_array(data.myArray)","\n        {","\n            show_debug_message(data.myArray);","\n        }","\n    }\n  "," ","The above code will parse the given JSON string, generating the following console output:"," ","oranges: 12","\n    potatoes: 100000","\n    avocados: 0","\n    apples: 10","\n    [ 0,1,2,2,4,0,1,5,1 ]"," ","Back: ","File Encoding"," ","Next: ","base64_encode"]],"5":[[" ","Syntax:"],[" ","Returns:"],[" ","Example:"]],"6":[[" ","© Copyright YoYo Games Ltd. 2023 All Rights Reserved"]],"id":"2355"})