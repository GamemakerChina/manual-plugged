rh._.exports({"0":[[" ","handle_parse"]],"1":[["handle_parse"]],"2":[["handle_parse"]],"3":[[" ","handle_parse"]],"4":[[" ","This function parses a string to create a ","handle reference","."," ","A handle is represented in a string with this format: ","\"ref <type> <id>\"","."," ","NOTE"," You can use ","string"," to get the string representation of a handle and ","real"," to get the index number that it holds."],[" ","handle_parse","(value_string);"," ","Argument"," ","Type"," ","Description"," ","value_string"," ","String"," ","The string representation of the handle, formatted as ","\"ref <type> <id>\""],[" ","Handle"," (or ","undefined"," in case of an invalid string)"],[" ","sprite = spr_player;","\n    handle_as_string = string(sprite);","\n    h = ","handle_parse","(handle_as_string);"," ","\n    show_debug_message($\"{sprite} ({typeof(sprite)})\");","\n    show_debug_message($\"{handle_as_string} ({typeof(handle_as_string)})\");","\n    show_debug_message($\"{h} ({typeof(h)})\");\n  "," ","The code above converts the handle of a sprite named ","spr_player"," to its string representation (","handle_as_string","), and then back into a handle (","h","). It then outputs each of the created instance variables in a debug message, along with its type. This prints the following:"," ","ref sprite 0 (ref)","\n    ref sprite (string)","\n    ref sprite 0 (ref)"," ","You can see that the original reference is converted into a string, which is then parsed back as a reference, which can again be used in functions just like the original reference."," ","The values of the handle variables are implicitly converted to their string representation to display them."," ","Back: ","Variable Functions"," ","Next: ","variable_instance_exists"]],"5":[[" ","Syntax:"],[" ","Returns:"],[" ","Example:"]],"6":[[" ","© Copyright YoYo Games Ltd. 2024 All Rights Reserved"]],"id":"2217"})