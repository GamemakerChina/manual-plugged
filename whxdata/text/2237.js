rh._.exports({"0":[[" ","zip_unzip_async"]],"1":[["zip_unzip_async"]],"2":[["zip_unzip_async"]],"3":[[" ","zip_unzip_async"]],"4":[[" ","The function is the asynchronous equivalent of ","zip_unzip",". It takes a path to a ZIP file, and the target directory where it should be extracted."," ","If the call is successful, a request ID is returned, and later the Async ","Save / Load"," event is triggered where this ID can be checked. The ","async_load"," map in that event will contain the following keys:"," ","\"id\"",": The request ID as returned by the original function call"," ","\"status\"",": ","0"," if the ZIP extracted successfully, ","-1"," if it failed"," ","This function will trigger a fatal error if it's called between ","buffer_async_group_begin"," and ","buffer_async_group_end"," calls."," ","Please read the ","zip_unzip"," page for file system limitations."," ","NOTE"," This functionality is not available for the HTML5 target platform."],[" ","zip_unzip_async(zip_file, target_directory);"," ","Argument"," ","Type"," ","Description"," ","zip_file"," ","String"," ","The zip file to open"," ","target_directory"," ","String"," ","The target directory to extract the files to"],[" ","Real"],[" ","level_data_request = zip_unzip_async(\"/downloads/level_data.zip\", working_directory + \"extracted/\");"," ","Async Save/Load event"," ","var _id = async_load[? \"id\"];"," ","\n    if (_id == level_data_request)","\n    {","\n        var _status = async_load[? \"status\"];"," ","\n        if (_status < 0)","\n        {","\n            show_debug_message(\"ZIP file extraction failed.\");","\n        }","\n    }\n  "," ","The above code attempts to extract a ZIP file into the working directory. In the Async Save/Load event, it checks the status of that request, and prints a message to the output log if it failed."," ","Back: ","Encoding And Hashing"," ","Next: ","zip_create"]],"5":[[" ","Syntax:"],[" ","Returns:"],[" ","Example:"]],"6":[[" ","© Copyright YoYo Games Ltd. 2024 All Rights Reserved"]],"id":"2237"})