rh._.exports({"0":[[" ","Script Functions vs. Methods"]],"1":[["Script Functions vs. Methods"]],"2":[["calling methods, calling script functions, method performance"]],"3":[[" ","Script Functions vs. Methods"]],"4":[[" ","This page covers essential information about using script functions vs. methods."],[" ","A ","script function"," is created with this syntax:"," ","function name()","\n    {","\n        code;","\n    }"," ","A ","method variable"," is created with this syntax:"," ","name = function()","\n    {","\n        code;","\n    }"," ","You should use the first syntax in scripts, to create global functions that can be called from any scope in your game."," ","You should use the second syntax when creating functions in ","structs/constructors"," and objects. This syntax creates a variable containing a method."],[" ","You can call both script functions and methods directly by using parentheses ","()",",  just like a ","runtime function",":"," ","// Create the function","\n    function reset_x()","\n    {","\n        x = xstart;","\n    }"," ","\n    // Call the function","\n    reset_x();\n  "," ","You can also use the function ","script_execute()"," to run a script function, although it's now a legacy function and not recommended for use."],[" ","You can store a reference to a method, in another variable, to call it later through that different variable:"," ","// Create method","\n    reset_alpha = function()","\n    {","\n        image_alpha = 1;","\n    }"," ","\n    // Pass reference and call","\n    temp_1 = reset_alpha;","\n    temp_1();\n  "," ","NOTE"," See how the code doesn't put ","()"," after ","reset_alpha",". That's because we're reading the method reference and not calling it."," ","In this example, calling ","temp_1"," will call ","reset_alpha",", as it stores a reference to that ","method","."," ","You are completely fine to pass around a method reference in this way. When using script functions though, there is a caveat."],[" ","You can also store a reference to a script function, in another variable:"," ","// Create function","\n    function reset_x()","\n    {","\n        x = xstart;","\n    }"," ","\n    // Store reference","\n    temp_1 = reset_x;\n  "," ","Now, you can call ","temp_1"," by doing this:"," ","temp_1();"," ","However, since this variable refers to a ","script function",", it first has to convert it into a ","method",", and then call it."," ","This can easily result in increased memory usage, especially if you're calling it every frame, because the engine now has to create a new method every frame for this call. "," ","So, what is the solution?"," ","Use ","script_execute()"," to call the script function via its reference, which will not create a method."," ","Or, the better solution: convert your script function ","into a method"," when passing its reference."," ","To implement the second solution, your code would look like this:"," ","temp_1 = method(undefined, reset_x);"," ","This is creating a new method from the ","reset_x"," script function, using ","method()","."," ","Calling ","temp_1()"," now using parentheses will not increase memory usage, as the method is already created for you."," ","Again, this only applies if you're calling a script function ","indirectly",", via a reference stored in a variable. Calling it directly doesn't cause such problems."," ","Back: ","GML Code Overview"," ","Next: ","Static Variables"]],"6":[[" ","© Copyright YoYo Games Ltd. 2023 All Rights Reserved"]],"8":[[" ","Basic Difference"],[" ","Direct Calls"],[" ","Indirect Calls: Methods"],[" ","Indirect Calls: Script Functions"]],"id":"2413"})