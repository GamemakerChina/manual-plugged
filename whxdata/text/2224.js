rh._.exports({"0":[[" ","camera_copy_transforms"]],"1":[["camera_copy_transforms"]],"2":[["camera_copy_transforms"]],"3":[[" ","camera_copy_transforms"]],"4":[[" ","This function copies all transform-related settings of the source camera to the destination camera."," ","More specifically, it copies the source camera's view and projection matrices, as well as the view position, size, speed, border and angle values."," ","NOTE"," This function is mostly meant for internal use by ","GameMaker"," when working with filters and effects though you can use it as a convenient way to copy one camera's transforms to another one."," ","WARNING"," The function ","doesn't"," copy the source camera's ","begin, end and update scripts","."],[" ","camera_copy_transforms","(dest_camera, src_camera);"," ","Argument"," ","Type"," ","Description"," ","dest_camera"," ","Camera ID"," ","The camera to copy the source camera's transforms to (projection and view matrix)"," ","src_camera"," ","Camera ID"," ","The camera that contains the projection and view matrices that you want to copy"],[" ","N/A"],[" ","cam1 = view_camera[0];","\n    cam2 = camera_create();"," ","camera_copy_transforms","(cam2, cam1);\n  "," ","The above code assigns the camera that ","GameMaker"," creates internally for view 0 (that you can first configure in ","The Room Editor",") to an instance variable ","cam1",". Then it creates a new, \"empty\" camera ","cam2"," using the function ","camera_create",". It then copies ","cam1","'s transform-related settings to ","cam2"," by calling ","camera_copy_transforms","."," ","Back: ","Cameras And View Ports"," ","Next: ","camera_set_view_mat"]],"5":[[" ","Syntax:"],[" ","Returns:"],[" ","Example:"]],"6":[[" ","© Copyright YoYo Games Ltd. 2024 All Rights Reserved"]],"id":"2224"})