rh._.exports({"0":[[" ","audio_play_sound_ext"]],"1":[["audio_play_sound_ext"]],"2":[["audio_play_sound_ext"]],"3":[[" ","audio_play_sound_ext"]],"4":[[" ","With this function you can play any sound asset in your game using any combination of parameters."," ","This function takes its parameters as a ","struct",". Depending on the parameters that you provide, the function behaves like ","audio_play_sound",", ","audio_play_sound_at"," or ","audio_play_sound_on",". The only key that is strictly required in the struct is the ","sound"," key."," ","The full list of keys is as follows: "," ","sound"," (","Sound Asset",", required)"," ","priority"," (","Real",", optional), defaults to 0"," ","loop"," (","Boolean",", optional), defaults to ","false"," ","gain"," (","Real",", optional), defaults to 1.0"," ","offset"," (","Real",", optional), defaults to the asset-level offset"," ","pitch"," (","Real",", optional), defaults to 1.0"," ","listener_mask"," (","Real",", optional), defaults to the emitter-level listener mask/global listener mask"," ","emitter"," (","Audio Emitter ID",", optional), defaults to undefined"," ","position"," (","Struct",", optional), defaults to undefined\n      "," ","x"," (","Real",")"," ","y"," (","Real",")"," ","z"," (","Real",")"," ","falloff_ref"," (","Real",")"," ","falloff_max"," (","Real",")"," ","falloff_factor"," (","Real",")"],[" ","audio_play_sound_ext","(params);"," ","Argument"," ","Type"," ","Description"," ","params"," ","Struct"," ","A struct containing the key-value pairs for each of the parameters that you want to set. The ","sound"," key is required and takes a ","Sound Asset"," as a value."],[" ","Sound Instance ID"],[" ","audio_play_sound_ext","({ sound: snd_ambience });"," ","The above code plays a sound \"snd_ambience\". The sound instance gets a default priority of 0 and won't be looped. All other sound properties are default as they haven't been provided in the struct."],[" ","var _sound_params =","\n    {","\n        sound: snd_shot,","\n        priority: 20,","\n        gain: 1.2,","\n        pitch: 2,","\n        emitter: em_north_entrance","\n    };"," ","audio_play_sound_ext","(_sound_params);\n  "," ","The above code first creates a temporary struct ","_sound_params",". It stores the settings to play a sound \"snd_shot\" with a priority of 20, a gain of 1.2 and a pitch of 2 on an existing emitter ","em_north_entrance",". It then plays the sound with those settings using ","audio_play_sound_ext","."],[" ","var _sound_params =","\n    {","\n        sound: snd_shot,","\n        pitch: 1.1,","\n        position:","\n        {","\n            x: 100,","\n            y: 100,","\n            z: 20","\n        }","\n    };"," ","audio_play_sound_ext","(_sound_params);\n  "," ","The above code creates a temporary struct ","_sound_params",". The struct stores the settings to play a sound \"snd_shot\" with a pitch of 1.1 at an x  of 100, a y of 100 and z of 20. The sound is then played with those settings using ","audio_play_sound_ext","."," ","Back: ","Audio"," ","Next: ","audio_play_sound_at"]],"5":[[" ","Syntax:"],[" ","Returns:"],[" ","Example 1: Playing a basic sound (similar to audio_play_sound)"],[" ","Example 2: Playing a sound on an emitter (similar to audio_play_sound_on)"],[" ","Example 3: Playing a sound at a given position in 3D audio space (similar to audio_play_sound_at)"]],"6":[[" ","© Copyright YoYo Games Ltd. 2023 All Rights Reserved"]],"id":"2636"})