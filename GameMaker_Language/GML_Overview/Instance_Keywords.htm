<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../assets/import/main.css"><script>let str;removeHtml=function(t){return t=(t=(t=(t=t.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(t){return t.match(/(<([^>]+)>)/gi)},setTranslator=function(t,n,a){let e;e=a?t.attr(a):t.html();let l=n[removeHtml(e)];if(null!=l&&l.length){n=retHtml(e);let o=0;n&&n.forEach(function(t,n){var a=l.replace("{"+o+"}",t);l=a===l?l.replace("{}",t):a,o++}),a?t.attr(a,l):t.html(l)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){$(".header").length&&$(".header").append(`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`)},removeExtensionFromHash=function(t){return t.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")},$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../..",gTopicId="8.2.1.2_2"</script><script type="text/javascript" src="../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Instance Keywords</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../assets/css/default.css" type="text/css"><script src="../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Page outlining the different instance &quot;keywords&quot;"><meta name="rh-index-keywords" content="Instance Keywords,noone,self,other,all"><meta name="search-keywords" content="self,all,noone,other,instance keywords"><meta name="brsnext" value="GameMaker_Language/GML_Overview/Evaluation_Order.htm"><meta name="brsprev" value="GameMaker_Language/GML_Overview/Commenting_Code.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Instance Keywords"><span>Instance Keywords</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">Instance Keywords</span></h1><p>To make certain things easier in <span data-keyref="GameMaker Name">GameMaker</span>, you can use one of several <b>instance keywords</b> in your code (whether <span data-keyref="GML_Code">GML Code</span>&nbsp;or <span data-keyref="GML_Visual">GML Visual</span>). These keywords are used to identify instances and structs. Each one is explained in the text below.</p><p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;The given keywords are represented by&nbsp;<strong>negative integer values</strong> internally, so care must be taken when assigning or checking variable values against or with these keywords, as you may get unexpected results later as <span data-keyref="GameMaker Name">GameMaker</span> interprets the value you have used as something else. You should also note that using the integer values directly instead of the keywords in your code is <b>not recommended at all</b> and could cause issues later on.</p><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#self"><span data-open-text="true" data-skip-index="true"><span class="inline">self</span></span><span data-close-text="true"><span class="inline">self</span></span></a></p><div class="droptext" data-targetname="drop-down"><table><colgroup><col><col></colgroup><tbody><tr><th>Keyword</th><th>Description</th></tr><tr><td><span class="inline">self</span></td><td>This keyword refers to the <strong>current scope</strong>, which is the instance or struct that is executing the current block of code.</td></tr></tbody></table><p class="dropspot"><span class="inline2">self</span> can be used to identify the current struct or instance that is in scope in the current block of code. For example:</p><p class="code">var val = 100;<br>with (instance_create_layer(x, y, "Instances", obj_Fire))<br>{<br>&nbsp; &nbsp; self.val = val;<br>}</p><p class="dropspot">In this example you can see that we have a <i>local</i> variable called <span class="inline2">val</span> and we want it to set the <i>instance</i> variable with the same name in the newly created object instance. To identify the instance variable correctly and tell <span data-keyref="GameMaker Name">GameMaker</span> to set it in the instance calling the code block, we use the <span class="inline2">self</span> keyword. In most cases you can also use the&nbsp;<span class="inline2"><a href="../GML_Reference/Asset_Management/Instances/Instance_Variables/id.htm">id</a></span> built-in&nbsp;instance variable instead of <span class="inline2">self</span>, but <span class="inline2">self</span> offers certain benefits. To start with, it is faster for the compiler to identify the instance (or struct) using <span class="inline2">self</span> rather than <span class="inline2">id</span>, as the <span class="inline2">id</span> value goes through the instance lookup table while <span class="inline2">self</span> does not.&nbsp;Secondly, for those people making extensions, it is very useful to ensure the correct scoping of variables, since it is possible that a project which uses an extension may have a global scope variable or something&nbsp;with the same name as a variable in the extension.</p><p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;The&nbsp;<span class="inline2">self</span>&nbsp;keyword is <strong>not</strong> a shortcut for the actual ID value of an instance or struct and should only be used in the context explained above. If you require the ID <strong>value</strong> for an instance then you need to use <span class="inline2">self.id</span>, e.g.:</p><p class="code">var myID = id;<br>with (all)<br>{<br>&nbsp; &nbsp; if (self.id == myID)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; // do something<br>&nbsp; &nbsp; }<br>}</p><p class="dropspot"><span class="inline2">self</span> is used in the same way with&nbsp;<a href="Structs.htm">structs</a>&nbsp;to reference member variables of the struct. It can also be used within constructor functions to reference the struct being generated from the constructor.</p><p class="dropspot">You can also assign <span class="inline2">self</span> as a value to a variable. What <span class="inline2">self</span> references is only determined when you use it to look up a variable. For example:&nbsp;</p><p class="code_heading">Create Event</p><p class="code">my_val = 5;<br>the_thing = self;<br><br>the_struct =&nbsp;<br>{<br>&nbsp; &nbsp; a: 4,<br>&nbsp; &nbsp; b: 5<br>}<br><br>with(the_struct)<br>{<br>&nbsp; &nbsp; a = other.the_thing.my_val;<br>}<br><br>show_debug_message(the_struct);&nbsp; //&nbsp;{ a : 5, b : 5 }</p><p class="dropspot">This code is executed when an instance of an object is created. The instance receives a variable&nbsp;<span class="inline2">my_val</span>&nbsp;that's assigned the value <span class="inline2">5</span> and a variable&nbsp;<span class="inline2">the_thing</span>&nbsp;that's assigned the value <span class="inline2">self</span>. It also receives a variable <span class="inline2">the_struct</span>, with variables <span class="inline2">a</span> set to <span class="inline2">4</span> and <span class="inline2">b</span> set to <span class="inline2">5</span>. Next, the scope is changed to that of the struct using a&nbsp;<span class="inline2"><a href="Language_Features/with.htm">with</a></span> statement. Between the curly braces <span class="inline2">{ }</span>,&nbsp; the scope is that of the struct. The following line of code is then executed:&nbsp;</p><p class="code">a = other.the_thing.my_val;</p><p class="dropspot">The variable <span class="inline2">a</span> is an existing variable of <span class="inline2">the_struct</span>&nbsp;so it can be assigned to directly inside the <span class="inline2">with</span>. What the expression on the right-hand side refers to can be found by checking the dot operators one by one.&nbsp;<span class="inline2">other</span>&nbsp;refers to the scope that came before, i.e. before entering the <span class="inline2">with</span> statement, so the instance scope. The instance's <span class="inline2">the_thing</span>&nbsp;variable stores the value&nbsp;<span class="inline2">self</span>, which refers to the <strong>current</strong> scope, which was just found to be that of the instance. Its&nbsp;<span class="inline2">my_val</span>&nbsp;variable stores the value <span class="inline2">5</span>, which is finally assigned to the struct's variable <span class="inline2">a</span>. The final value of <span class="inline2">the_struct</span> is therefore <span class="inline2">{a : 5, b : 5}</span>.</p><p class="dropspot">Note that doing:&nbsp;</p><p class="code">with(the_struct)<br>{<br>&nbsp; &nbsp; a = the_thing.my_val;<br>}</p><p class="dropspot">will throw an error, since here <span class="inline2">my_val</span> is looked up on <span class="inline2">the_struct</span>'s "self". However, <span class="inline2">the_struct</span> doesn't have a <span class="inline2">my_val</span> variable!</p><p class="dropspot">&nbsp;</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true" data-skip-index="true"><span class="inline">other</span></span><span data-close-text="true"><span class="inline">other</span></span></a></p><div class="droptext" data-targetname="drop-down1"><table><colgroup><col><col></colgroup><tbody><tr><th>Keyword</th><th>Description</th></tr><tr><td><span class="inline">other</span></td><td>This keyword refers to the "other" instance involved in a collision event, or to the instance or struct that's executing a&nbsp;<span class="inline2"><a href="Language_Features/with.htm">with</a></span>&nbsp;statement<font face="menlo, consolas, monospace"><span style="font-size:17px"><b></b></span></font> or calls a function.<br>More generally,&nbsp;<span class="inline2">other</span>&nbsp;always refers to the<strong>&nbsp;scope through which the current scope was accessed</strong>&nbsp;or, put differently, the scope you were previously in&nbsp;or the scope where you came from.</td></tr></tbody></table><p class="dropspot">The special keyword <span class="inline2">other</span> has multiple ways that it can be used to reference a specific instance or struct: it can be used in a&nbsp;<span class="inline2"><a href="Language_Features/with.htm">with</a></span> statement,&nbsp;in a <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">collision event</a>, or in a function. This section is going to explain the last two use cases.</p><p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;If you're not in a collision event and don't change scope using the dot notation&nbsp;<span class="inline2">.</span> or a&nbsp;<span class="inline2"><a href="Language_Features/with.htm">with</a></span>&nbsp;statement,&nbsp;<span class="inline2">other</span> simply refers to the current scope, i.e. it refers to the same thing as&nbsp;<span class="inline2">self</span>.</p><h2 class="dropspot">Collision Event</h2><p class="dropspot">A collision event can only happen between <strong>two</strong> instances. You <i>can</i> have multiple collisions between multiple instances, but they are all resolved by <span data-keyref="GameMaker Name">GameMaker</span> on a 1-on-1 basis, with the "self" instance that has the collision event and the "other" instance that is colliding with it.</p><p class="dropspot">Imagine you have a player instance, multiple enemy instances and multiple bullet instances that the enemy can fire at you. You can assign each enemy a single bullet instance but with a different damage variable randomly assigned to it when created, for example:</p><p class="code">var bullet;<br>bullet = instance_create_layer(x, y, "Bullets", obj_Bullet);<br>bullet.damage = 5 + irandom(5);<br>bullet.speed = 8;<br>bullet.direction = point_direction(x, y, obj_Player.x, obj_Player.y);</p><p class="dropspot">You can see how we set its variables using the dot notation&nbsp;as outlined in the section on <a href="Addressing_Variables_In_Other_Instances.htm">Addressing Variables In Other Instances</a>. This will give each bullet instance a different damage value, but how will the player detect the damage that it has to take when it's hit by a bullet?</p><p class="dropspot">For this, the player will need to have a collision event with <span class="inline2">obj_Bullet</span>, and within that event use <span class="inline2">other</span> to read variables from the colliding bullet instance:</p><p class="code">hp -= other.damage;<br>if (hp &lt;= 0) instance_destroy();</p><p class="dropspot">The above code will deduct the amount stored in the <i>other</i> instance's <span class="inline2">damage</span> variable from the player's <span class="inline2">hp</span> variable, then it will check to see if the <span class="inline2">hp</span> is lower than or equal to 0. If it is then it will destroy the player instance. Please note that&nbsp;the other instance must have the variable being checked or else an error will be thrown.</p><p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;The Collision event is the only event that has a special meaning for the <span class="inline2">other</span> keyword. In all other events and scripts, the behaviour of <span class="inline2">other</span> will be defined by the context it is being used in (such as a <span class="inline2">with()</span> block, a function, struct declaration, etc.).</p><p class="dropspot">You can assign values to variables, or even create new ones, using <span class="inline2">other</span> in the collision event, like this:</p><p class="code">// add ten to the other instance's "mana" variable<br>other.mana += 10;<br>// set the other instance variable "hit" to true, creating the variable if it doesn't already exist<br>other.hit = true;</p><h2 class="dropspot">Struct Declaration</h2><p class="dropspot">Scope doesn't change inside a struct declaration, so&nbsp;<span class="inline2">other</span> refers to the same scope as&nbsp;<span class="inline2">self</span> (the <strong>current</strong> scope), meaning the struct or instance that's initialising the struct:</p><p class="code">var _struct =<br>{<br>&nbsp; &nbsp; parent_instance : other<br>}<br><br>show_debug_message(_struct.parent_instance == self);<br>// This prints '1' (true) meaning that both sides refer to the same instance</p><p class="dropspot">However, you do not need to use <span class="inline2">other</span> to read variables from the instance as any variables you reference directly will be read from that instance's scope, as described <a href="Structs.htm#inst_in_struct">in this section</a> of the manual. You would only need to use this if you wanted to store a reference to that instance's struct.</p><h2 class="dropspot">Instance Method</h2><p class="dropspot">Using <span class="inline2">other</span> within another instance's <a href="Method_Variables.htm">method</a> refers to the instance that called that method.</p><p class="dropspot">For example, let's say <span class="inline2">Object2</span> has a method that references <span class="inline2">self</span> and <span class="inline2">other</span>. This method is then called in <span class="inline2">Object1</span>. Since the method was created in <span class="inline2">Object2</span>, it is&nbsp;<strong>bound</strong>&nbsp;to it and will always use the <span class="inline2">Object2</span>&nbsp;instance as the "self", no matter which instance calls it. In such a case, the calling instance becomes&nbsp;<span class="inline2">other</span>.</p><p class="code">//&nbsp;In Object2<br>my_method = function()<br>{<br>&nbsp; &nbsp; show_debug_message(object_get_name(self.object_index));<br>&nbsp; &nbsp; show_debug_message(object_get_name(other.object_index));<br>}<br><br>// In Object1<br>Object2.my_method();</p><p class="dropspot">This would cause the instance to first print its own object name&nbsp;("Object2") and then the object name of the calling instance ("Object1").</p><p class="dropspot">The same will apply to a method that is bound to a struct.</p><h2 class="dropspot">Constructor Function</h2><p class="dropspot">When used within a constructor function, <span class="inline2">other</span> will reference the instance or struct that is calling that function,&nbsp;however this is not recommended for general use as any external data that a constructor needs to use should be passed in as arguments.</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true" data-skip-index="true"><span class="inline">all</span></span><span data-close-text="true"><span class="inline">all</span></span></a></p><div class="droptext" data-targetname="drop-down2"><table><colgroup><col><col></colgroup><tbody><tr><th>Keyword</th><th>Description</th></tr><tr><td><span class="inline">all</span></td><td>All instances currently active in the room.</td></tr></tbody></table><p class="dropspot">This keyword is used to tell <span data-keyref="GameMaker Name">GameMaker</span> that a function is to be applied, or to check, all active instances within a room (deactivated instances will not be checked or accessed). You <b>cannot</b> use <span class="inline2">all</span> to access or set variables in other instances using the point method (see <a href="Addressing_Variables_In_Other_Instances.htm">here</a>), but you <strong>can</strong> use it when using&nbsp;<span class="inline2"><a href="Language_Features/with.htm">with</a></span>, for example:</p><p class="code">with (all)<br>{<br>&nbsp; &nbsp; speed = 0;<br>}</p><p class="dropspot">The above code will set the speed of all instances in the room to 0. You can also use <span class="inline2">all</span> within functions to target or check all instances in the room for example:</p><p class="code">// Check a point for any active instance in the room<br>inst = instance_position(mouse_x, mouse_y, all);<br><br>// Check all instances for a collision along a line<br>if collision_line(x, y, mouse_x, mouse_y, all, false, true) {}<br><br>// Add all instances in the room into a motion planning grid<br>mp_grid_add_instances(grid, all, false);</p><p class="dropspot"><span class="inline2">all</span> is a very useful keyword and can be used in numerous situations within your code and actions, often cutting down on the amount of code you need to write to achieve a desired effect.</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span data-open-text="true" data-skip-index="true"><span class="inline">noone</span></span><span data-close-text="true"><span class="inline">noone</span></span></a></p><div class="droptext" data-targetname="drop-down3"><table><colgroup><col><col></colgroup><tbody><tr><th>Keyword</th><th>Description</th></tr><tr><td><span class="inline">noone</span></td><td>No instance at all.</td></tr></tbody></table><p class="dropspot">It may seem odd, but many times while programming your games will you find the need to check if there are no instances found at a location, in a collision, etc.&nbsp;In those cases you would use this keyword to check for nothing, something like this:</p><p class="code">if (instance_nearest(x, y, obj_enemy) != noone)<br>{<br>&nbsp; &nbsp; //do something as there is an enemy instance near<br>}</p><p class="dropspot">In this example, the function&nbsp;<span class="inline3_func"><a href="../GML_Reference/Asset_Management/Instances/instance_nearest.htm">instance_nearest</a></span> will return either <span class="inline2" id="">noone</span> or the nearest found instance. Basically, any time that you need to check for an instance, you can expect to get either <span class="inline2" id="">noone</span> or an instance returned.</p><p class="dropspot">This can&nbsp;also be useful in combination with a&nbsp;<span class="inline2"><a href="Language_Features/with.htm">with</a></span> statement:&nbsp;</p><p class="code">with (instance_nearest(x, y, obj_enemy))<br>{<br>&nbsp; &nbsp; //do something as there is an enemy instance near<br>}</p><p class="dropspot">If the function returns an instance, the code between the curly braces <span class="inline2">{ }</span> will run once. If the function returns <span class="inline2">noone</span>, the code won't be executed.</p><p class="dropspot">You can also assign <span class="inline2">noone</span> as a value to a variable to store the result of such a function:&nbsp;</p><p class="code_heading">Create Event</p><p class="code">ins_last_collided_with = noone;</p><p class="code_heading">Collision Event</p><p class="code">ins_last_collided_with = other.id;</p><p class="dropspot">&nbsp;</p></div><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="GML_Overview.htm">GML&nbsp;Overview</a></div><div style="float:right">Next:&nbsp;<a href="Evaluation_Order.htm">Evaluation Order</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>