<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../assets/import/main.css"><script>let str;removeHtml=function(t){return t=(t=(t=(t=t.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(t){return t.match(/(<([^>]+)>)/gi)},setTranslator=function(t,n,a){let e;e=a?t.attr(a):t.html();let l=n[removeHtml(e)];if(null!=l&&l.length){n=retHtml(e);let o=0;n&&n.forEach(function(t,n){var a=l.replace("{"+o+"}",t);l=a===l?l.replace("{}",t):a,o++}),a?t.attr(a,l):t.html(l)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){$(".header").length&&$(".header").append(`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`)},removeExtensionFromHash=function(t){return t.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")},$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../..",gTopicId="8.2.1.1_4"</script><script type="text/javascript" src="../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Expressions And Operators</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../assets/css/default.css" type="text/css"><script src="../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Page outlining the different GML expressions"><meta name="rh-index-keywords" content="Expressions And Operators,=,&amp;&amp;,||,^^,<,>,<=,>=,==,!=,|,&amp;,^,<<,>>,+,-,*,/,++,--,div,%,mod,!,~,??,??="><meta name="search-keywords" content="expressions,order of operation,operators,div,mod,&amp;&amp;,||,xor,^^,|,^,&amp;,++,--,<<,>>,<=,>=,==,=,:=,$,??,??="><meta name="brsnext" value="GameMaker_Language/GML_Overview/Script_Functions.htm"><meta name="brsprev" value="GameMaker_Language/GML_Overview/Addressing_Variables_In_Other_Instances.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Expressions And Operators"><span>Expressions And Operators</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">Expressions And Operators</span></h1><h2 id="expressions">Expressions</h2><p>An expression is a mathematical phrase that can contain ordinary numbers, variables, strings, or functions as well as one or more <strong>operators</strong> (like add, subtract, multiply, etc.). The values used in an expression can be real numbers (e.g. <span class="inline">3.4 * 6</span>), hexadecimal numbers starting with a <span class="inline">$</span> sign (e.g. <span class="inline">$00FFAA | $88FFAA</span>), strings between double quotes (e.g. <span class="inline">"hello"</span> + <span class="inline">"world"</span>) or more complicated expressions using multiple operators and values.</p><h2 id="operators">Operators</h2><p>The following operators are provided for use with expressions:</p><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true" data-skip-index="true">Assigning (=)</span><span data-close-text="true">Assigning (=)</span></a></p><div class="droptext" data-targetname="drop-down2"><p class="dropspot"><span class="inline2"><b>=</b></span>&nbsp;is used to assign a value to a variable. Note that this can <i>also</i> be used for comparing variables in <span data-keyref="GameMaker Name">GameMaker</span> and you may see this in examples and other peoples codes. However, this is a legacy from old&nbsp;<span data-keyref="GameMaker Name">GameMaker</span> versions and you should use the <span class="inline2">==</span> operators for comparing and <span class="inline2">=</span> for assigning, as shown in these examples:</p><p class="code">a = 12;<br>speed = 5;<br>val = (old_val + 5);</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span data-open-text="true" data-skip-index="true">Combining (&amp;&amp;, ||, ^^)</span><span data-close-text="true">Combining (&amp;&amp;, ||, ^^)</span></a></p><div class="droptext" data-targetname="drop-down3"><p class="dropspot"><b><span class="inline2">&amp;&amp;</span>, <span class="inline2">||</span>, <span class="inline2">^^</span> (<span class="inline2">and</span>, <span class="inline2">or</span> and <span class="inline2">xor</span>)</b> are used to combine boolean values to give either <span class="inline2">true</span> or <span class="inline2">false</span>. If any of the following examples resolves to <span class="inline2">true</span> then the code would be run:</p><p class="code">if (a == b &amp;&amp; c == d) { do something... } &nbsp;// and<br>if (a == b || c == d) { do something... } &nbsp;&nbsp;// or<br>if (a == b ^^ c == d) { do something... } &nbsp;// xor</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#"><span data-open-text="true" data-skip-index="true">Nullish (??, ??=)</span><span data-close-text="true">Nullish (??, ??=)</span></a></p><div class="droptext" data-targetname="drop-down11"><p class="note"><span class="note">NOTE</span>&nbsp;"Nullish" simply refers to a value being equal to <span class="inline2">undefined</span> or <span class="inline2">pointer_null</span>.</p><p class="dropspot"><span class="inline2">??</span> is a<a id="nullish"></a> nullish coalescing operator that returns a specified expression if the given value is <span class="inline2">undefined</span> or <span class="inline2">pointer_null</span>. This operator expects the following syntax:</p><p class="code_plain">(input ?? null_output)</p><p class="dropspot">If <span class="inline2">input</span> is <span class="inline2">undefined</span> or <span class="inline2">pointer_null</span>, the expression will return the <span class="inline2">null_output</span> value; however in all other cases it will simply return the <span class="inline2">input</span> value. This can be used to define a "default" value for a variable in case the variable itself does not hold a valid value.</p><p class="dropspot">Consider the following example:</p><p class="code_plain">username = data.username ?? "INVALID USERNAME";</p><p class="dropspot">Here, the <span class="inline2">username</span> variable will get the value stored in <span class="inline2">data.username</span>, however if <span class="inline2">data.username</span> happens to be&nbsp;<span class="inline2">undefined</span> or <span class="inline2">pointer_null</span>, the variable will get the string <span class="inline2">"INVALID USERNAME"</span> instead. This example ensures&nbsp;that any function calls using the <span class="inline2">username</span>&nbsp;variable do not cause an error because of being given&nbsp;a nullish value, and that the user knows when their username was not returned.</p><p class="note"><span class="note">NOTE</span>&nbsp;The expression on the right hand side of the nullish coalescing operator is only executed when the input value is nullish, meaning that any function calls included in the RHS expression will only be executed if the input value is nullish.</p><hr><p class="dropspot"><span class="inline2">??=</span> is similar to the nullish coalescing operator described above but&nbsp;is used specifically for variable assignments. This operator expects the following syntax:</p><p class="code">variable ??= null_value</p><p class="dropspot">If <span class="inline2">variable</span> is <span class="inline2">undefined</span> or <span class="inline2">pointer_null</span>, the <span class="inline2">null_value</span>&nbsp;value will be assigned to it; otherwise the variable will remain unchanged. This can be used to assign a custom "default" value to a variable when it holds a nullish value.</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#"><span data-open-text="true" data-skip-index="true">Comparing (&lt;, &lt;=, ==, !=, &gt;, &gt;=)</span><span data-close-text="true">Comparing (&lt;, &lt;=, ==, !=, &gt;, &gt;=)</span></a></p><div class="droptext" data-targetname="drop-down4"><p class="dropspot"><b><span class="inline2">&lt;</span>, <span class="inline2">&lt;=</span>, <span class="inline2">==</span>, <span class="inline2">!=</span>, <span class="inline2">&gt;</span>, <span class="inline2">&gt;=</span></b>&nbsp;are comparisons and can only give a <span class="inline2">true</span> or <span class="inline2">false</span> result (where <span class="inline2">true</span> can also be interpreted as 1, and <span class="inline2">false</span> as 0). Examples of use:</p><p class="code">if (a &lt; b) {do something...}<br>if (a != b) {do something...}</p><p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#"><span data-open-text="true" data-skip-index="true">Bitwise (|, &amp;, ^, &lt;&lt;, &gt;&gt;)</span><span data-close-text="true">Bitwise (|, &amp;, ^, &lt;&lt;, &gt;&gt;)</span></a></p><div class="droptext" data-targetname="drop-down5"><p class="dropspot"><b><span class="inline2">|</span>, <span class="inline2">&amp;</span>, <span class="inline2">^</span>, <span class="inline2">&lt;&lt;</span>, <span class="inline2">&gt;&gt;</span></b> are used to&nbsp;perform bitwise operations, where <span class="inline2">|</span> = bitwise or, <span class="inline2">&amp;</span> = bitwise and, <span class="inline2">^</span> = bitwise xor, <span class="inline2">&lt;&lt;</span> = shift left, <span class="inline2">&gt;&gt;</span> = shift right. Examples of use:</p><p class="code">x = (x &amp; $ffffffe0) + 32;<br>if (y ^ $1f) &gt; 0 {do something...};</p><p class="dropspot">You can find additional information on how to use the bitwise operators and what they do from the section: <a href="../../Additional_Information/Bitwise_Operators.htm">Bitwise Operators</a>.</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#"><span data-open-text="true" data-skip-index="true">Arithmetical (+, -, *, /)</span><span data-close-text="true">Arithmetical (+, -, *, /)</span></a></p><div class="droptext" data-targetname="drop-down6"><p class="dropspot"><b><span class="inline2">+</span>, <span class="inline2">-</span>, <span class="inline2">*</span>, <span class="inline2">/</span></b>&nbsp;are add, subtract, multiply and divide, respectively. Examples of use:</p><p class="code">c = a * b;<br>str = a + "world";</p><p class="note"><span class="note"><b>NOTE</b></span>&nbsp;Floating point numbers do not stop on Divide by Zero as they will get an infinity as the answer. If A and B are integers (either int32 or int64) then the division will be done as integers (and divide by 0 will be checked and error'd). Otherwise it will be done as a floating point division (with no divide by 0 check).</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#"><span data-open-text="true" data-skip-index="true">Increment/Decrement (++, --)</span><span data-close-text="true">Increment/Decrement (++, --)</span></a></p><div class="droptext" data-targetname="drop-down7"><p class="dropspot"><span class="inline2"><strong>++</strong></span>, <span class="inline2"><strong>--</strong></span>&nbsp;are used to add or subtract&nbsp;one (<span class="inline2">1</span>) from a value. It is worth noting that placing this before or after the value to be added to or subtracted from will have slightly different results. For example:</p><ul class="dropspotlist"><li class="dropspot"><span class="inline">++a</span>&nbsp;will increment the variable and return the incremented value.</li><li class="dropspot"><span class="inline">a++</span>&nbsp;will increment the variable but return the value before it was incremented.</li></ul><p class="dropspot">Therefore, if you have something like this:</p><p class="code">var a = 1;<br>show_debug_message(string(a++));<br>show_debug_message(string(++a));</p><p class="dropspot">The debug output would be 1 and 3. Here are some examples of use:</p><p class="code">for (var i = 0; i &lt; 10; i++;)<br>{<br>&nbsp; &nbsp; do something...<br>}</p><p class="code">if (hit == true)<br>{<br>&nbsp; &nbsp; --score;<br>}</p><p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;On the YoYo Compiler target platforms (those marked (YYC)), these expressions are evaluated from left to right, while on all other target platforms they are evaluated from right to left, meaning that this:</p><p class="code">val = max(num, ++num, num++);</p><p class="note">will give different results depending on the platform.</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#"><span data-open-text="true" data-skip-index="true">Division and Modulo (div, %, mod)</span><span data-close-text="true">Division and Modulo (div, %, mod)</span></a></p><div class="droptext" data-targetname="drop-down8"><p class="dropspot"><strong><span class="inline2">div</span></strong> and <strong><span class="inline2">mod</span></strong> (or&nbsp;<span class="inline2">%</span>)&nbsp;are division and modulo, where&nbsp;<span class="inline2">div</span>&nbsp;gives you the amount a value can be divided into producing only an integer quotient, while&nbsp;<span class="inline2">mod</span>&nbsp;(or <span class="inline2">%</span>) gives you only the remainder of a division.&nbsp;Examples of use:</p><p class="code">secs = time mod 60;<br>secs = time % 60;&nbsp; &nbsp; // Identical to the above line<br>time_str = string(time div 60);</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#"><span data-open-text="true" data-skip-index="true">Unary (!, -, ~)</span><span data-close-text="true">Unary (!, -, ~)</span></a></p><div class="droptext" data-targetname="drop-down9"><p class="dropspot">The following <strong>unary</strong> operators are provided:</p><ul class="dropspotlist"><li class="dropspot"><span class="inline2"><strong>!</strong></span>: boolean "not", so&nbsp;<span class="inline">!true == false</span></li><li class="dropspot"><span class="inline2"><strong>-</strong></span>: negates the next real or integer value (not valid for strings or booleans)</li><li class="dropspot"><span class="inline2"><strong>~</strong></span>: negates the next value bitwise</li></ul><p class="dropspot">&nbsp;</p></div><h2 id="expression_grouping">Expression Grouping</h2><p><i></i>As values in all expressions you can use numbers, variables, or functions that return a value, and sub-expressions can be placed between brackets too.&nbsp;All operators work for real number values, but <em>comparisons</em> also work for strings and the "<strong>+</strong>" operator can be used to concatenate&nbsp;strings.</p><p>When doing multiple operations in a single expression, it is <b>very important</b> that you use brackets <span class="inline">()</span> to separate out the order of operation, as different platforms may perform them differently if not explicitly stated in this way. For example, consider the following code:</p><p class="code">a = b == c || d;</p><p>The different target compilers will perform the operations in different orders since they are not explicitly shown, giving rise to "odd" results that you may not expect when you play your game. to avoid this, use the <span class="inline">()</span> to separate out the parts, like this:</p><p class="code">a = (b == c || d);&nbsp; &nbsp;//better<br>a = ((b == c) || d); //best</p><h2 id="statement_grouping">Statement Grouping</h2><p>When using various operations and expressions in a single code block, these too should be separated. For example, the following&nbsp;<em>looks</em>&nbsp;like valid code:</p><p class="code">if my_var == your_var ++their_var;</p><p>However, the compiler could interpret this in one of two ways:</p><p class="code">if my_var == your_var<strong>++</strong> then&nbsp;their_var;<br><br>// or<br><br>if my_var == your_var then <strong>++</strong>their_var;</p><p>Now, you can tell looking at the code that one of those is a bit stupid, but that's because we know what we are wanting to achieve and what we want to happen, but the compiler doesn't. All it sees is two variables with the ++ operator between them so it has to choose which one to apply it to. Therefore, you should&nbsp;<strong>always explicitly bracket expressions, operations and statements</strong>. The correct version of the above code should be:</p><p class="code">if (my_var == your_var)<br>{<br>&nbsp; &nbsp; ++their_var;<br>}</p><p>This may appear more verbose, but there is no ambiguity about the operations being performed and it will compile and behave consistently across all platforms. Also note that while you can chain expressions and statements without the use of brackets at the moment, this is a legacy feature and going forward may be deprecated and removed from GML, so using brackets appropriately now will "future-proof" your code (and is generally good practice anyway).</p><p>Here are some final examples of the various different expressions:</p><p class="code">{<br>&nbsp; &nbsp; x = 23 div 2;<br>&nbsp; &nbsp; colour = $FFAA00 + $00BB12;<br>&nbsp; &nbsp; str = "hello" + "world";<br>&nbsp; &nbsp; y += 5;<br>&nbsp; &nbsp; x *= y;<br>&nbsp; &nbsp; x = y &lt;&lt; 2;<br>&nbsp; &nbsp; x = 23 * ((2 + 4) / sin(y));<br>&nbsp; &nbsp; b = (x &lt; 5) &amp;&amp; !((x == 2) || (x == 4));<br>}</p><p>One final thing to note is that there are also some&nbsp;expression "short-cuts" called <b>accessors</b> for use with certain <a href="../GML_Reference/Data_Structures/Data_Structures.htm">Data Structures</a>&nbsp;and <a href="Arrays.htm">Arrays</a>. These enable you to add, or replace data within these formats quickly and easily and without the use of any function calls. For full details, please see the following page</p><ul class="colour"><li><a href="Accessors.htm">Accessors</a></li></ul><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back:&nbsp;<a href="GML_Overview.htm">GML Code Overview</a></div><div style="float:right">Next:&nbsp;<a href="Script_Functions.htm">Script Functions And Variables</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>