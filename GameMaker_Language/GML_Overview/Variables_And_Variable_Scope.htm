<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../assets/import/main.css"><script>let str;removeHtml=function(e){return e=(e=(e=(e=e.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(e){return e.match(/(<([^>]+)>)/gi)},setTranslator=function(e,a,t){let o;o=t?e.attr(t):e.html();let i=a[removeHtml(o)];if(null!=i&&i.length){a=retHtml(o);let n=0;a&&a.forEach(function(e,a){var t=i.replace("{"+n+"}",e);i=t===i?i.replace("{}",e):t,n++}),t?e.attr(t,i):e.html(i)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var e=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(e):($(".topic-header").append(e),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(e){return e.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={"A good \"real world\" example of a variable is the speed of something, e.g. the speed of a car. A car's speed is clearly&nbsp;{}variable{}, because at some point in time the car will be standing still (i.e. its speed is equal to 0), at another point in time the car will be driving (i.e. its speed is greater than 0). When the car accelerates or slows down, its speed changes. So it makes sense that if you want to store the car's speed in a&nbsp;{}GameMaker{} game that you store it in a {}variable{}. In the game, you'd e.g. set the variable to 0 when the game starts and change it whenever you want the car to change its speed.":'一个很好的"真实的世界"变量的例子是某物的速度，例如：汽车的速度。汽车的速度显然是{}可变的{}，因为在某个时间点，汽车将静止不动(即其速度等于0)，在另一时间点汽车将行驶(即，其速度大于0)。当汽车加速或减速时，它的速度会改变。因此，如果您想在{}GameMaker{}游戏中存储汽车的速度，则可以将其存储在{}变量{}中。在游戏中，你可以。当游戏开始时，将变量设置为0，并在您希望汽车改变其速度时更改它。','A variable in {}GML{} can store many different {}Data Types{}, like a real number (e.g.: 100, 2.456575, -56, etc.), a string (e.g.: "Hello world!"), an integer (e.g.: 1, 556, -7), or a boolean ({}true{} or {}false{}), as well as other things:':'{}GML{}中的变量可以存储许多不同的{}数据类型(Data Types){}，例如实数(例如：100、2.456575、-56等)、字符串(例如："Hello world！")、整数(例如：1，556，-7)，或布尔值({}true{}或{}false{})，以及其他东西：','A variable in {}GML{} can store many different {}Data Types{}, like a real number (e.g.: {}100{}, {}2.456575{}, {}-56{}, etc.), a string (e.g.: {}"Hello world!"{}), an integer (e.g.: {}1{}, {}556{}, {}-7{}), or a boolean&nbsp;({}true{} or {}false{}), as well as other things:':'{}GML{}中的变量可以存储许多不同的{}数据类型{}，例如实数(例如：{}100{}、{}2.456575{}、{}-56{}等)、字符串(例如：{}"Hello world!"{})、整数(例如：{}1{}、{}556{}、{}-7{})或布尔值({}true{}或{}false{})，以及其他内容：',"An expression can be a simple value but can also be more complicated, so, rather than assigning a value to a variable, one can also add a value to the current value of the variable using {}{}+={}{}, for example:":"表达式可以是简单的值，但也可以更加复杂，因此，与其为变量赋值，还可以使用{}{}+={}{}将值添加到变量的当前值，例如：","An expression can be a simple value but can also be more complicated, so, rather than assigning a value to a variable, you can also add a value to the current value of the variable using {}+={},&nbsp;for example:":"表达式可以是一个简单的值，也可以是更复杂的值，因此，您可以使用{}+={}将值添加到变量的当前值，而不是给变量赋值，例如：","And examples of built-in global variables are:":"内置全局变量的例子有：","And examples of built-in global variables would be:":"内置全局变量的示例如下：","And instead it should be done as:":"相反，应该按如下方式进行：","Assignment and Naming Rules":"分配和命名规则","Built-in Variables":"内置变量","By default, when you assign variables in&nbsp;{}Object Events{}, you assign them to&nbsp;{}instance {}variables, however there are actually four other main variable types when you program with {}GameMaker{}, each with its own {}scope{}.":"默认情况下，当您在{}对象事件{}中分配变量时，您会将它们分配给{}实例{}变量，但当您使用{}GameMaker{}编程时，实际上还有四种其他主要变量类型，每种类型都有自己的{ }范围{}。","Changing Scope":"改变范围",Constants:"常量","Examples of built-in instance variables are:":"内置实例变量的示例有：","Finally, there are a number of functions that are dedicated to setting, getting or checking variables in some way, available from the following page:":"最后，还有一些专门用于设置、获取或以某种方式检查变量的函数，可从以下页面获得：","Global Variables":"全局变量",'In GML, like in many programming languages, you first have to create a variable "assignment" before you can use it. This basically means that you tell the computer the name you wish to use for the variable and assign it an initial value. The variable is then given a place in memory to store the value or perform operations on it. A variable assignment takes the form:':'在 GML 中，与许多编程语言一样，您首先必须创建一个变量"赋值"，然后才能使用它。这基本上意味着您告诉计算机您希望用于变量的名称并为其分配初始值。然后，变量在内存中被赋予一个位置来存储值或对其执行操作。变量赋值采用以下形式：',"Instance Variables":"实例变量",'Like any programming language {}GML{} uses {}variables{} as the basic unit for most programming operations. Variables are used to store information in the devices memory for later (or instant) use, and they are given a name so that you can refer to them in runtime and script functions. A variable in {}GML{} can store many different {}{}data types{}{}, like a real number (eg: 100, 2.456575, -56 etc...), a string (eg: "Hello world!"), an integer (eg: 1, 556, -7), or a boolean ({}true{} or {}false{}), as well as other things:':'与任何编程语言{}一样，GML {}使用{}变量{}作为大多数编程操作的基本单位。变量用于将信息存储在设备内存中供以后(或即时)使用，并且为它们指定了一个名称，以便您可以在运行时和脚本函数中引用它们。{}GML {}中的变量可以存储许多不同的{}{}数据类型{}{}，如实数(例如：100、2.456575、-56等等，字符串(例如："Hello world！")，整数(例如：1, 556,-7 )或布尔值({}true{}或{}false{})，以及其他内容：',"Local Variables":"局部变量","Most built-in variables can be changed and set like other variables, and some can even be {}Arrays{}, only you don't have to set them to create them like you would a regular variable as they will already be initialised to a default value.":"大多数内置变量都可以像其他变量一样进行更改和设置，有些甚至可以是{}数组(Arrays){}，只是你不必像创建常规变量那样设置它们，因为它们已经被初始化为默认值。","Most built-in variables can be changed and set like other variables, and some can even be {}arrays{}, only you don't have to set them to create them like you would a regular variable as they will already be initialised to a default value.":"大多数内置变量可以像其他变量一样进行更改和设置，有些变量甚至可以是{}数组{}，只是您不必像创建常规变量那样设置它们，因为它们已经初始化为默认值。","Note that you {}cannot{} do the following (or any variation):":"请注意，您{}无法{}执行以下操作(或任何变更)：",'Now, In many programming languages you need to create a variable "assignment" before you can use it. This basically means that you tell the computer the name you wish to use for the variable and assign it an initial value. The variable is then given a place in memory to store the value or perform operations on it. Assigning a variable takes the form of:':'现在，在许多编程语言中，您需要创建一个"变量"赋值才能使用它。这基本上意味着您告诉计算机要用于变量的名称，并为其指定初始值。然后在内存中为变量指定一个存储值或对其执行操作的位置。赋值变量的形式为：','Now, in many programming languages you need to create a variable "assignment" before you can use it. This basically means that you tell the computer the name you wish to use for the variable and assign it an initial value. The variable is then given a place in memory to store the value or perform operations on it. Assigning a variable takes the form of:':'现在，在许多编程语言中，您需要在使用变量之前创建变量"赋值"。这基本上意味着您告诉计算机您希望用于变量的名称，并为其分配一个初始值。然后在内存中为变量指定一个位置，以存储值或对其执行操作。分配变量的形式为：',"See&nbsp;{}Addressing Variables In Other Instances{}&nbsp;for detailed information.":"有关详细信息，请参阅{}在其他实例中寻址变量{}。","Similarly, you can subtract using {}-={},&nbsp;multiply using {}*={},&nbsp;divide using {}/={}, or use bitwise operators using {}|={}, {}&amp;={},&nbsp;or {}{}^={}{}. You can also add or subtract {}one{} from a value using {}{}++{}{}, {}{}--{}{}. For further information see the section on {}Expressions And Operators{}.":"同样，您可以使用{}-={}进行减法，使用{}*={}进行乘法，使用{}/={}除法，或者使用{}|={}、{}&amp;={}进行按位运算符，或{}{}^={}{}。您还可以使用{}{}++{}{}、{}{}--{}{}在值中添加或减去{14}一{15}。如需了解更多信息，请参阅{}表达式和运算符{}部分。","Similarly, you can subtract using {}{}-={}{}, multiply using {}{}*={}{}, divide using {}{}/={}{}, or use bitwise operators using {}{}|={}{}, {}{}&amp;={}{}, or {}{}^={}{}. You can also add or subtract {}one{} from a value using {}{}++{}{}, {}{}--{}{}. For further information see the section on {}Expressions And Operators{}.":"类似地,您可以使用减 {}{}-={}{}, 乘 {}{}*={}{}, 除 {}{}/={}{}, 或者使用位操作符使用 {}{}|={}{}, {}{}& ={}{},或 {}{}^={}{}.您还可以使用{}{}{}{}++{}{}, {}{}--{}{}从一个值添加或减去1。有关更多信息，请参见{}表达式和运算符{}一节。","So, a variable is something that we can name and use to store a value for later use in one or more operations.":"因此，变量是我们可以命名并用于存储值以供以后在一个或多个操作中使用的东西。",'So, a variable is something that we can name and use to store a value for later use in one or more operations. A great "real world" example of a variable is {}pi&nbsp;𝜋&nbsp;{}... it is a variable that everyone knows and it holds the value 3.14159265(etc...). Why do we have it in our language? Well, it\'s much easier to say to someone "pi" than "three point one four one five nine two six five"! Naming things like this makes life a lot simpler and it also means that should the value of that variable ever change, we don\'t have to change the number everywhere as the variable {}name{} is still the same.':'因此，变量是我们可以命名并用于存储值的对象，以便以后在一个或多个操作中使用。变量的一个很好的"真实世界"示例是{}pi 𝜋{}...它是一个变量，每个变量都知道并保留值3.14159265(等等...)。为什么我们有我们的语言？好吧，对某人说"pi"比"3点14159265"要容易得多！这样命名会使生活变得简单许多，这也意味着如果该变量的值发生变化，我们不必随处更改数字，因为变量{}名称{}仍然相同。',"Static Variables":"静态变量","The GameMaker Language also has multiple different built-in variables that can have any of the above mentioned scopes (except {}local{}). These variables are special as they are included by default as part of the objects and the rooms in the game world. Some built in global variables are listed in the section mentioned above, and the different parts of the manual for sprites, rooms, objects, etc. also outline the built-in variables available in each case.":"GameMaker语言也有多个不同的内置变量，这些变量可以具有上述任何作用域({}局部(local){}除外)。这些变量是特殊的，因为它们默认作为游戏世界中的对象和房间的一部分被包括在内。一些内置的全局变量列在上面提到的章节中，以及手册中关于精灵、房间、对象等的不同部分。还概述了在每种情况下可用的内置变量。","The GameMaker Language also has multiple different built-in variables that can have any of the above mentioned scopes (except {}local{}). These variables are special as they are included by default as part of the objects and the rooms in the game world. Some built in global variables are listed in the section mentioned above, and the different parts of the manual for sprites, rooms, objects, etc... also outline the built-in variables available in each case. Examples of such built-in instance variables would be:":"GameMaker语言还具有多个不同的内置变量，这些变量可以具有上述任何范围({}local{}除外)。这些变量是特殊的，因为默认情况下它们是游戏世界中对象和房间的一部分。上述部分列出了一些内置的全局变量，手册中针对精灵、房间、对象等的不同部分也概述了每种情况下可用的内置变量。此类内置实例变量的示例如下：","The GameMaker Language has multiple different built-in variables that can have any of the above-mentioned scopes (except {}local{}). These variables are special as they are included by default as part of the objects and the rooms in the game world. Some built-in global variables are listed in the section mentioned above, and the different parts of the manual for sprites, rooms, objects, etc., also outline the built-in variables available in each case.":"GameMaker 语言具有多个不同的内置变量，这些变量可以具有任何上述范围({}本地{}除外)。这些变量很特殊，因为它们默认包含在游戏世界中的对象和房间中。上面提到的部分列出了一些内置全局变量，手册中针对精灵、房间、对象等的不同部分也概述了每种情况下可用的内置变量。","The different kinds of variables and their scope are all outlined in the following pages:":"以下几页概述了不同类型的变量及其范围：",'The dot operator,&nbsp;e.g. {}a.b{}, which means "the variable&nbsp;{}b{}&nbsp;of&nbsp;{}a{}".':'点运算符，例如{}a.b{}，表示"{}a{}的变量{}b{}"。',"The variable assignments shown above are all {}instance {}variables, however there are actually four other main variable categories when you program with {}GameMaker{} and each has its own {}scope {}(which can be considered as its area of operation, or reach). The different kinds of variables and their scope are all outlined in the following pages:":"上面显示的变量赋值都是{}实例(instance){}变量，但是当你用{}GameMaker{}编程时，实际上还有四个其他的主要变量类别，每个变量类别都有自己的{}作用域{}(这可以被认为是它的操作区域，或范围)。不同类型的变量及其作用域都在下面的页面中概述：","The variable assignments shown above are all {}instance {}variables, however there are actually three other main variable categories when you program with {}GameMaker{} and each has its own {}scope {}(which can be considered as its area of operation, or reach). The different kinds of variables and their scope are all outlined in the following pages:":"上面显示的变量赋值是所有{}实例{}变量，但是当您使用{}GameMaker{}进行编程并且每个变量都有自己的{}范围{}(可视为其操作区域或到达范围)时，实际上还有其他三个主要变量类别。以下各页概述了不同类型的变量及其范围：","The variable {}a{} can be either an instance or a struct. You can also use one of the&nbsp;{}Instance Keywords{}&nbsp;or the {}global{} keyword.":"变量{}a{}可以是实例，也可以是结构体。您还可以使用{}实例关键字{}或{}全局{}关键字之一。",'The&nbsp;{}with{} statement, e.g. {}with(a) {b = 10;}{}, which means "execute the following lines of code in {}a{}".':'{}with{}语句，例如{}with(a){b = 10;}{}，表示"执行{}a{}中的以下代码行"。',"They are used to store information in the device's memory for later (or instant) use, and given a name so you can refer to them in {}runtime{} and {}script functions{}.":"它们用于将信息存储在设备内存中以供以后(或即时)使用，并指定名称，以便您可以在{}运行时{}和{}脚本函数{}中引用它们。","Types of Scope":"范围类型","Variable Functions":"变量函数","Variable Scope":"变量作用域","Variable scope tells which part of your code a variable belongs to, it is determined by where you first define&nbsp;it in your code. Variable scope also tells from where in your code you can access it. If you need to access variables that are in a different scope, you can change the scope.":"变量作用域告诉变量属于代码的哪一部分，它由您在代码中首先定义它的位置决定。变量作用域还告诉您可以从代码中的何处访问它。如果需要访问不同作用域中的变量，可以更改作用域。","Variables And Variable Scope":"变量和变量范围","Variables are the basic unit for most programming operations. Like any programming language,&nbsp;{}GML{} uses them.":"变量是大多数编程操作的基本单位。与任何编程语言一样，{}GML{}使用它们。","When forming variables in {}GML{} it must have a name that starts with a letter or the underscore symbol \"_\" and can contain only letters, numbers, and the underscore symbol '_' with a maximum length of 64 symbols. So, valid variables are things like {}fish{}, {}foo_bar{}, {}num1{}, or {}_str{}, while invalid variables would be {}6fish{}, {}foo bar{}, or {}*num{}.":'在{}GML {}中构成变量时，名称必须以字母或下划线符号"_"开头，并且只能包含字母、数字和下划线符号"_"，最大长度为64个符号。因此，有效变量包括{}fish{}、{}foo_bar{}、{}num 1{}或{}_str{}，而无效变量为{}6 fish{}、{}foo bar{}或{} *num{}。',"When forming variables in {}GML{}&nbsp;they must have a name that starts with a letter or the underscore symbol \"_\" and can contain only letters, numbers, and the underscore symbol '_' with a maximum length of 64 symbols. So, valid variables are things like {}fish{}, {}foo_bar{}, {}num1{}, or {}_str{}, while invalid variables would be {}6fish{}, {}foo bar{}, or {}*num{}.":'在{}GML{}中分配变量时，变量的名称必须以字母或下划线符号"_"开头，并且只能包含字母、数字和下划线符号"_"，最大长度为64个符号。因此，有效变量是{}fish{}、{}foo_bar{}、{}num 1{}或{}_str{}，而无效变量是{}6 fish{}、{}foo bar{}或{}*num{}。',"When forming variables in {}GML{}&nbsp;they must have a name that starts with a letter or the underscore symbol {}_{} and can contain only letters, numbers, and the underscore symbol {}_{} with a maximum length of 64 symbols. So, valid variable names are things like {}fish{}, {}foo_bar{}, {}num1{}, or {}_str{}, while invalid ones would be {}6fish{}, {}foo bar{}, or {}*num{}.":"在{}GML{}中形成变量时，它们的名称必须以字母或下划线符号{}_{}开头，并且只能包含字母、数字和下划线符号{}_{}，最大长度为64 个符号。因此，有效的变量名称为{}fish{}、{}foo_bar{}、{}num1{}或{}_str{}，而无效的变量名称为{}6fish{}、{}foo bar{}，或{}*num{}。","You can access variables in a different scope in two ways:&nbsp;":"您可以通过两种方式访问​​不同范围内的变量：","You can also use variables to hold the values returned from functions, for example:":"也可以使用变量保存从函数返回的值，例如：",room:"room",'{}NOTE{}&nbsp;The GameMaker Language will also accept "{}:={}" for assignments, although this is not typically the most common way to do it:':'{}注意{}GameMaker语言还将接受"{}:={}"作为赋值，尽管这通常不是最常用的方法：',"{}NOTE{}&nbsp;The GameMaker Language will also accept {}:={}&nbsp;for assignments, although this is not typically the most common way to do it:":"{}注意{}GameMaker 语言还将接受{}:={}进行分配，尽管这通常不是最常见的方法：","{}Variables And Variable Scope{}":"{}变量和变量作用域{}","{}Variables{} are the basic unit for most programming operations. Like any programming language,&nbsp;{}GML{} uses them.":"{}变量{}是大多数编程操作的基本单位。像任何编程语言一样，{}GML{}使用它们。","{}{}NOTE{}{}&nbsp;Constants aren't \"true\" variables since they're replaced by their underlying value by the&nbsp;{}Compiler{}&nbsp;and don't exist as variables in-game.":'{}{}注意{}{}常量不是"真正的"变量，因为它们会被{}编译器{}替换为其基础值，并且在游戏中不作为变量存在。',"{}{}instance_count{}{}":"{}{}instance_count{}{} 实例数量","{}{}path_scale{}{}":"{}{}path_scale{}{} 路径缩放","{}{}room{}{}":"{}{}room{}{} 房间","{}{}speed{}{}":"{}{}speed{}{} 速度","{}{}sprite_index{}{}":"{}{}sprite_index{}{} 精灵索引","{}{}view_xport{}{}":"{}{}view_xport{}{} 视口x坐标"},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(e){json_global=e}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../..",gTopicId="8.2.1.1"</script><script type="text/javascript" src="../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Variables And Variable Scope</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../assets/css/default.css" type="text/css"><script src="../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Page outlining variables and their scoping in GML"><meta name="rh-index-keywords" content="Variables And Variable Scope"><meta name="search-keywords" content="variables,scope,local variables,instance variables,global variables"><meta name="brsnext" value="GameMaker_Language/GML_Overview/Variables/Local_Variables.htm"><meta name="brsprev" value="GameMaker_Language/GML_Overview/Runtime_Functions.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Variables And Variable Scope"><span>Variables And Variable Scope</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">Variables And Variable Scope</span></h1><p>Variables are the basic unit for most programming operations. Like any programming language,&nbsp;<b>GML</b> uses them.</p><p>They are used to store information in the device's memory for later (or instant) use, and given a name so you can refer to them in <a href="Runtime_Functions.htm">runtime</a> and <a href="Script_Functions.htm">script functions</a>.</p><p>A variable in <b>GML</b> can store many different <a href="Data_Types.htm">Data Types</a>, like a real number (e.g.: <span class="inline2">100</span>, <span class="inline2">2.456575</span>, <span class="inline2">-56</span>, etc.), a string (e.g.: <span class="inline2">"Hello world!"</span>), an integer (e.g.: <span class="inline2">1</span>, <span class="inline2">556</span>, <span class="inline2">-7</span>), or a boolean&nbsp;(<span class="inline2">true</span> or <span class="inline2">false</span>), as well as other things:</p><p class="code">var _num = 126.4545;<br>var _str = "Hello World";<br>new_num = _num * 100;<br>global.my_string = _str + " I said";</p><p>You can also use variables to hold the values returned from functions, for example:</p><p class="code">var _id = instance_nearest(x, y, obj_Tree);<br>root = sqrt(1000);<br>global.str = string_upper("Hello World");</p><p>So, a variable is something that we can name and use to store a value for later use in one or more operations.</p><p>A good "real world" example of a variable is the speed of something, e.g. the speed of a car. A car's speed is clearly&nbsp;<em>variable</em>, because at some point in time the car will be standing still (i.e. its speed is equal to 0), at another point in time the car will be driving (i.e. its speed is greater than 0). When the car accelerates or slows down, its speed changes. So it makes sense that if you want to store the car's speed in a&nbsp;<span data-keyref="GameMaker Name">GameMaker</span> game that you store it in a <strong>variable</strong>. In the game, you'd e.g. set the variable to 0 when the game starts and change it whenever you want the car to change its speed.</p><h2>Variable Assignment</h2><p>In GML, like in many programming languages, you first have to create a variable "assignment" before you can use it. This basically means that you tell the computer the name you wish to use for the variable and assign it an initial value. The variable is then given a place in memory to store the value or perform operations on it. A variable assignment takes the form:</p><p class="code">&lt;variable&gt; = &lt;expression&gt;;</p><p>An expression can be a simple value but can also be more complicated, so, rather than assigning a value to a variable, you can also add a value to the current value of the variable using <span class="inline2">+=</span>,&nbsp;for example:</p><p class="code">a = 100;&nbsp;&nbsp;&nbsp;// Assigning a simple value<br>b = 200;<br>c = 300;<br>a += b;&nbsp;&nbsp;&nbsp;&nbsp;// Assigning with operation<br>a = b + c; // Assigning with expression</p><p class="note"><span class="note">NOTE</span>&nbsp;The GameMaker Language will also accept <span class="inline2">:=</span>&nbsp;for assignments, although this is not typically the most common way to do it:</p><p class="code">&lt;variable&gt; := &lt;expression&gt;;</p><p>Similarly, you can subtract using <span class="inline2">-=</span>,&nbsp;multiply using <span class="inline2">*=</span>,&nbsp;divide using <span class="inline2">/=</span>, or use bitwise operators using <span class="inline2">|=</span>, <span class="inline2">&amp;=</span>,&nbsp;or <span class="inline2"><b>^=</b></span>. You can also add or subtract <i>one</i> from a value using <span class="inline2"><b>++</b></span>, <span class="inline2"><b>--</b></span>. For further information see the section on <a href="Expressions_And_Operators.htm">Expressions And Operators</a>.</p><p>Note that you <i>cannot</i> do the following (or any variation):</p><p class="code">a = b = c = 4;</p><p>And instead it should be done as:</p><p class="code">a = 4;<br>b = 4;<br>c = 4;</p><h2>Naming Rules</h2><p>When forming variables in <b>GML</b>&nbsp;they must have a name that starts with a letter or the underscore symbol <span class="inline2">_</span> and can contain only letters, numbers, and the underscore symbol <span class="inline2">_</span> with a maximum length of 64 symbols. So, valid variable names are things like <span class="inline2">fish</span>, <span class="inline2">foo_bar</span>, <span class="inline2">num1</span>, or <span class="inline2">_str</span>, while invalid ones would be <span class="inline2">6fish</span>, <span class="inline2">foo bar</span>, or <span class="inline2">*num</span>.</p><p>You cannot use the names of your assets (e.g. Sprites, Scripts, etc.) for your variables, unless you specify an instance or struct (or keywords like <a href="Variables/Global_Variables.htm"><span class="inline2">global</span></a>,&nbsp;<a href="Instance_Keywords.htm"><span class="inline2">self</span></a>) before such a name, e.g. if you have a script called <span class="inline2">Script1</span>, a variable called <span class="inline2">Script1</span> can be defined as <span class="inline2">self.Script1 = &lt;value&gt;;</span> in an instance or a struct. Doing this explicitly defines the scope of such a variable. For more information, see the section below.</p><h2>Variable Scope</h2><p>Variable scope tells which part of your code a variable belongs to, it is determined by where you first define&nbsp;it in your code. Variable scope also tells from where in your code you can access it. If you need to access variables that are in a different scope, you can change the scope.</p><h3>Changing Scope</h3><p>You can access variables in a different scope in two ways:&nbsp;</p><ul class="colour"><li>The dot operator,&nbsp;e.g. <span class="inline2">a.b</span>, which means "the variable&nbsp;<span class="inline2">b</span>&nbsp;of&nbsp;<span class="inline2">a</span>".</li><li>The&nbsp;<a href="Language_Features/with.htm">with</a> statement, e.g. <span class="inline2">with(a) {b = 10;}</span>, which means "execute the following lines of code in <span class="inline2">a</span>".</li></ul><p>The variable <span class="inline2">a</span> can be either an instance or a struct. You can also use one of the&nbsp;<a href="Instance_Keywords.htm">Instance Keywords</a>&nbsp;or the <span class="inline2">global</span> keyword.</p><p>See&nbsp;<a href="Addressing_Variables_In_Other_Instances.htm">Addressing Variables In Other Instances</a>&nbsp;for detailed information.</p><h3>Types of Scope</h3><p>By default, when you assign variables in&nbsp;<a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">Object Events</a>, you assign them to&nbsp;<strong>instance</strong> variables, however there are actually four other main variable types when you program with <span data-keyref="GameMaker Name">GameMaker</span>, each with its own <strong>scope</strong>.</p><p>The different kinds of variables and their scope are all outlined in the following pages:</p><ul class="colour"><li><a href="Variables/Local_Variables.htm">Local Variables</a></li><li><a href="Variables/Instance_Variables.htm">Instance Variables</a></li><li><a href="Variables/Global_Variables.htm">Global Variables</a></li><li><a href="Functions/Static_Variables.htm">Static Variables</a></li><li><a href="Variables/Constants.htm">Constants</a></li></ul><p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;Constants aren't "true" variables since they're replaced by their underlying value by the&nbsp;<a href="../../Introduction/Compiling.htm">Compiler</a>&nbsp;and don't exist as variables in-game.</p><h2>Built-in Variables</h2><p>The GameMaker Language has multiple different built-in variables that can have any of the above-mentioned scopes (except <i>local</i>). These variables are special as they are included by default as part of the objects and the rooms in the game world. Some built-in global variables are listed in the section mentioned above, and the different parts of the manual for sprites, rooms, objects, etc., also outline the built-in variables available in each case.</p><p>Examples of built-in instance variables are:</p><ul class="colour"><li><span class="inline"><a href="../GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_index.htm">sprite_index</a></span></li><li><a href="../GML_Reference/Asset_Management/Paths/Path_Variables/path_index.htm"><span class="inline">path_scale</span></a></li><li><a href="../GML_Reference/Asset_Management/Instances/Instance_Variables/speed.htm"><span class="inline">speed</span></a></li></ul><p>And examples of built-in global variables are:</p><ul class="colour"><li><span class="inline"><a href="../GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_xport.htm">view_xport</a></span></li><li><span class="inline"><a href="../GML_Reference/Asset_Management/Instances/instance_count.htm">instance_count</a></span></li><li><span class="inline"><a href="../GML_Reference/Asset_Management/Rooms/room.htm">room</a></span></li></ul><p>Most built-in variables can be changed and set like other variables, and some can even be <a href="Arrays.htm">Arrays</a>, only you don't have to set them to create them like you would a regular variable as they will already be initialised to a default value.</p><h2>Variable Functions</h2><p>Finally, there are a number of functions that are dedicated to setting, getting or checking variables in some way, available from the following page:</p><ul class="colour"><li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Variable Functions</a></li></ul><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="GML_Overview.htm">GML&nbsp;Overview</a></div><div style="float:right">Next:&nbsp;<a href="Data_Types.htm">Data Types</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>