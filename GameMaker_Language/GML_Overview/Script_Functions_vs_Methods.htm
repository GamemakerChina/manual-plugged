<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../assets/import/main.css"><script>let str;removeHtml=function(t){return t=(t=(t=(t=t.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(t){return t.match(/(<([^>]+)>)/gi)},setTranslator=function(t,e,n){let o;o=n?t.attr(n):t.html();let i=e[removeHtml(o)];if(null!=i&&i.length){e=retHtml(o);let a=0;e&&e.forEach(function(t,e){var n=i.replace("{"+a+"}",t);i=n===i?i.replace("{}",t):n,a++}),n?t.attr(n,i):t.html(i)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var t=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(t):($(".topic-header").append(t),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(t){return t.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={"A {}method variable{} is created with this syntax:":"{}方法变量{}使用以下语法创建：","A {}script function{} is created with this syntax:":"{}脚本函数{}使用以下语法创建：","Again, this only applies if you're calling a script function {}indirectly{}, via a reference stored in a variable. Calling it directly doesn't cause such problems.":"同样，这只适用于你通过存储在变量中的引用间接调用脚本函数{}的情况。直接调用它并不会导致这样的问题。","Basic Difference":"基本差异","Calling {}temp_1(){}&nbsp;now using parentheses will not increase memory usage, as the method is already created for you.":"现在使用圆括号调用{}temp_1(){}不会增加内存占用，因为已经为你创建了方法。","Direct Calls":"直接调用","However, since this variable refers to a {}script function{}, it first has to convert it into a {}method{}, and then call it.":"但是，由于此变量引用{}脚本函数{}，因此它必须先将其转换为{}方法{}，然后再调用它。","In this example, calling {}temp_1{} will call {}reset_alpha{}, as it stores a reference to that {}method{}.":"在这个例子中，调用{}temp_1{}将调用{}reset_alpha{}，因为它存储了对该{}方法{}的引用。","Indirect Calls: Methods":"间接调用：方法","Indirect Calls: Script Functions":"间接调用：脚本函数","Now, you can call {}temp_1{} by doing this:":"现在，您可以通过执行以下操作来调用{}temp_1{}：","Or, the better solution: convert your script function {}into a method{} when passing its reference.":"或者，更好的解决方案是：在传递脚本函数引用时，将脚本函数{}转换为方法{}。","Script Functions vs. Methods":"脚本函数与方法","So, what is the solution?":"那么，解决方案是什么？","This can easily result in increased memory usage, especially if you're calling it every frame, because the engine now has to create a new method every frame for this call.&nbsp;":"这很容易导致内存使用量增加，尤其是在你每帧调用它时，因为引擎现在必须为这个调用每帧创建一个新方法。","This is creating a new method from the&nbsp;{}reset_x{}&nbsp;script function, using&nbsp;{}{}method(){}{}.":"这是从{}reset_x{}脚本函数中创建一个新方法，使用{}{}method(){}{}。","This page covers essential information about using script functions vs. methods.":"本页介绍有关使用脚本函数与方法的基本信息。","To implement the second solution, your code would look like this:":"要实现第二种解决方案，您的代码将如下所示：","Use {}{}script_execute(){}{} to call the script function via its reference, which will not create a method.":"使用{}{}script_execute(){}{}通过脚本函数的引用调用该脚本函数，该引用不会创建方法。","You are completely fine to pass around a method reference in this way. When using script functions though, there is a caveat.":"以这种方式传递方法引用是完全正确的。但在使用脚本函数时，需要注意。","You can also store a reference to a script function, in another variable:":"你也可以把对脚本函数的引用，存储在另一个变量中。","You can also use the function {}{}script_execute(){}{} to run a script function, although it's now a legacy function and not recommended for use.":"你也可以使用函数{}{}script_execute(){}{}来运行一个脚本函数，尽管它现在是一个遗留函数，不推荐使用。","You can call both script functions and methods directly by using parentheses {}(){},&nbsp; just like a {}runtime function{}:":"你可以通过使用括号{}(){}直接调用脚本函数和方法，就像{}运行时函数{}一样。","You can store a reference to a method, in another variable, to call it later through that different variable:":"您可以在另一个变量中存储对方法的引用，以便稍后通过该变量调用该方法：","You should use the first syntax in scripts, to create global functions that can be called from any scope in your game.":"你应该在脚本中使用第一种语法，以创建全局函数，可以从游戏中的任何范围调用。","You should use the second syntax when creating functions in {}structs/constructors{} and objects. This syntax creates a variable containing a method.":"在{}结构/构造函数{}和对象中创建函数时，应使用第二种语法。此语法创建一个包含方法的变量。","{}NOTE{} See how the code doesn't put&nbsp;{}(){} after {}reset_alpha{}. That's because we're reading the method reference and not calling it.":"{}注意{}看代码中没有把{}(){}放在{}reset_alpha{}后面。这是因为我们在读取方法的引用，而不是调用它。"},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(t){json_global=t}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../..",gTopicId="8.2.1.1_7"</script><script type="text/javascript" src="../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><link rel="stylesheet" type="text/css" href="../../assets/css/default.css"><script src="../../../assets/scripts/main_script.js"></script><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><meta name="generator" content="Adobe RoboHelp 2022"><title>Script Functions vs. Methods</title><meta name="topic-status" content="Draft"><link rel="stylesheet" type="text/css" href="../../assets/css/default.css"><script src="../../assets/scripts/main_script.js" type="module"></script><meta name="template" content="../../assets/masterpages/Manual_Page.htt"><meta name="rh-authors" content="Gurpreet S. Matharoo"><meta name="topic-comment" content="Page explaining practical differences between Script Functions and Methods."><meta name="rh-index-keywords" content="Script Functions vs. Methods"><meta name="search-keywords" content="calling methods, calling script functions, method performance"><meta name="brsnext" value="GameMaker_Language/GML_Overview/Functions/Static_Variables.htm"><meta name="brsprev" value="GameMaker_Language/GML_Overview/Method_Variables.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Script Functions vs. Methods"><span>Script Functions vs. Methods</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><div></div><div><h1>Script Functions vs. Methods</h1><p>This page covers essential information about using script functions vs. methods.</p><h2>Basic Difference</h2><p>A <a href="Script_Functions.htm">script function</a> is created with this syntax:</p><p class="code">function name()<br>{<br>&nbsp; &nbsp; code;<br>}</p><p>A <a href="Method_Variables.htm">method variable</a> is created with this syntax:</p><p class="code">name = function()<br>{<br>&nbsp; &nbsp; code;<br>}</p><p>You should use the first syntax in scripts, to create global functions that can be called from any scope in your game.</p><p>You should use the second syntax when creating functions in <a href="Structs.htm">structs/constructors</a> and objects. This syntax creates a variable containing a method.</p><h2>Direct Calls</h2><p>You can call both script functions and methods directly by using parentheses <span class="inline2">()</span>,&nbsp; just like a <a href="Runtime_Functions.htm">runtime function</a>:</p><p class="code">// Create the function<br>function reset_x()<br>{<br>&nbsp; &nbsp; x = xstart;<br>}<br><br>// Call the function<br>reset_x();</p><p>You can also use the function <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> to run a script function, although it's now a legacy function and not recommended for use.</p><h2>Indirect Calls: Methods</h2><p>You can store a reference to a method, in another variable, to call it later through that different variable:</p><p class="code">// Create method<br>reset_alpha = function()<br>{<br>&nbsp; &nbsp; image_alpha = 1;<br>}<br><br>// Pass reference and call<br>temp_1 = reset_alpha;<br>temp_1();</p><p class="note"><span class="note">NOTE</span> See how the code doesn't put&nbsp;<span class="inline2">()</span> after <span class="inline2">reset_alpha</span>. That's because we're reading the method reference and not calling it.</p><p>In this example, calling <span class="inline2">temp_1</span> will call <span class="inline2">reset_alpha</span>, as it stores a reference to that <strong>method</strong>.</p><p>You are completely fine to pass around a method reference in this way. When using script functions though, there is a caveat.</p><h2>Indirect Calls: Script Functions</h2><p>You can also store a reference to a script function, in another variable:</p><p class="code">// Create function<br>function reset_x()<br>{<br>&nbsp; &nbsp; x = xstart;<br>}<br><br>// Store reference<br>temp_1 = reset_x;</p><p>Now, you can call <span class="inline2">temp_1</span> by doing this:</p><p class="code">temp_1();</p><p>However, since this variable refers to a <strong>script function</strong>, it first has to convert it into a <strong>method</strong>, and then call it.</p><p>This can easily result in increased memory usage, especially if you're calling it every frame, because the engine now has to create a new method every frame for this call.&nbsp;</p><p>So, what is the solution?</p><ul class="colour"><li>Use <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> to call the script function via its reference, which will not create a method.</li><li>Or, the better solution: convert your script function <a href="../GML_Reference/Variable_Functions/method.htm">into a method</a> when passing its reference.</li></ul><p>To implement the second solution, your code would look like this:</p><p class="code">temp_1 = method(undefined, reset_x);</p><p>This is creating a new method from the&nbsp;<span class="inline2">reset_x</span>&nbsp;script function, using&nbsp;<a href="../GML_Reference/Variable_Functions/method.htm"><span class="inline">method()</span></a>.</p><p>Calling <span class="inline2">temp_1()</span>&nbsp;now using parentheses will not increase memory usage, as the method is already created for you.</p><p>Again, this only applies if you're calling a script function <strong>indirectly</strong>, via a reference stored in a variable. Calling it directly doesn't cause such problems.</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div>Back:&nbsp;<a href="GML_Overview.htm">GML Code Overview</a></div><div>Next:&nbsp;<a href="Functions/Static_Variables.htm">Static Variables</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></div></body></html>