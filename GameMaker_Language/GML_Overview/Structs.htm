<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../assets/import/jquery-3.6.1.min.js"></script>
<script type="text/javascript" src="../../assets/import/layer/layer.js"></script>
<script type="text/javascript" src="../../assets/import/pangu.min.js"></script>
<link rel="stylesheet" type="text/css" href="../../assets/import/layer/layer.css">
<link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_btn.css">
<link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_col.css">
<link rel="stylesheet" type="text/css" href="../../assets/import/main.css">


<script>

	removeHtml=function(str){
		str=str.replace(/(<([^>]+)>)/ig, "{}");
		str=str.replace(/\r\n/g, '\n');
		str=str.replace(/\n/g, '');
		str=str.replace(/ {2,}/g, ' ');
		return str
	}
	retHtml=function(str){
		var regex = /(<([^>]+)>)/ig
		return str.match(regex);
	}
	setTranslator=function(ele,json,attr){
		if(!attr){
			var html=ele.html()
		}else{
			var html=ele.attr(attr)
		}
		var key=removeHtml(html)
		var val=json[key]
		if(val!=undefined && val.length){
			var f=retHtml(html)
			var i=0
			if(f)f.forEach(function(v,k){
				var tmp=val.replace("{"+i+"}",v)
				if(tmp===val){
					val=val.replace("{}",v)
				}else{
					val=tmp
				}
				i++
			})
			if(!attr){
				ele.html(val)
			}else{
				ele.attr(attr,val)
			}
		}
	}

	noTranslationState=function(){
		return (window.localStorage.getItem("noTranslationState")=="true")
	}

	noTranslationStateToggle=function(){
		window.localStorage.setItem("noTranslationState",!noTranslationState())
	}

	addNoTranslationStateButton=function(){

		//html
		var html=`
		
		<button style="
			float: right;
			font-size: 20px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>F</button>

		<button style="
			float: right;
			font-size: 20px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>T</button>
		`

		//意味着触发这段代码的地方处于主页
		if($(".header").length){
		$(".header").append(html)
		}else{
		//否则就是页内
		$(".topic-header").append(html)
		$(".topic-header button").css("position","relative").css("top","44px")
		}
	}

	var json_global={
    "&nbsp;Type&nbsp;":"类型(Type)",
    "<span data-open-text=\"true\" data-skip-index=\"true\" class=\"rh-hide\" hidden=\"\">Quick Start Guide</span><span data-close-text=\"true\">Quick Start Guide</span>":"<span data-open-text=\"true\" data-skip-index=\"true\" class=\"rh-hide\" hidden=\"\">快速入门指南</span><span data-close-text=\"true\">快速入门指南</span>",
    "A Remote Worker is a special program that GameMaker Studio 2 will use on certain platforms to create your game executables without actually running the GameMaker Studio 2 IDE on that platform":"Remote Worker是一个特殊的程序，GameMaker Studio 2将使用它在特定平台上创建游戏可执行文件，而无需在该平台上实际运行GameMaker Studio 2 IDE",
    "A bitmap is the term used to describe any static image that is comprised of coloured pixels that are stored as bits (unlike vector images which are stored using mathematical algorithms). PNG, JPG and BMP are example of bitmap images, while SWF would be an example of a vector image.":"位图是用于描述任何静态图像的术语，该静态图像由以位存储的彩色像素组成（与使用数学算法存储的矢量图像不同）。 PNG，JPG和BMP是位图图像的示例，而SWF将是矢量图像的示例。",
    "A boolean is a type of variable that can return true or false based on its value, and can be used in conditions and expressions. The constants \u0027false\u0027 or \u0027true\u0027 can be applied to a boolean, which are the equivalent of the real values 0 and 1.":"布尔值是一种变量类型，可根据其值返回true或false，可用于条件和表达式中。常量\u0027false\u0027或\u0027true\u0027可以应用于布尔值，这相当于实值0和1。",
    "A byte is a unit of data that is eight binary digits long, and each of the digits that comprise a byte are called bits, ie: a byte is 8 bits, and a bit can be a 1 or a 0.":"字节是八位二进制数字长的数据单位，组成一个字节的每个数字都称为位，即：字节是8位，位可以是1或0。",
    "A callback is simply a function that runs and then triggers another function (or code block) when it has finished doing whatever it was assigned to do. For example, the funtion sprite_add() will trigger a callback in the asynchronous Image Loaded event when the sprite has been loaded.":"回调仅是一个函数，该函数先运行，然后在完成分配的工作后触发另一个函数（或代码块）。例如，功能sprite_add()将在加载精灵后在异步Image Loaded事件中触发回调。",
    "A constant is a term used to describe a named value that does not change throughout the execution of the program. GameMaker Studio 2 has a number of built-in constants - for example os_windows - but you can also create your own constant values for use in your projects (called Macros) and extensions.":"常量是一个术语，用于描述在程序执行期间不会更改的命名值。 GameMaker Studio 2具有许多内置常量（例如os_windows），但您也可以创建自己的常量值以用于项目（称为宏）和扩展。",
    "A font is a collection of graphical glyphs used to represent text in a language. Fonts can be different weights, sizes, and styles and are used to display any written content in a project.":"字体是用于表示语言文本的图形字形的集合。字体可以具有不同的粗细，大小和样式，并用于显示项目中的任何书面内容。",
    "A framework is a base foundation of code that may be altered and/or built upon by the user. A framework might include different software libraries, APIs, compilers and much more. In simpler terms, a framework provides a favorable environment for a certain type and level of programming for a project. In GameMaker Studio 2 you can, for example, create your own framework projects (via Local Asset Packages) that contain scripts and objects for general controls, stat management, networking, or anything else you commonly use in your projects, and then import these into new projects right at the beginning to give you the basic grounding to conntinue without having to reprogram these systems every time.":"框架是可由用户更改和/或构建的代码的基础。一个框架可能包括不同的软件库，API，编译器等等。简单来说，框架为项目的某种类型和级别的编程提供了良好的环境。例如，在GameMaker Studio 2中，您可以创建自己的框架项目（通过本地资源包），其中包含用于常规控件，统计信息管理，联网或项目中常用的其他内容的脚本和对象，然后将其导入新项目一开始就为您提供了基本的基础，而不必每次都对这些系统进行重新编程。",
    "A glyph is a particular visual appearance of a character. It is the appearance of a character using a given font.":"字形是字符的一种特殊的视觉外观。它是使用给定字体的字符的外观。",
    "A keyframe (also called a parameter key) is a point on the timeline in the dope sheet where a change in a parameter value is defined.":"一个关键帧(也称为参数键)是在时间轴上的一个点，在这个点上定义了一个参数值的变化。",
    "A package of files that are used to execute a program. In GameMaker Studio this can be a single file - like an installer for windows - or multiple files - like the HTML5 output.":"用于执行程序的文件包。在GameMaker Studio中，它可以是单个文件（例如Windows的安装程序），也可以是多个文件（例如HTML5输出）。",
    "A parameter key (also called a keyframe) is a point on the timeline in the dope sheet where a change in a parameter value is defined.":"参数键(也称为关键帧)是操作表中时间轴上定义参数值更改的点。",
    "A port number is a way to identify a specific process to which an Internet or other network message is to be forwarded when it arrives at a server.":"端口号是一种识别Internet或其他网络消息到达服务器时要转发到其上的特定进程的方法。",
    "A position on the timeline in the dope sheet where an asset has been placed. An asset key can be made to last multiple frames.":"在序列帧动画中时间轴上放置资源的位置。资源关键帧可以使用多个帧。",
    "A previous version of the GameMaker software (often called Legacy GameMaker) that is no longer available nor supported. ":"GameMaker软件的早期版本（通常称为Legacy GameMaker）不再可用或受支持。",
    "A pure function has no effect on the game, and does not create or change anything. It only returns a value. Given the same set of arguments, it always returns the same value.":"一个纯函数不会对游戏产生任何影响，也不会创造或改变任何内容。它只返回一个值。给定相同的参数集，它总是返回相同的值。",
    "A shader is a collection of small programs that run directly on the GPU to create graphics and graphical effects. These are very fast to run and free up the CPU to do other things.":"着色器是直接在GPU上运行以创建图形和图形效果的小程序的集合。这些都是非常快速的运行，可以释放CPU来做其他事情。",
    "A single data value that can either be 1 or 0 (true or false). Bits are combined in blocks of 8 to create a byte.":"单个数据值，可以是1或0（是或否）。将位组合为8个块以创建一个字节。",
    "A special, unexpected and anomalous condition encountered during the execution of a program is known as an exception. It can also be termed as an error or a condition which alters the way of the program or the microprocessor to a different path. An example of an exception can be the case when a program tries to access a variable, but the variable does not exist. Exceptions must be handled and eradicated in the program code to avoid any fatal error, a process called debugging.":"在程序执行过程中遇到的特殊、意外和异常情况称为异常。它也可以被称为一个错误或条件，改变了程序或微处理器的方式到一个不同的路径。异常的一个例子是，程序试图访问一个变量，但该变量不存在。必须在程序代码中处理和根除异常，以避免任何致命错误，这个过程称为调试。",
    "A spline is basically a smooth curve used to join points. Mathematically speaking it is deifned as a sufficiently smooth polynomial function that is piecewise-defined, and possesses a high degree of smoothness at the places where the polynomial pieces connect.":"样条基本上是用于连接点的平滑曲线。从数学上讲，它被定义为一个足够光滑的多项式函数，它是分段定义的，并且在多项式片段连接的地方具有高度的平滑。",
    "A sprite is a bitmap graphic that is designed to be part of a larger scene. It can either be a static image or an animated graphic.":"精灵是一种位图图形，被设计成更大场景的一部分。它可以是静态图像，也可以是动画图形。",
    "A swatch is simply a small square sample of a colour or a material used to illustrate how it will look.":"一个调色板就是一个小的正方形样本，其颜色或材料用于说明其外观。",
    "A texture page (also called a texture atlas) is a collection of images (sprites, tilesets, font characters, etc...) that are grouped together in an optimal way so that they take up the least amount of texture memory when your game is run.":"纹理页面（也称为纹理图集）是以最佳方式组合在一起的图像（精灵，图块集，字体字符等）的集合，以便在您的游戏时占用最少的纹理内存运行。",
    "A tile set is a collection of square or rectangular graphical assets laid out on a grid as a single image. Each item in the grid can then be placed multiple times in a room to create a larger scene called the \u0027tile map\u0027.":"图块图块集是作为单个图像布局在网格上的正方形或矩形图形资源的集合。网格中的每一项都可以在一个房间中放置多次，从而创建一个更大的场景，称为“图块地图”。",
    "A timeline in GameMaker Studio 2 is a linear collection of events that will be run in consecutive order. Each event can be given code or actions to perform a task and when the timeline is run, these tasks will be performed as each event in the tmeline is reached.":"在GameMaker Studio 2中，时间线是一系列事件的线性集合，它们将以连续的顺序运行。可以为每个事件提供执行任务的代码或操作，当运行时间线时，将在到达时间线中的每个事件时执行这些任务。",
    "A track in the sequences track panel that holds a single asset, either a sprite, a sound, an instance, or a sequence.":"序列轨道面板中的轨道包含单个资源，即精灵，声音，实例或序列。",
    "A track that has been assigned to an asset track in the track panel and that changes a single parameter for the asset track it\u0027s linked to, like the position, or the image index.":"在轨道面板中分配给资源轨道的轨道，并改变其链接到的资源轨道的单个参数，如位置或图像索引。",
    "A truth table is a mathematical table used in logic - specifically in connection with boolean algebra and boolean functions - which sets out the functional values of logical expressions on each of their functional arguments, that is, for each combination of values taken by their logical variables.":"真值表是在逻辑中使用的数学表-特别是与布尔代数和布尔函数结合使用的表-列出逻辑表达式在每个函数自变量上的函数值，即针对其逻辑变量取值的每种组合。",
    "A value that is considered \"false\" when used as a boolean, for example in an if() condition.":"当用作布尔值时被认为是“false”的值，例如在if()条件中。",
    "A value that is considered \"true\" when used as a boolean, for example in an if() condition.":"当用作布尔值时被认为是“true”的值，例如在if()条件中。",
    "A variable is a named value within a program which can be modified, stored and displayed whenever required. For example, if we have an integer variable with a name XYZ and it stores a value 10, we can then do things like A = XYZ + 10, which will set the value of the variable A to 20, since XYZ is 10 and we are adding 10 to it. You can also change variable values using operators, so doing XYZ = XYZ + 100 would modify the value of our XYZ variable to be equal to 110. Variables can also be used to store identifiers and references to different assets.":"变量是程序中的命名值，可以在需要时对其进行修改，存储和显示。例如，如果我们有一个名为XYZ的整数变量，并且它存储的值为10，则可以执行A = XYZ + 10之类的操作，这将把变量A的值设置为20，因为XYZ为10，我们正在添加10。您还可以使用运算符更改变量值，因此XYZ = XYZ + 100会将XYZ变量的值修改为等于110。变量也可以用于存储标识符和对不同资源的引用。",
    "A vector is a mathematical construct that has a size, called the magnitude, and a direction. In GameMaker, a vector is usually used to show the distance and direction something moved in. A vector can also be used to define images and certain image formats like SWF use vector maths to define the images they contain.":"向量是一种数学结构，它有大小和方向。在GameMaker中，矢量通常用来显示物体移动的距离和方向。矢量还可以用来定义图像，SWF等特定图像格式使用矢量数学来定义它们所包含的图像。",
    "A version number is a unique set of numbers assigned to a specific release of a software program, game or asset, normally with the format MAJOR.MINOR.MAINTENANCE, eg: v2.3.56. Typically, as updates and entirely new editions of a game or asset are released, the version number will increase.":"版本号是分配给软件程序，游戏或资源的特定版本的唯一编号集，通常以MAJOR.MINOR.MAINTENANCE(主要更新.小更新.维护)格式表示，例如：v2.3.56。通常，随着游戏或资源的更新和全新版本的发布，版本号会增加。",
    "A vertex is the name given to a single point of a polygon that contains various characteristics that define it\u0027s position, its colour and its texture. In computer graphics, this usually means a corner of a triangle that is used to create a primitive, and a combination of such primitives is what makes the graphics on the screen.":"顶点是一个多边形的单点的名称，它包含了定义它的位置、颜色和纹理的各种特征。在计算机图形学中，这通常指用于创建原语的三角形的一个角，而这些原语的组合构成了屏幕上的图形。",
    "A&nbsp;weak reference is a reference that does not protect the referenced object from collection by a garbage collector, and so can be used to check if a struct is still \"alive\" (referenced) or not somewhere in the game.":"弱引用是一种不保护被引用对象不被垃圾收集器收集的引用，因此可以用来检查一个结构是否仍然“活”(被引用)或在游戏中的某个地方。",
    "Accessors":"访问器",
    "Action Syntax:":"动作语法：",
    "Additional IDE Tools":"附加 IDE 工具",
    "Additional Information":"额外的信息",
    "Addressing Variables In Other Instances":"在其他实例中处理变量",
    "Alignment":"对齐",
    "An absolute value is one where the sign of the value is ignored, essentially converting all values into positive ones or zero. So - for example - an absolute value for -10 would be 10.":"绝对值是指忽略该值的符号的值，实际上将所有值都转换为正值或零。因此例如-10的绝对值为10。",
    "An algorithm is basically a set of instructions or rules designed to solve a definite problem. The problem can be simple like adding two numbers or a complex one, such as converting a video file from one format to another or compressing audio into a smaller file size..":"算法基本上是一组旨在解决确定问题的指令或规则。问题可能很简单，例如将两个数字相加或将其复杂化，例如将视频文件从一种格式转换为另一种格式，或者将音频压缩为较小的文件大小。",
    "An argument&nbsp;(also known as a parameter) is a value that is passed into a function. For example, the GameMaker Language function \u0027sqr(num)\u0027 is a function that will give you the square of a number that you provide as the argument, eg: \u0027a = sqr(4);\u0027 Here the argument is 4, and the function will return 16, which is stored in the variable \u0027a\u0027.":"也称为参数(parameter argument)是传递给函数的值。例如，GameMaker语言函数\u0027sqr(num)\u0027是将给您提供作为参数的数字平方的函数，例如：\u0027a=sqr(4);\u0027这里的参数是4，函数将返回16，该值存储在变量“ a”中。",
    "An assignment is simply the term used when we set (assign) a value to a variable.":"赋值只是我们为变量设置（赋值）时使用的术语。",
    "An explicit value written in code, e.g. when you write \"A TEXT STRING\" you are using a string literal, as opposed to returning a string through a variable or function. Similarly, [0, 1, 2] is an array literal.":"在代码中写入的显式值，例如，当您编写“A TEXT STRING”时，您使用的是字符串字面量，而不是通过变量或函数返回字符串。类似地，[0,1,2]是数组字面值。",
    "An expression is a combination of one or more constants, variables, operators, and/or functions that are interpreted according to particular rules of precedence and association to return another value. A simple expression would be (5 + 5), which returns 10.":"表达式是一个或多个常量，变量，运算符和/或函数的组合，这些常量根据特定的优先级和关联规则进行解释以返回另一个值。一个简单的表达式是（5 + 5），它返回10。",
    "An iteration is a single pass through a set of operations in your project code. One form of iteration in computer programming is via loops. A loop will repeat a certain segment of code until a condition is met and it can proceed further. Each time the computer runs a loop, it is known as an iteration. In simple terms, iteration is the process of repeating a particular snippet of code over and over again to perform a certain action.":"迭代是对项目代码中的一组操作的一次遍历。计算机编程中一种迭代形式是通过循环。循环将重复一段代码，直到满足条件为止，然后循环可以继续进行。每次计算机运行一个循环，就称为迭代。简单来说，迭代是一遍又一遍地重复执行特定代码段以执行特定操作的过程。",
    "An operand is a term used to denote the values which can be manipulated using different operators. In the expression A + B + C, A, B and C are the operands.":"是用来表示可以使用不同运算符操作的值的术语。在表达式A + B + C中，A, B和C是运算对象。",
    "An operator is a term used to denote something which can manipulate different operands. In the expression A + B - C, + and - are the operators. Examples of different operators are + (addition), - (subtrtaction), = (equals), != (not equal) and &gt;= (greater than or equal to), but there are many more.":"运算符是用来表示可以操作不同运算东西的东西的术语。在表达式A + B - C中，+和-是运算符。不同的运算符示例有+(加法)、-(减法)、=(等于)、!=(不等于)和>=(大于或等于)，但是还有更多。",
    "Android Extensions":"Android 扩展",
    "Angles And Distance":"角度和距离",
    "Animated Tiles":"动画图块",
    "Animation":"动画",
    "Animation Curve Editor Preferences":"动画曲线编辑器首选项",
    "Animation Curves":"动画曲线",
    "Another name for a texture page, which is simply a collection of images required by one or more sprites in your game, organised in an optimal way to use as little texture memory as possible.":"纹理页面的另一个名称，它只是游戏中一个或多个精灵所需的图像集合，以一种最佳方式进行组织，以使用尽可能少的纹理内存。",
    "Any":"任何",
    "Argument":"参数",
    "Arguments:":"参数：",
    "Array":"数组(Array)",
    "Array Functions":"数组函数",
    "Arrays":"数组",
    "Asset Browser":"资源浏览器",
    "Asset Browser Preferences":"资源浏览器首选项",
    "Asset Management":"资源管理",
    "Asset Type Constant":"资源类型常量",
    "Assets And Tags":"资源和标签",
    "Async Events":"异步事件",
    "Asynchronous Functions":"异步函数",
    "Attachments":"附件",
    "Attempt Connection Constant":"尝试连接常量",
    "Audio":"音频",
    "Audio Buffers":"音频缓冲区",
    "Audio Effects":"音效",
    "Audio Emitter ID":"音频发射器 ID",
    "Audio Emitters":"音频发射器",
    "Audio Groups":"音频组",
    "Audio LFO Types/Shapes":"音频 LFO 类型/形状",
    "Audio Listeners":"音频监听器",
    "Audio Loop Points":"音频循环点",
    "Audio Playback":"音频播放",
    "Audio Playback Ended":"音频播放结束",
    "Audio Properties Overview":"音频属性概述",
    "Audio Recording":"录音",
    "Audio Synchronisation":"音频同步",
    "AudioBus Struct":"AudioBus 结构",
    "AudioEffect Struct":"AudioEffect 结构",
    "AudioEffectType Enum":"AudioEffectType 枚举",
    "AudioLFOType Enum":"AudioLFOType 枚举",
    "Auto Tiles":"自动图块",
    "Autocapitalization Type":"自动大写类型",
    "Background":"背景",
    "Background Layers":"背景图层",
    "Base Types":"基本类型",
    "Basic Code Structure":"基本代码结构",
    "Basic Forms":"基本绘制",
    "Best Practices When Programming":"编程时的最佳实践",
    "Bezier interpolation involves estimating a new value by connecting two adjacent known values with a mathematically generated spline curve which can be edited using \"handles\" attached to each point. You can then get the interpolated value by checking any point along the line.":"贝塞尔插值是通过将两个相邻的已知值与数学生成的样条曲线连接起来来估计一个新值，该样条曲线可以使用附加在每个点上的“句柄”进行编辑。然后你可以通过检查直线上的任意一点来得到插值值。",
    "Binary Files":"二进制文件",
    "Bit rate is measured in Kilobits-per-sec(kbps or k) and is the number of bits encoded per second or the number of bits transmitted or received per second. The higher the bit rate and sampling rate, the higher the audio quality but the more processing power and bandwidth it needs. Lower bit rates create a smaller file size and use less processing and bandwidth, but with a drop in audio quality. For good quality music usually a bit rate of 64–128kbps (96kbps+ recommended) is preferred.":"比特率以每秒千位数（kbps或k）为单位，是每秒编码的位数或每秒发送或接收的位数。比特率和采样率越高，音频质量越高，但所需的处理能力和带宽也就越高。较低的比特率可创建较小的文件大小，并使用较少的处理和带宽，但会降低音频质量。为了获得高质量的音乐，通常首选64–128kbps（建议96kbps +）的比特率。",
    "Bitwise Operators":"位运算和二进制",
    "Blend factor (Red, Green, Blue, Alpha)":"混合因子(红色、绿色、蓝色、透明度)",
    "Blue Lowest Bit":"蓝色最低位",
    "Bones":"骨骼",
    "Bookmarks":"书签",
    "Bool":"布尔值(Bool)",
    "Boolean":"布尔型",
    "Broadcast Messages":"广播消息",
    "Brush Builder":"笔刷生成器",
    "Buffer Data Type Constant":"缓冲区数据类型常量",
    "Buffers":"缓冲区",
    "Build tools are external applications that GameMaker Studio 2 requires to generate executable packages for the different target platforms.":"生成工具是GameMaker Studio 2生成用于不同目标平台的可执行程序包所需的外部应用程序。",
    "Building via Command Line":"通过命令行构建",
    "Built-In Time Sources":"内置时间源",
    "CPU overhead measures the amount of work a computer\u0027s central processing unit can perform and the percentage of that capacity that\u0027s used by individual computing tasks.":"CPU开销衡量的是计算机中央处理器可以执行的工作量以及单个计算任务所使用的容量百分比。",
    "Cameras And Display":"相机及显示",
    "Cameras And View Ports":"相机和视口",
    "Clipping Masks":"剪切蒙版",
    "Cloning A Repository":"克隆一个仓库",
    "Cloud":"云",
    "Cloud Saving":"<del>云存储</del> (过时)",
    "Code":"代码",
    "Code Snippets":"代码片段",
    "Collision Compatibility Mode":"碰撞兼容模式",
    "Collisions":"碰撞",
    "Color &amp; Alpha":"颜色 &amp; 透明度",
    "Colour":"颜色",
    "Colour And Alpha":"颜色和 Alpha",
    "Command Line Parameters":"命令行参数",
    "Commenting Code":"代码注释",
    "Compatibility Functions":"兼容性函数",
    "Compatibility Scripts":"兼容性脚本",
    "Compiler Batch Files / Scripts":"编译器批处理文件/脚本",
    "Compiler Errors":"编译器错误",
    "Compiling":"编译",
    "Compiling Preferences":"编译首选项",
    "Compiling is when GameMaker takes your code and collects it together in such a way as to create an executable package that will run on a device as a game.":"编译是指GameMaker接受您的代码并将其收集在一起的方式，以创建可执行的程序包，该程序包将作为游戏在设备上运行。",
    "Compression is the use of mathematical algorithms to reduce the size of a file. This is used in particular for audio and image files, where formats like JPG (image) and MP3 (audio) are compressed formats. Compression usually results is much smaller file sizes, but with some data loss which may or may not be noticable depending on the type and strength of the compression used. Uncompressed formats would be BMP (image) or WAV (audio), which have larger file sizes, but no data loss.":"压缩是使用数学算法来减小文件的大小。这特别适用于音频和图像文件，其中JPG（图像）和MP3（音频）等格式是压缩格式。压缩通常会使得文件大小更小，但会导致一些数据丢失，这可能会或可能不会很明显，这取决于所使用压缩的类型和强度。未压缩的格式为BMP（图像）或WAV（音频），它们具有较大的文件大小，但不会丢失数据。",
    "Conditionals, conditional statements, and conditional expressions are features of general programming language, and they help the code make a choice whrere the result is either true or false. These can perform different actions depending on the need of the programmer, and multiple conditionals can be combined into a single condition, as long as the final value of the condition is either true or false. Examples of conditional statements are \u0027if\u0027 and \u0027while\u0027.":"条件，条件语句和条件表达式是通用编程语言的功能，它们可以帮助代码在结果为真或假的情况下做出选择。它们可以根据程序员的需要执行不同的操作，并且可以将多个条件组合为一个条件，只要条件的最终值为true或false。条件语句的示例是 if”和“ while”。",
    "Configurations":"配置",
    "Confirm Dialogs":"确认对话框",
    "Conflicts":"冲突",
    "Connection":"连接",
    "Constant":"常量",
    "Constants":"常量",
    "Content":"内容",
    "Corner ID":"角ID",
    "Create Event":"创建事件",
    "Create a Multiplayer Game":"创建一个多人游戏",
    "Creating A Marketplace Asset":"创建市场资源",
    "Creating A Publisher Account":"创建发布者账户",
    "Creating A Tutorial":"创建教程",
    "Creating An Extension":"创建扩展",
    "Creating Sound Effects":"创建声音效果",
    "Creating Sprites":"创建精灵",
    "Creating Tile Sets":"创建 Tilesets",
    "Cursor":"光标",
    "DEPRECATED":"已删除",
    "DS Grids":"网格 Grid",
    "DS Lists":"列表 List",
    "DS Maps":"映射 Map",
    "DS Priority Queues":"优先队列 Priority Queues",
    "DS Queues":"队列 Queues",
    "DS Stacks":"堆栈 Stacks",
    "Data Structures":"数据结构",
    "Data Type":"数据类型",
    "Data Type Constant":"数据类型常量",
    "Data Types":"数据类型",
    "Date And Time":"日期和时间",
    "Deactivating Instances":"停用实例",
    "Debugging":"调试",
    "Decimal Value":"十进制值",
    "Default (old to new)":"默认(从旧到新)",
    "Defining Inputs":"定义输入",
    "Description":"描述",
    "Device Input":"设备输入",
    "Dialog":"对话框",
    "Direction":"方向",
    "Domain Name System - This system associates domain names (e.g. gamemaker.io) to other info, such as IP addresses. DNS records are returned from a DNS lookup.":"域名系统——该系统将域名(如gamemaker.io)与其他信息(如IP地址)相关联。DNS记录从DNS查找返回。",
    "Double Tap Event":"双击事件",
    "Downsampling is the process of reducing samples in audio and, more generally, in signals. For audio it means that samples are thrown away and less samples remain, leading to a loss of information. The sample frequency of the audio is lowered as well as the quality of the audio. This change distorts the audio.":"降采样是在音频和信号中减少样本的过程。对于音频来说，这意味着样本被丢弃，剩下的样本更少，导致信息丢失。音频的采样频率和音频的质量都降低了。这个改变会使音频失真。",
    "Drag End Event":"拖动结束事件",
    "Drag Start Event":"拖动开始事件",
    "Dragging Event":"正在拖动事件",
    "Draw Events":"绘制事件",
    "Drawing":"绘制",
    "Drawing And Miscellaneous":"绘制和其他",
    "Dynamic Textures":"动态纹理",
    "Editing Code":"编辑代码",
    "Effects (in-game only)":"特效(仅限于游戏中)",
    "Emitter Properties":"发射器属性",
    "Encoding And Hashing":"编码和哈希",
    "Encoding transforms data into another format using a scheme that is publicly available so that it can easily be reversed. This is not the same as encryption, as it does not require a key to decode it. Encoding is generally used to either change the data into a format for eaiser use by a different system (like sending data to a server), or for making data unreadable to the human eye.":"编码使用公开可用的方案将数据转换为另一种格式，以便可以轻松地将其反转。这与加密不同，因为它不需要密钥对其进行解码。编码通常用于将数据更改为易于由其他系统使用的格式（例如，将数据发送到服务器），或用于使人眼无法读取的数据。",
    "Error":"错误(Error)",
    "Error Reporting":"错误报告",
    "Escape Sequence":"转义字符串",
    "Evaluation Order":"运算顺序",
    "Event Order":"事件顺序",
    "Example":"示例",
    "Example 1:":"示例1：",
    "Example 1: Basic Movement":"例1：基本运动",
    "Example 1: Basic Use":"示例1：基本使用",
    "Example 1: Check if any of the given values is present in an array":"示例1：检查数组中是否存在任何给定值",
    "Example 1: Copying an entire buffer\u0027s contents":"示例 1：复制整个缓冲区的内容",
    "Example 1: Deleting the first 5 elements":"示例1：删除前5个元素",
    "Example 1: Inserting a single value":"示例1：插入单个值",
    "Example 1: Particle Type Info":"示例1：粒子类型信息",
    "Example 1: Playing a basic sound (similar to audio_play_sound)":"示例 1：播放基本声音 (类似于 audio_play_sound)",
    "Example 1: Replace an object ID with another object ID":"示例 1：用另一个对象 ID 替换对象 ID",
    "Example 1: Showing the output&nbsp;":"示例1：显示输出",
    "Example 2:":"示例2：",
    "Example 2: Check if all values are present in an array":"示例2：检查数组中是否存在所有值",
    "Example 2: Copying from a buffer, starting at an offset":"示例 2：从偏移量开始从缓冲区复制",
    "Example 2: Deleting the last 3 elements":"示例2：删除最后3个元素",
    "Example 2: Inserting multiple values":"示例2：插入多个值",
    "Example 2: Listing Emitter Names":"示例2：列出发射器名称",
    "Example 2: Negative Length":"示例2：负长度",
    "Example 2: Playing a sound on an emitter (similar to audio_play_sound_on)":"示例 2：在发射器上播放声音 (类似于 audio_play_sound_on)",
    "Example 2: Pretty Print":"示例2：美化输出",
    "Example 2: Queue using array_shift and array_push":"示例2：使用 array_shift 和 array_push 的队列",
    "Example 2: Replace the first instance of an object ID with an instance ID":"示例 2：将对象 ID 的第一个实例替换为实例 ID",
    "Example 2: Reserved Strings":"示例2：保留字符串",
    "Example 2: Showing Instances Collided With":"例2：显示与之碰撞的实例",
    "Example 2: array of arrays":"示例2：数组的数组",
    "Example 2:&nbsp;Finding the top-left corner position of a tile":"示例2：查找拼贴的左上角位置",
    "Example 3: Deleting a range":"示例3：删除范围",
    "Example 3: Playing a sound at a given position in 3D audio space (similar to audio_play_sound_at)":"示例 3：在 3D 音频空间中的给定位置播放声音 (类似于 audio_play_sound_at)",
    "Example 3: Rotate an Array":"示例3：旋转数组",
    "Example:":"例子:",
    "Example: Sprite View for an Instance\u0027s Sprite":"示例：一个实例的精灵的精灵视图",
    "Expressions And Operators":"表达式和运算符",
    "Extended Blend Mode":"扩展混合模式",
    "Extended Example":"拓展示例",
    "Extended Example 1":"扩展示例1",
    "Extended Example 2":"扩展示例2",
    "Extended Example:":"扩展示例：",
    "Extension Editor Preferences":"扩展编辑器首选项",
    "Extensions":"扩展",
    "External Call Type Constants":"外部调用类型常量",
    "External Data Type Constants":"外部数据类型常量",
    "External Merge/Diff Tools":"外部合并/差异工具",
    "FX Types &amp; Parameters":"滤镜效果类型和参数",
    "Feather Data Types":"语法检查数据类型",
    "Feather Features":"语法检查功能",
    "Feather Preferences":"语法检查首选项",
    "File Directories":"文件目录",
    "File Handling":"文件处理",
    "File System":"文件系统",
    "File Watcher":"文件监视器",
    "Filter and Effect Functions":"过滤器和效果函数",
    "Filters":"滤镜",
    "Filters and Effects":"滤镜和效果",
    "Fixtures":"装置",
    "Flick Event":"轻击事件",
    "Floating point numbers are numbers that contain decimal points. For example, the numbers 5.5, 0.001, and -2,345.6789 are floating point numbers. Numbers that do not have decimal places are called integers (e.g. 2, 56, 1400).":"浮点数是包含浮点小数的数字。例如，数字5.5、0.001和-2,345.6789是浮点数。没有小数位的数字称为整数。",
    "Font Editor Preferences":"字体编辑器首选项",
    "Fonts":"字体",
    "For sprites, the bounding-box is the name given to the edges of the area that collisions will initially be detected in, and it doesn\u0027t have to be the same size as the sprite it\u0027s being applied to. For sequences, the bounding box is the outer edge of the total space that one or more assets occupy in the canvas.":"对于精灵来说，边界框是用于最初检测碰撞区域边缘的名称，它不必与它所应用的精灵大小相同。对于序列，边界框是画布中一个或多个资源占用的总空间的外缘。",
    "Forces":"力",
    "Formats":"格式",
    "Function":"函数(Function)",
    "Function Return":"函数返回",
    "Function Returns:&nbsp;":"函数返回:",
    "Function Syntax:":"函数语法:",
    "Functions":"函数",
    "GML Code":"GML 代码",
    "GML Code Overview":"GML 代码概述",
    "GML Code Preferences":"GML 代码首选项",
    "GML Code Reference":"GML 代码参考",
    "GML Name":"GML 名称",
    "GML Visual":"GML 可视化",
    "GML Visual Preferences":"GML 可视化首选项",
    "GML Visual\u200B\u200B\u200B\u200B\u200B\u200B\u200B Overview":"GML 可视化概述",
    "GML Visual\u200B\u200B\u200B\u200B\u200B\u200B\u200B Reference":"GML 可视化参考",
    "GPU Control":"GPU 控制",
    "Gain":"增益",
    "Gain Calculation":"增益计算",
    "Game":"游戏",
    "Game Input":"游戏输入",
    "Game Options":"游戏设置",
    "Game Settings":"游戏设置",
    "GameMaker Help Center":"GameMaker 帮助中心",
    "GameMaker IDE":"GameMaker IDE",
    "GameMaker Language":"GameMaker 语言",
    "GameMaker Manual Index":"GameMaker手册索引",
    "GameMaker Runner":"GameMaker Runner",
    "GameMaker&nbsp;website":"GameMaker 网站",
    "Gamepad Input":"游戏手柄输入",
    "Garbage Collection":"垃圾回收",
    "General":"通用",
    "General Game Control":"通用游戏控制",
    "General Layer Functions":"常规图层函数",
    "General Preferences":"常规首选项",
    "Generating Object Events":"生成对象事件",
    "Gesture Events":"手势事件",
    "Gesture Input":"手势输入",
    "Gizmo are directly manipulable, self contained, visual screen idioms - essentially anything that is visual and can be interacted with or manpulated by the user to generate an effect or a specific result. ":"Gizmo(小工具)是直接可操作的，独立的，可视的屏幕习语——本质上是任何可视的，可以与用户交互或由用户操作以产生效果或特定结果的东西。",
    "Global Pinch In /Pinch Out Event":"全局捏入/捏出事件",
    "Global Variables":"全局变量",
    "Go To":"转到",
    "Gravity":"重力",
    "Guide To Primitives And Vertex Building":"图元和顶点构建指南",
    "Guide To Using Blendmodes":"混合模式使用指南",
    "Guide To Using Buffers":"缓冲区使用指南",
    "Guide To Using Particles":"粒子使用指南",
    "Guide To Using Shaders":"着色器使用指南",
    "HTML5 Code Injection":"HTML5 代码注入",
    "Hashing is the method of creating a string or value that relates to a single source - usually a file - and ONLY that source. For example., in GameMaker you can generate a hash for a save file, then, before accessing it later, generate another hash for it and check the original hash and the new hash to determine if the file has been tampered with.":"哈希(散列)是一种创建与单个源（通常是文件）相关且仅与该源相关的字符串或值的方法。例如，在GameMaker中，您可以为保存文件生成一个哈希，然后在稍后对其进行访问之前，为其生成另一个哈希，并检查原始哈希和新哈希以确定文件是否已被篡改。",
    "Help":"帮助",
    "How to Disable Extensions?":"如何禁用扩展？",
    "IDE Error Reporting":"IDE 错误报告",
    "IDE Input And Navigation":"IDE 输入和导航",
    "IDE Parameters":"IDE 参数",
    "IDE Preferences":"IDE 首选项",
    "IMPORTANT":"重要",
    "Identifier":"标识符",
    "Image Editor":"图像编辑器",
    "Image Editor Preferences":"图像编辑器首选项",
    "Image Loaded":"图像已加载",
    "Images":"图像",
    "In App Purchases":"应用内购买",
    "In GameMaker, a method is the name given to a user-defined function that has been bound to an instance, so that the instance variable is the name of the funtion and what you use to call it.":"在GameMaker中，方法是绑定到实例的用户定义函数的名称，因此实例变量就是函数的名称和调用它的方法。",
    "In GameMaker, the The VM (Virtual Machine) is a compiling method that uses a generic runner for each platform and then uses that to interpret the code for your game.":"在GameMaker中，VM（虚拟机）是一种编译方法，该方法对每个平台使用通用运行程序，然后使用该运行程序解释游戏代码。",
    "In GameMaker, when we talk about an object, instance or room using \u0027physics\u0027 we mean it is using the built-in physics simulation functions, based on the Box2D physics library.":"在GameMaker中，当我们谈论一个使用“物理”的对象、实例或房间时，我们指的是它使用了基于Box2D物理库的内置物理模拟功能。",
    "In computer programming, the term hard-coded is used to describe code that is considered fixed and not likely to change. Hardcoded features are built into hardware or software in such a way that they cannot be modified later on. For example, if you are making a game and \u0027hard-code\u0027 the player health to 10, then you would be using the value 10 throughout the game code rather than using a variable.":"在计算机编程中，术语“硬编码”用于描述被认为是固定的并且不太可能更改的代码。硬编码功能以无法稍后修改的方式内置于硬件或软件中。例如，如果您要制作游戏并将玩家的健康状况“硬编码”为10，那么您将在整个游戏代码中使用值10，而不是使用变量。",
    "In computing, a server is a computer program or a device that provides functionality for other programs or devices, called \u0027clients\u0027.":"在计算中，服务器是为其他程序或设备提供功能的计算机程序或设备，称为“客户端”。",
    "In games, the HUD stands for the Heads-Up Display. This is the method by which information is visually relayed to the player as part of a game\u0027s user interface, so things like the health bar, status icons, score, etc... all form part of the HUD, and normally HUD elements do not require user interaction.":"在游戏中，HUD代表抬头显示器。这是一种将信息作为游戏用户界面的一部分可视地传递给玩家的方法，因此，诸如健康栏，状态图标，得分等之类的内容都构成了HUD的一部分，而通常HUD元素并不需要用户交互。",
    "In programming, a statement is a single line of code written legally in a programming language that expresses an action to be carried out. A statement might have internal components of its own, including expressions, operators and functions. An example of a statement is A = B + 5. A GameMaker Studio 2 program is nothing but a sequence of one or more statements that together perform a task (like move the player). ":"在编程中，语句是用编程语言合法编写的单行代码，表示要执行的操作。语句可能具有自己的内部组件，包括表达式，运算符和函数。语句的一个示例是A = B +5。GameMakerStudio 2程序不过是一系列一起执行任务（如移动玩家）的一个或多个语句的序列。",
    "In-Game":"游戏内",
    "Included Files":"包含文件",
    "Index":"索引",
    "Ini Files":"ini 文件",
    "Injection Path":"注入路径",
    "Input":"输入",
    "Input Type":"输入类型",
    "Installation Guide":"安装指南",
    "Instance Keywords":"实例关键字",
    "Instance Variables":"实例变量",
    "Instances":"实例",
    "Introduction To &lt;span data-keyref=\"GameMaker Name\"&gt;GameMaker&lt;/span&gt;":"导言 &lt; span data-keyref = “ GameMaker Name”&gt; GameMaker &lt;/span &gt;",
    "Introduction To <span data-keyref=\"GameMaker Name\">GameMaker</span>":"<span data-keyref=\"GameMaker Name\">GameMaker</span>导言",
    "Introduction To GameMaker":"GameMaker 简介",
    "Introduction To {}GameMaker{}":"介绍{}GameMaker{}",
    "Inverse Sawtooth":"反锯齿波",
    "JSDoc Script Comments":"JSDoc 脚本注释",
    "JSON stands for JavaScript Object Notatio, and is a lightweight format for storing data. JSON is often used when data is sent from a server to a web page and is considered \u0027self-describing\u0027 and easy to understand and follow when viewed.":"JSON代表JavaScript Object Notatio，并且是用于存储数据的轻量级格式。 JSON通常在将数据从服务器发送到网页时使用，并且被认为是“自我描述”的，易于查看和遵循。",
    "Joints":"关节",
    "Key":"键",
    "Keyboard Input":"键盘输入",
    "Keyboard Shortcuts":"键盘快捷键",
    "Keyboard Type":"键盘类型",
    "Keyword":"关键字",
    "Keywords are special words that are reserved by a programming language or a program as they have a special meaning. These keywords are reserved to perform certain tasks, and they can be either commands or parameters. Each programming language has a set of reserved keywords (also known as reserved names) which cannot be used as variable names, and the GameMaker Language is no exception, where words like return, while, if and break are all reserved kewords used in the programming language.":"关键字是编程语言或程序保留的特殊字，因为它们有特殊的意义。这些关键字被保留以执行某些任务，它们可以是命令或参数。每种编程语言都有一组不能用作变量名的保留关键字(也称为保留名称)，GameMaker语言也不例外，如return、while、if和break等词都是编程语言中使用的保留kewords。",
    "Language":"语文",
    "Language Features":"语言特点",
    "Language Preferences":"语言首选项",
    "Layer Properties":"图层属性",
    "Layer Types And Properties":"图层类型和属性",
    "Level":"等级",
    "Licencing &amp; Logging In":"许可及登录",
    "Licencing &amp; Versions":"授权 &amp; 版本",
    "Life":"生命周期",
    "Lighting":"光照",
    "Linear interpolation involves estimating a new value by connecting two adjacent known values with a straight line. You can then get the interpolated value by checking any point along the line. In graphics, linear interpolation refers to a basic method of smoothing pixel edges.":"线性插值是通过用一条直线连接两个相邻的已知值来估计一个新值。然后你可以通过检查直线上的任意一点来得到插值值。在图形学中，线性插值是指平滑像素边缘的一种基本方法。",
    "Listener Mask":"监听掩码",
    "Listing A Service":"列出服务",
    "Listing An Asset":"资源清单",
    "Live Wallpapers":"动态壁纸",
    "Local Asset Packages":"本地资源包",
    "Local Variables":"局部变量",
    "Machine code is code that is directly executed by a CPU without the need for interpretation by an interpreter. It is the lowest level of code and contains the instructions that the processor executes.It is specific to a processor architecture. As a consequence, it is optimized. It can also be generated from source code in a higher level programming language by a compiler.In GameMaker the YoYo Compiler can be used to generate an executable containing optimized machine code for a variety of platforms.":"机器代码是CPU直接执行的代码，不需要解释器解释。它是最低级别的代码，包含处理器执行的指令。它是特定于处理器架构的。因此，它是优化的。它也可以由编译器从高级编程语言的源代码生成。在GameMaker中，YoYo编译器可用于生成包含针对各种平台的优化机器代码的可执行文件。",
    "Making A Game Using <span data-keyref=\"GameMaker Name\">GameMaker</span>":"使用 <span data-keyref=\"GameMaker Name\">GameMaker</span> 制作游戏",
    "Marketplace Preferences":"市场首选项",
    "Marketplace Style Guide":"市场风格指南",
    "Match Making":"配对",
    "Maths And Numbers":"数学与数字",
    "Matrix Array":"矩阵数列",
    "Matrix Functions":"矩阵函数",
    "Member":"成员",
    "Menus":"菜单",
    "Message":"信息",
    "Method Variables":"方法变量",
    "Milliseconds":"毫秒",
    "Mipmapping":"纹理映射",
    "Motion Planning":"运动规划",
    "Mouse Input":"鼠标输入",
    "Movement":"运动",
    "Movement And Collisions":"运动与碰撞",
    "Movement And Controls":"移动及控制",
    "Multicast is network communication where multiple receivers are addressed instead of a single receiver in a single transmission.":"组播是一种网络通信，在这种通信中，多个接收者被寻址，而不是单个传输中的单个接收者。",
    "Names":"名称",
    "Networking":"网络",
    "Nine Slice":"九宫格",
    "Non-Bitmap Sprites":"非位图精灵",
    "Notes":"笔记",
    "Number Functions":"数字函数",
    "OPTIONAL":"可选",
    "OS And Compiler":"操作系统和编译器",
    "Object Editor Preferences":"对象编辑器首选项",
    "Object Events":"对象事件",
    "Object Variables":"对象变量",
    "Objects":"对象",
    "Objects And Instances":"对象和实例",
    "Obsolete Functions":"过时的函数",
    "Offset":"偏移量",
    "Operating System":"操作系统",
    "Operation":"类型",
    "Option":"选项",
    "Orientation":"定位",
    "Other Events":"其他事件",
    "Our Knowledge Base":"我们的知识库",
    "Our Social Links":"我们的联系方式",
    "Output Windows":"输出窗口",
    "Overview":"概述",
    "Parameters":"参数",
    "Parent Objects":"父对象",
    "Particle Draw Order":"粒子绘制顺序",
    "Particle Emitter Inf{}o{} Struct":"粒子发射器信息{}{}结构",
    "Particle Emitter Mode Constant":"粒子发射器模式常量",
    "Particle Emitters":"粒子发射器",
    "Particle System Info Struct":"粒子系统信息结构",
    "Particle Systems":"粒子系统",
    "Particle Type Info Struct":"粒子类型信息结构",
    "Particle Types":"粒子类型",
    "Particles":"粒子",
    "Path Manipulation":"路径操控",
    "Path Variables":"路径变量",
    "Paths":"路径",
    "Peers":"端",
    "Physics":"物理",
    "Physics Joint Constants":"物理关节常量",
    "Physics Objects":"物理对象",
    "Physics Variables":"物理变量",
    "Pinch End Event":"捏停止事件",
    "Pinch Start Event":"捏开始事件",
    "Pitch":"音高",
    "Platform":"平台",
    "Platform Preferences":"平台首选项",
    "Player Preferences":"玩家首选项",
    "Plugin Preferences":"插件首选项",
    "Pointer":"指针(Pointer)",
    "Position":"位置",
    "Power Saving":"节能",
    "Preferences &amp; Features":"偏好及功能",
    "Prefix":"前缀",
    "Primitives&nbsp;And Vertex Formats":"基元和顶点格式",
    "Project Format":"项目格式",
    "Project Image Generator":"项目图像生成器",
    "Purchasing An Asset":"购买资源",
    "Push Notifications":"推送通知",
    "Quick Start Guide":"快速入门指南",
    "Rating And Flagging Assets":"评级和资源标志",
    "Read Only":"只读",
    "Real":"实数(Real)",
    "Recent Windows":"最近窗口",
    "Red Lowest Bit":"红色最低位",
    "Redefine Keys Preferences":"重定义快捷键首选项",
    "Reference":"参考文献",
    "Release Notes":"发行说明",
    "Replacement key":"替换键",
    "Repository Options":"仓库选项",
    "Required SDKs":"所需的 SDK",
    "Resources":"资源",
    "Return Type":"返回类型",
    "Return Value (examples)":"返回值(示例)",
    "Returns":"返回",
    "Returns:":"返回:",
    "Reversed (new to old)":"反转(从新到旧)",
    "Reverting Files":"回滚文件",
    "Rollback Constraints":"回滚约束",
    "Rollback Errors":"回滚错误",
    "Rollback Events":"回滚事件",
    "Rollback Functions":"回滚函数",
    "Rollback Multiplayer":"回滚多人游戏",
    "Rollback System":"回滚系统",
    "Rollback Variables":"回滚变量",
    "Room Editor Preferences":"房间编辑器首选项",
    "Room Inheritance":"房间继承",
    "Room Properties":"房间属性",
    "Rooms":"房间",
    "Rotate End Event":"旋转结束事件",
    "Rotate Start Event":"旋转开始事件",
    "Rotating Event":"正在旋转事件",
    "Runner &amp; Compiler":"运行器和编译器",
    "Runner Errors":"运行器错误",
    "Runtime Feeds Preferences":"运行时源首选项",
    "Runtime Functions":"运行时函数",
    "Runtime Parameters":"运行时参数",
    "SCM stands for Source Control Management, which is a program (or suite of programs) responsible for maintining versions of the source code for a project. SCM permits you to store a running history of code changes, as well as review and undo any changes made to the source code, among other things.":"SCM代表源代码控制管理，它是负责维护项目源代码版本的一个程序(或一组程序)。SCM允许您存储代码更改的运行历史，以及检查和撤销对源代码所做的任何更改，以及其他事情。",
    "SDK stands for \u0027Software Development Kit\u0027. This usually refers to a collection of software and/or packages used for developing applications for a specific device or operating system.":"SDK代表“软件开发包\u0027Software Development Kit\u0027”。这通常是指用于为特定设备或操作系统开发应用程序的软件和/或软件包的集合。",
    "SDL Name":"SDL 名称",
    "Sample rate is the number of samples of audio carried per second, measured in Hz or kHz (one kHz being 1000 Hz). The higher the sample rate, the more a sound will approximate the original analog waveform, but the larger the file size will be. In general sound effects are fine with a lower sample rate than music.":"采样率是每秒携带的音频样本的数量，以赫兹或kHz测量(1khz等于1000hz)。采样率越高，声音将越接近原始模拟波形，但文件大小将越大。一般来说，声音效果在采样率较低的情况下比音乐效果好。",
    "Save / Load":"保存 / 加载",
    "Saving Data":"保存数据",
    "Sawtooth":"锯齿波",
    "Scale":"比例",
    "Scope":"范围",
    "Script Functions And Variables":"脚本函数和变量",
    "Script Functions vs. Methods":"脚本函数与方法",
    "Scripts":"脚本",
    "Secondary Particles":"二次粒子",
    "Sequence Direction Constant":"序列方向常量",
    "Sequence Events, Moments and Broadcast Messages":"事件、时刻和广播消息的序列",
    "Sequence Layers":"序列图层",
    "Sequences":"序列",
    "Sequences Preferences":"序列首选项",
    "Setting":"设置",
    "Setting Up The Git Plugin":"设置 Git 插件",
    "Shader Corner ID":"着色器角ID",
    "Shader Language":"着色器语言",
    "Shader Uniforms":"着色器 Uniforms 常量",
    "Shaders":"着色器",
    "Shaders.htm":"着色器",
    "Shape / Sprite":"形状/精灵",
    "Short for \u0027Graphical User Interface\u0027, which is a user interface that includes graphical elements, such as windows, icons and buttons. In GameMaker you have a specific set of object events (Draw GUI Events) that can draw to this layer specifically designed for things like score, lives, inventories, etc...":"“图形用户界面”（Graphical User Interface）的缩写，它是一个包含图形元素（例如窗口，图标和按钮）的用户界面。在GameMaker中，您有一组特定的对象事件（绘制GUI事件），可以将其吸引到专门为得分，生命，存货等事物设计的这一层。",
    "Short for \u0027Rich Site Summary\u0027, and is a standardized system for the distribution of content from an online publisher to Internet users.":"是“丰富网站摘要\u0027Rich Site Summary\u0027”的缩写，是一个用于将内容从在线出版商分发给互联网用户的标准化系统。",
    "Short for \u0027Universal Resource Locator\u0027, and is basically the address of something on the internet.":"“通用资源定位器”的缩写，基本上是互联网上某物的地址。统一资源定位符 (Uniform Resource Locator, URL)",
    "Similar to human languages, programming languages have their own set of rules on how statements can be conveyed, and this set of rules is known as the syntax. While a number of programming languages share many features, functions, and capabilities, they generally differ in syntax. Without the proper use of syntax, one cannot write an executable program, and wrong syntax will lead to errors when compiling.":"与人类语言类似，编程语言在如何传达语句方面也有自己的一套规则，这套规则称为语法。尽管许多编程语言共享许多功能，特性和功能，但是它们通常在语法上有所不同。如果没有正确使用语法，则无法编写可执行程序，并且错误的语法将导致编译时出错。",
    "Sine":"正弦波",
    "Size":"大小",
    "Skeletal Animation":"骨骼动画",
    "Skins":"皮肤",
    "Slots":"插槽",
    "Smooth interpolation involves estimating a new value by connecting two adjacent known values with a mathematically generated spline curve . You can then get the interpolated value by checking any point along the line.":"平滑插值包括通过将两个相邻的已知值与数学上生成的样条曲线连接来估计新值。然后，您可以通过检查直线上的任意点来获得内插值。",
    "Social":"社交",
    "Soft Body Particles":"柔体粒子",
    "Sound Effects":"音效",
    "Sound Mixer":"混音器",
    "Sounds":"声音",
    "Source Control":"源码控制",
    "Source Examples":"示例代码",
    "Source code is the fundamental component of a computer program that is required for the program to run.":"源代码是计算机程序运行所必需的基本组件。",
    "Specifier Examples{}*{}":"说明符示例{}*{}",
    "Speed":"速度",
    "Spline Editor":"样条线编辑器",
    "Sprite Editor Preferences":"精灵编辑器首选项",
    "Sprite Information":"精灵信息",
    "Sprite Instance Variables":"精灵实例变量",
    "Sprite Layers":"精灵图层",
    "Sprite Manipulation":"精灵操作",
    "Sprites":"精灵",
    "Sprites And Tiles":"精灵和 Tiles",
    "Square":"方波",
    "Standard Workflow":"标准工作流程",
    "Start Screen Preferences":"开始屏幕首选项",
    "Static Struct":"静态结构",
    "Static Variables":"静态变量",
    "Stats And Leaderboards":"统计数据和排行榜",
    "Status Value":"状态值",
    "Step Event":"步事件",
    "String":"字符串(String)",
    "String Escape Characters":"字符串转义字符",
    "Strings":"字符串",
    "Strip Images":"条带图像",
    "Struct":"结构(Struct)",
    "Struct Forbidden Variables":"结构禁止的变量",
    "Struct Member":"结构成员",
    "Structs &amp; Constructors":"结构与构造函数",
    "Submission Guidelines":"提交指引",
    "Summary":"总结",
    "Surfaces":"表面",
    "Syntax":"语法",
    "Syntax Errors (Feather Messages)":"语法错误(语法检查信息)",
    "Syntax:":"语法:",
    "System":"系统",
    "TIP":"提示",
    "Tag Type":"标签类型",
    "Tap Event":"点击事件",
    "Target":"目标",
    "Target Platform":"目标平台",
    "Template Info":"模板信息",
    "Texel (or texture element) is the fundamental unit of texture space, much like a pixel is the fundamental element of picture space. Textures are represented by arrays of Texels, just as pictures are represented by arrays of pixels. When texturing a 3D surface (a process known as texture mapping) the renderer maps texels to appropriate pixels in the output picture.":"Texel（或纹理元素）是纹理空间的基本单位，就像像素是图片空间的基本元素一样。纹理由纹素阵列表示，就像图片由像素阵列表示一样。对3D表面进行纹理化（一种称为纹理贴图的过程）时，渲染器将纹理像素映射到输出图片中的适当像素。",
    "Text":"文本",
    "Text Editor Preferences":"文本编辑器首选项",
    "Text Files":"文本文件",
    "Text Rendering (Regular)":"文本呈现(常规)",
    "Text Rendering (SDF Enabled)":"文本呈现(启用 SDF)",
    "Text in Sequences":"序列文本",
    "Texture Groups":"纹理组",
    "Texture Pages":"纹理页",
    "Textures":"纹理",
    "The Animation Curve Library":"动画曲线库",
    "The Asset Browser":"资源浏览器",
    "The Asset Editors":"资源编辑器",
    "The Build Menu":"构建菜单",
    "The Debug Overlay":"The Debug Overlay (调试覆盖视图)",
    "The Debugger":"调试器",
    "The Device Manager":"设备管理器",
    "The Dope Sheet is the visual representation of the sequence timeline, and where you can add, remove and edit the different asset keys and parameter keys that affect how the different tracks in the sequence will behave over time.":"关键帧清单“摄影表”是序列时间轴的直观表示，您可以在其中添加，删除和编辑不同的资源键和参数键，这些键会影响序列中不同音轨随时间的行为。",
    "The Edit Menu":"编辑菜单",
    "The End User Licence Agreement (EULA) is a legal document that outlines the licence for a product that you are getting.":"最终用户许可协议（EULA）是一份法律文件，概述了您所获得产品的许可。",
    "The File Menu":"文件菜单",
    "The File System":"文件系统",
    "The Font Editor":"字体编辑器",
    "The Game Window":"游戏窗口",
    "The Help Menu":"帮助菜单",
    "The IDE, or Integrated Development Environment, is a software application that provides comprehensive facilities to computer programmers for software development. In this case, the entire frontend of GameMaker Studio 2 is considered the IDE, and includes sections to create graphics, add sounds, and add code to make your games.":"IDE，或集成开发环境，是一个软件应用程序，为计算机程序员提供软件开发的全面设施。在这种情况下，GameMaker Studio 2的整个前端都被认为是 IDE，包括创建图形、添加声音和添加代码以制作游戏的部分。",
    "The Inspector":"检查器",
    "The Layouts Menu":"布局菜单",
    "The Marketplace":"<del>市场(重制中)",
    "The Marketplace Menu":"市场菜单",
    "The Micro Web Server":"微型 Web 服务器",
    "The Nine Slice Struct":"九宫格结构",
    "The Output Window":"输出窗口",
    "The Path Editor":"路径编辑器",
    "The Physics World":"物理世界",
    "The Profiler":"探查器",
    "The Room Manager":"房间管理器",
    "The Sequence Canvas":"序列画布",
    "The Sequence Object Struct":"序列对象结构",
    "The Start Page":"起始页",
    "The Tools Menu":"工具菜单",
    "The Track Panel":"轨道面板",
    "The Windows Menu":"窗口菜单",
    "The acronym \u0027API\u0027 stands for Application Programming Interface, and this refers to sets of rules, routines, and protocols used to build software applications. APIs help in communication with third party programs or services, which can be used to build different software. Companies such as Facebook and Twitter actively use APIs to help developers gain easier access to their services, and in GameMaker Studio 2 you\u0027ll see the API scronym used when talking about extensions - for example, the Google Play Services API or the Amazon Game On API.":"\"API”代表应用程序编程接口(Application Programming Interface)的首字母缩，是指用于构建软件应用程序的规则，例程和协议集。 API帮助与第三方程序或服务进行通信，这些程序或服务可用于构建不同的软件。诸如Facebook和Twitter之类的公司积极使用API\u200B\u200B来帮助开发人员更轻松地访问其服务，在GameMaker Studio 2中，您会看到谈论扩展时使用的API缩写-例如Google Play Services API或Amazon Game On API。",
    "The application surface is a special built-in surface that GameMaker Studio 2 will draw everything to in the Draw Events of a game (a surface is essentially an area of memory reserved for graphics). This surface is then drawn to the display buffer at the end of each game frame, displaying its contents to the player.":"应用程序表面是一种特殊的内置表面，GameMaker Studio 2将在游戏的“绘制事件”中将所有内容绘制到该表面（表面实际上是为图形保留的内存区域）。然后这个表面被绘制到每个游戏帧末尾的显示缓冲区，向玩家显示它的内容。",
    "The architecture of a processor chip (CPU) is a description of its basic components and of its basic operations. Each processor family has its own architecture, like ARM or x64.":"处理器芯片(CPU)的体系结构是对其基本组件和基本操作的描述。每个处理器家族都有自己的架构，比如 ARM 或 x64。",
    "The area of the sequence editor that shows you all the different tracks in a sequence - asset tracks, parameter tracks, track groups and clip mask groups.":"序列编辑器的区域，显示你在一个序列中所有不同的轨道-资源轨道，参数轨道，轨道组和剪切蒙版组。",
    "The backend is the part of a program that is performed in the background and is opaque to the user, usually without the need for any user interaction. For example, the server side of things when doing network programming over the internet, or the data processing that goes on behind the scenes in an RPG game. This is essentially the oppositre of the frontend.":"后端是程序的一部分，该程序在后台执行，并且对用户不透明，通常不需要任何用户交互。例如，在Internet上进行网络编程时的服务器端事物，或RPG游戏中幕后进行的数据处理。这本质上是前端的对立面。",
    "The bit depth refers to the number of bits in each sample of an audio file. Lower bit depth gives poorer quality sound but much smaller file size. Lower bit depths are usually used for small sound effects and patforms where memory may be an issue (like HTML5).":"比特深度是指音频文件的每个样本中的比特数。较低的位深度会产生较差的声音质量，但文件大小会小得多。低位深度通常用于可能会引起内存问题的小型声音效果和样式，例如HTML5。",
    "The cache is a collection of files that are generated by GameMaker once and then stored and re-used over multiple runs of a project. Note that this cache can sometimes become \u0027stale\u0027, meaning it must be cleared to force GameMaker to rebuild it from scratch, ensuring that no stale files corrupt your final game exectable.":"缓存是GameMaker临时生成的文件的集合，然后存储并在项目的多个运行中重复使用。请注意，此缓存有时可能会变成“陈旧的”，这意味着必须清除它以强制GameMaker从头开始重建它，以确保没有陈旧的文件破坏您的最终可执行游戏。",
    "The constants below can only be used&nbsp;with the&nbsp;DualSense gamepad on a PS4 or PS5":"以下常量只能与 PS4 或 PS5 上的 DualSense 游戏手柄一起使用",
    "The current \u0027play\u0027 position within the timeline in the Sequences dope sheet or the Sprite editor frame view. In sequences (and sprites), this will move as the animation is previewed, and you can place it on specific frames to see and edit the keys and keyframes at that position.":"序列文件或精灵编辑器帧视图中时间轴内的当前“播放”位置。在序列(和精灵)中，这将随着动画预览而移动，你可以将其放置在特定的帧上以查看和编辑该位置的键和关键帧。",
    "The deadzone is the distance you have to move an analog stick before the game recognizes it\u0027s being moved. A low deadzone will make any slight movement of the analog stick move your player or aim or whatever. A high deadzone value means that the analog stick needs a much greater movement before the game will detect it and move whatever is being controlled.":"盲区是指在游戏识别到你移动模拟杆之前你必须移动的距离。一个低盲区会使任何模拟杆的轻微移动移动你的玩家或目标或任何东西。高盲区值意味着模拟棒需要一个更大的移动，在游戏将检测它和移动任何被控制。",
    "The display buffer is the \u0027canvas\u0027 where everything is finally drawn. Some events target this directly (like the Pre Draw event), while others will first draw to the application surface and then draw that to the display buffer.":"显示缓冲区是最终绘制所有内容的“画布”。一些事件直接针对此事件（例如Pre Draw事件），而另一些事件将首先绘制到应用程序表面，然后将其绘制到显示缓冲区。",
    "The frontend is the part of a program that is \u0027front facing\u0027, ie: the part that the end user interacts with. For example, in GameMaker Studio 2 the interface where you do the programming and add assets, etc... is the frontend of the program, as it is where you interact with the program and input values and files and other things. This is essentially the oppositre of the backend.":"前端是程序的面向用户的部分，即：最终用户与之交互的部分。例如，在GameMaker Studio 2中，您可以在其中进行编程和添加资源等的界面是程序的前端，因为它是您与程序进行交互并输入值和文件等内容的界面。这本质上是后端的对立面。",
    "The garbage collector is an automated tool that is part of the game code and is used to remove certain things (like arrays and structs) from memory when they are no longer referenced in your code, without the need for you to explicitly remove them.":"垃圾回收是游戏代码中的一部分，是一种自动化工具，用于在代码中不再引用某些东西（如数组和结构）时从内存中删除它们，而无需您明确删除它们。",
    "The runtime in GameMaker is the collection of compiler assets that is required by the program to create a final executable package for a given target platform. These are installed seperately from the IDE, and can be changed and updated at any time.":"GameMaker Studio 2中的运行时是程序为给定目标平台创建最终可执行包所需的编译器资源的集合。它们是从IDE中独立安装的，并且可以在任何时候进行更改和更新。",
    "The tile map is the name given to a collection of tiles taken from a tile set and used to create levels in a game.":"图块地图是从图块图块集中获取的图块集合的名称，用于在游戏中创建关卡。",
    "The&nbsp;Keyframe Struct":"关键帧结构",
    "The&nbsp;Keyframe&nbsp;Data Struct":"关键帧数据结构",
    "The&nbsp;Sequence Instance Struct":"序列实例结构",
    "The&nbsp;Start Page":"起始页",
    "The&nbsp;Track Struct":"轨道结构",
    "This is a special compiler for creating executable packages that use native code instead of interepreted code and a runner (wich is what the GameMaker VM compile uses). Compiled code is faster to run, but takes more time to compile the executable.":"这是一个特殊的编译器，用于创建使用本机代码而不是解释性代码和运行程序的可执行程序包（由GameMaker VM编译使用）。编译后的代码运行速度更快，但是编译可执行文件需要更多时间。",
    "This is a technique used to smooth otherwise jagged lines or textures by blending the color of an edge with the color of the pixels around it. The result should be a more pleasing and realistic appearance, depending on the intensity of the effect.":"这是一种通过将边缘的颜色与周围像素的颜色混合来平滑锯齿状线条或纹理的技术。根据效果的强度，结果应该是更令人愉悦和逼真的外观。",
    "This is a type of non-linear interpolation based on mathematical splines. It is used to estimate a new value by connecting two adjacent known values using \u0027smooth\u0027 curves (splines), and a new value can be derived from any point along the line.":"这是一种基于数学样条的非线性插值。它通过使用“平滑”曲线（样条线）连接两个相邻的已知值来估计新值，并且可以从沿线的任何点导出新值。(catmull-rom interpolation卡特莫尔罗插值)",
    "This is an anacronym for Alpha, Red, Green, Blue, and is used to refer to the colour components specified as a hexadecimal value, eg: #FF53E270, where each set of two digits represents a single component. Breaking down the ARGB example above gives us the following component values: Alpha(FF), Red(53), Green(E2) and Blue(70). ":"这是Alpha，Red，Green，Blue的缩写，用于指代指定为十六进制值的颜色分量，例如：＃FF53E270，其中每两位数字代表一个分量。分解上面的ARGB示例可以得到以下分量值：Alpha（FF），Red（53），Green（E2）和Blue（70）。",
    "This stands for Hue, Saturation and Value and is a way of expressing a colour usually using values from 0 to 255. The hue is the colour hue value, the saturation is amount of the colour to be used, and the value is the brightness of the colour. ":"它代表“色相”，“饱和度”和“明度”，是一种通常使用0到255之间的值表示颜色的方式。色相是色相值，饱和度是要使用的颜色量，而明度是颜色明暗。",
    "Tile Map Layers":"贴图层",
    "Tile Set Editor Preferences":"图块集编辑器首选项",
    "Tile Sets":"图块集",
    "Tilesets":"图块",
    "Time Source Expiry Types":"时间源过期类型",
    "Time Source States":"时间源状态",
    "Time Source Units":"时间源单位",
    "Time Sources":"时间源",
    "Timeline Preferences":"时间线首选项",
    "Timelines":"时间线",
    "Triangle":"三角波",
    "Type":"类型",
    "Type Tables":"类型表",
    "Typographic error.":"印刷错误。",
    "UWP And Xbox Live":"<del>UWP 和 Xbox Live</del> (过时)",
    "Unavailable return key":"无法使用返回键",
    "Undefined":"未定义(Undefined)",
    "Unicode Escape Sequence":"Unicode 转义序列",
    "Updating Guide":"更新指引",
    "Users And Accounts":"用户及账户",
    "Using Animation Curves":"使用动画曲线",
    "Using The Dope Sheet":"使用关键帧表",
    "V-sync or vertical synchronisation is used to synchronise your game update speed to the refresh rate of the monitor. This can reduce screen tearing - which is when your screen displays portions of multiple frames in one go - but can also cause performance issues or problems on monitors with high refresh-rates.":"垂直同步用于将游戏更新速度与监视器的刷新率同步。这样可以减少屏幕撕裂（即屏幕一次显示多帧的一部分）的情况，但也会导致性能问题或刷新率较高的显示器出现问题。",
    "VRAM is the amount of memory available for video, ie: the memory space that can store textures and images.":"VRAM是视频可用的内存量，即：可以存储纹理和图像的内存空间。",
    "Value":"值",
    "Variable":"变量",
    "Variable Functions":"变量函数",
    "Variable Name":"变量名",
    "Variables And Variable Scope":"变量和变量范围",
    "Vectors":"向量",
    "Version &amp; Account Details":"版本和账户详细信息",
    "Version Name{} (version Number)":"版本名称{}(版本号)",
    "Video Playback":"视频播放",
    "Virtual Key Constant (vk_*)":"虚拟键常量 (vk_*)",
    "Virtual Key Constant (vk_*) (keyboard_check_direct only)":"虚拟键常量 (vk_*) (仅 keyboard_check_direct)",
    "Virtual Keys And Virtual Keyboards":"虚拟按键和虚拟键盘",
    "Wallpaper Config Event":"壁纸配置事件",
    "Watches":"监视器",
    "Web And HTML5":"Web 和 HTML5",
    "What Is Programming":"什么是编程",
    "What Is Programming?":"什么是编程？",
    "When something is rendered in GameMaker Studio 2, it generally means that it has simply been \u0027drawn to the display buffer\u0027 or \u0027drawn to a surface\u0027. Rendering can also refer to the process of turning some kind of vector source (like a font) into a bitmap image,.":"当一些东西在GameMaker Studio 2中呈现时，通常意味着它只是被“绘制到显示缓冲区”或“绘制到表面”。渲染也可以指将某种矢量源(如字体)转换为位图图像的过程。",
    "Whitespace Characters":"空格字符",
    "Windows Batch File Name":"Windows 批处理文件名",
    "Windows Key Binding":"Windows 键位绑定",
    "Workspace":"工作区",
    "Workspace Preferences":"工作区首选项",
    "Workspaces":"工作空间",
    "Xbox Live":"<del>Xbox Live</del>",
    "YUV Videos":"YUV 视频",
    "YoYo Compiler":"YoYo 编译器",
    "Your Marketplace Library":"你的市场库",
    "audio_bus_main":"",
    "compatibility scripts":"兼容性脚本",
    "debug_mode":"<del>debug_mode</del>",
    "description":"描述",
    "errorString / resultString":"错误字符串 / 结果字符串",
    "health":"<del>health</del>",
    "iOS / tvOS Extensions":"iOS / tvOS 扩展",
    "if / else and Conditional Operators":"If/else 和条件运算符",
    "json_decode":"json_decode (弃用)",
    "json_encode":"json_encode (弃用)",
    "lives":"<del>lives</del>",
    "macOS Key Binding":"macOS 键位绑定",
    "macOS/Linux Shell Script Name":"MacOS/Linux Shell 脚本名称",
    "physics_joint_wheel_create":"physics_joint_wheel_create",
    "score":"<del>score</del>",
    "value":"值",
    "{} Platform-Specific Notes":"{}平台专用注释",
    "{}Additional IDE Tools{}{}Additional IDE Tools{}":"{}其他 IDE 工具{}",
    "{}Additional Information{}{}Additional Information{}":"{}补充信息{}{}补充信息{}",
    "{}Asset Editors{}{}Asset Editors{}":"{}资源编辑{}{}资源编辑{}",
    "{}Example 1: Basic Use{}":"{}示例1：基本使用{}",
    "{}Example 1: Custom String{}":"{}示例1：自定义字符串{}",
    "{}Example:{}":"{}示例:{}",
    "{}Feather{} only":"{}语法检查{}专用",
    "{}GameMaker Language{}{}GameMaker Language{}":"{}GameMaker语言{}{}GameMaker语言{}",
    "{}IDE Navigation{}{}IDE Navigation{}":"{}IDE导航{}{}IDE导航{}",
    "{}IDE Preferences &amp; Features{}{}IDE Preferences &amp; Features{}":"{} IDE 首选项和特性{}{} IDE 首选项和特性{}",
    "{}Introduction to {}GameMaker{}{}{}Introduction to {}GameMaker{}{}":"{}{}GameMaker{}的介绍{}{}{}GameMaker{}的介绍{}",
    "{}Quick Start Guide{}{}Quick Start Guide{}":"{}快速入门指南{}{}快速入门指南{}",
    "{}Returns:{}":"{}返回:{}",
    "{}Setting Up And Version Information{}{}Setting Up And Version Information{}":"{}设置和版本信息{}{}设置和版本信息{}",
    "{}Syntax:{}":"{}语法:{}",
    "{}Texture Group Status Constant{}":"{}纹理组状态常量{}",
    "{}Variable \"Type_Constant_Surface_Format\" is not defined{}":"{}变量\"Type_Constant_Surface_Format\"未定义{}",
    "{}Video Format Constant{}":"{}视频格式常量{}",
    "{}Video Status Constant{}":"{}视频状态常量{}",
    "{}{}Blend Mode Factor Constant{}{}":"{}{}混合模式因子常量{}{}",
    "{}{}Device Type Constant{}{}":"{}{}设备类型常量{}{}",
    "{}{}Example:{}{}":"{}{}示例:{}{}",
    "{}{}Mouse Button Constant{}{}":"{}{}鼠标按钮常量{}{}"
}
	var json={
    "A last way to access data in a struct is by using the struct accessor {}{}${}{}. This allows access to struct variables using strings, for both reading:&nbsp;":"访问结构中数据的最后一种方法是使用结构访问器 {}{}${}{}。这允许使用字符串访问结构变量，用于读取：",
    "A {}struct {}is a variable that holds a collection of other variables. The variables that a struct holds can be of any {}data type{} previously mentioned and these variables can be read from and written to after the initial struct declaration, and you can also add more variables to a struct after it has been declared.":"{}struct (结构) {}是保存其他变量集合的变量。结构所持有的变量可以是前面提到的任何{}数据类型{}，这些变量可以在初始结构声明之后读取和写入，也可以在声明结构之后向其添加更多变量。",
    "A {}{}{}struct {}is a variable that holds a collection of other variables. The variables that a struct holds can be of any {}data type{} previously mentioned and these variables can be read from and written to after the initial struct declaration, and you can also add more variables to a struct after it has been declared.":"{}{}{}struct (结构) {}是保存其他变量集合的变量。结构所持有的变量可以是前面提到的任何{}数据类型{}，这些变量可以在初始结构声明之后读取和写入，也可以在声明结构之后向其添加更多变量。",
    "Accessing Struct Variables":"访问结构变量",
    "After the initial creation, structs have no processing overhead while they exist, although they {}will{} take up space in memory. The struct syntax is as follows:":"在初始创建之后，虽然结构{}会占用内存空间，但它们在存在时没有处理开销。结构语法如下：",
    "Another way to access data in a struct is by using the {}{}with(){}{} function. So, for example, you could do this:":"访问结构中数据的另一种方法是使用{}{}with(){}{}函数。例如，您可以执行以下操作：",
    "Another way to access data in a struct is by using the&nbsp;{}{}with{}{}&nbsp;statement. So, for example, you could do this:":"访问结构中数据的另一种方法是使用 {}{}with{}{} 语句。例如，您可以这样做：",
    "As you can see, when defining the function we use a colon \"{}:{}\" to separate the new constructor from the parent&nbsp;constructor to be inherited from. The child constructor ({}Vector3{}) passes the {}_x{} and {}_y{} arguments into the parent ({}Vector2{}) constructor, which are used to run the parent\u0027s constructor first, after which the child\u0027s constructor is executed. This way the child constructor gets the parent\u0027s variables ({}x{} and {}y{}) and can also define its own ({}z{}).":"如您所见，在定义函数时，我们使用冒号\"{}:{}\"将新构造函数与要从中继承的父构造函数分开。子构造函数({}Vector 3{})将{}_x{}和{}_y{}参数传递到父构造函数({}Vector 2{})中，父构造函数用于首先运行父构造函数，然后执行子构造函数。这样，子构造函数就可以获取父项的变量({}x{}和{}y{})，并且还可以定义自己的变量({}z{})。",
    "Both of these constructors will print {}20{} to the output log, as that was the default value for the argument set by the child constructor, and the same value was passed into the parent constructor.":"这两个构造函数都将向输出日志打印{}20{}，因为这是子构造函数设置的参数的默认值，并且已将相同的值传递到父构造函数。",
    "Checking Constructor Inheritance":"检查构造函数继承",
    "Constructor Functions":"构造函数",
    "Finally, structs can have other structs nested inside them, like this:":"最后，结构中可以嵌套其他结构，如下所示：",
    "Finally, there are a number of&nbsp;runtime functions that you can use on structs to get the variables they contain&nbsp;as well as a few other things. You can find them in the following section:":"最后，有许多运行时函数可用于结构，以获取它们包含的变量以及其他一些内容。您可以在以下部分中找到它们：",
    "For example, we created the&nbsp;{}Vector2{}&nbsp;constructor function above, so we can then use that as the \"parent\" for another constructor function, which we\u0027ll call&nbsp;{}Vector3{}:":"例如，我们在上面创建了 {}Vector2{} 构造函数，因此我们可以使用它作为另一个构造函数的“父”函数，我们将其命名为 {}Vector3{}:",
    "For example, you\u0027ll notice in the above example that the struct variable \"g\" is being set to {}image_index{}, which is an instance variable. You might think that you\u0027d need to use the {}keyword{} {}other{} in this case to get the instance variable, but this is not necessary. Essentially, when you define a struct{}, all member variables on the left-hand side of the colon \":\" are&nbsp;the&nbsp;{}struct{}&nbsp;variables, and the values and variables on the right-hand side use the scope of whatever is defining the struct{} (in this case, an instance).":"例如，您会注意到在上面的示例中，结构变量“g”被设置为{}image_index{}，这是一个实例变量。您可能认为在本例中需要使用{}关键字{}{}other{}来获取实例变量，但这是不必要的。本质上，当您定义一个结构{}时，冒号\":\"左边的所有成员变量都是   {}结构{} 变量，而右边的值和变量使用定义结构{}的范围(在本例中是一个实例)。",
    "For more details on the {}new{} and {}delete{} operators, please see the following pages:":"有关{}new{}和{}delete{}运算符的详细信息，请参阅以下页面：",
    "Functions created this way will also support single {}inheritance{}, i.e.: you can create a constructor function that inherits data from another constructor function.":"以这种方式创建的函数还将支持单{}继承{}，即：您可以创建一个从另一个构造函数继承数据的构造函数。",
    "Functions created this way will also support single {}inheritance{}, ie: you can create a constructor function that inherits data from another constructor function.":"以这种方式创建的函数还将支持单{}继承{}，即：您可以创建一个从另一个构造函数继承数据的构造函数。",
    "Here is an example of a struct with various variables and data types:":"下面是一个具有各种变量和数据类型的结构示例：",
    "Here we are creating a function called&nbsp;{}Vector2{} and telling {}GameMaker{} that this is a function used for creating structs&nbsp;by adding the {}constructor{} keyword after its definition. You can then call this constructor&nbsp;function like this:":"此处我们创建一个名为{}Vector 2{}的函数，并告诉{}GameMaker{}此函数用于通过在其定义后添加{}构造函数{}关键字来创建结构。然后可以这样调用此构造函数：",
    "If you need to use strings to access a struct variable, it is faster to {}get its hash{} and use that in {}read{}/{}write{} to the variable.":"如果你需要使用字符串来访问一个结构变量，那么{}获取它的hash{}并在{}read{}/{}write{}中使用它来访问变量会更快。",
    "In both cases {}mystruct.a{}&nbsp;will be assigned the value {}12{} and {}mystruct.b{} the value {}14{}, as it will look for a variable with the same name in the scope where the struct is being initialised.":"在这两种情况下，{}mystruct.a{}将被赋值为{}12{}，而{}mystruct.b{}将被赋值为{}14{}，因为它将在初始化结构的作用域中查找同名的变量。",
    "In the above code the struct member variables {}x{}&nbsp;and {}y{}&nbsp;are being set to the values held in the instance variables {}x{}&nbsp;and {}y{}, since the right-hand side of the colon \":\" refers to the instance that is defining the struct. It is worth noting that this means you {}cannot{}&nbsp;use struct member variables for defining subsequent variables within the struct declaration. For example, the following would give you an error:":"在上述代码中，结构化成员变量{}x{}和{}y{}被设置为实例变量{}x{}和{}y{}中保留的值，因为冒号\":\"的右侧是指定义结构的实例。值得注意的是，这意味着{}不能使用结构成员变量{}来定义结构声明中的后续变量。例如，以下内容会给出一个错误：",
    "Inheritance":"继承",
    "Instance Variables in Struct Declaration?":"结构声明中的实例变量?",
    "It creates a struct from the {}potion{} constructor. Using {}is_instanceof(){}, we can check that the new struct:":"它从 {}potion{} 构造函数创建一个结构。使用 {}is_instanceof(){}，我们可以检查新结构：",
    "Let\u0027s look at a simple&nbsp;example to illustrate this. Say you want to define a struct with the variables \"x\" and \"y\" and you want to set them to the \"x\" and \"y\" of the instance defining the struct. In practice the code would look like this:":"让我们看一个简单的例子来说明这一点。假设您要使用变量\"x\"和\"y\"定义结构，并要将它们设置为定义结构的实例的\"x\"和\"y\"。实际上，代码如下所示：",
    "Note that assigning a default value to an argument in a child constructor will override the parent\u0027s default value for that argument. See the following example:":"请注意，为子构造函数中的参数指定缺省值将覆盖该参数的父级缺省值。请参见以下示例：",
    "Note that you can also call the {}{}string(){}{}&nbsp;function on a struct reference and use that to display the contents - or the {}toString{} method - to the screen, or save it to a file, or whatever, eg:":"请注意，您还可以对结构引用调用{}{}string(){}{}函数，并使用该函数将内容或{}toString{}方法显示到屏幕，或将其保存到文件或其他任何内容，例如：",
    "Now when the {}show_debug_message(){} function is called, the {}toString{} method will be used to generate the output and - with the above example - you\u0027ll get:":"现在，当调用{}show_debug_message(){}函数时，{}toString{}方法将用于生成输出，并且-使用上面的示例-您将获得：",
    "Once a struct has been defined, you can access the data within it using the \"point\" notation, like this:":"定义结构后，可以使用\"点\"表示法访问其中的数据，如下所示：",
    "One final thing to mention about structs is that you can change what is output to the console from them for debugging. By default, calling the function {}{}show_debug_message(){}{}&nbsp;on a struct will output the contents of the struct (as shown above). However, it\u0027s possible to customise this message by adding a specifically named method to the struct called {}toString{}:":"关于结构的最后一点需要提及的是，您可以更改从结构输出到控制台的内容以进行调试。默认情况下，在结构上调用函数{}{}show_debug_message(){}{}将输出结构的内容(如上所示)。但是，可以通过在名为{}toString{}的结构中添加特定命名的方法来自定义此消息：",
    "One final thing to mention about structs is that you can change what is output to the console from them for debugging. By default, calling the function {}{}show_debug_message(){}{}&nbsp;on a struct will output the contents of the struct (as shown above). However, it\u0027s possible to customise this message by adding a specifically named method to the struct called {}{}{}toString{}:":"关于结构，最后要提到的一点是，您可以更改从它们输出到控制台以进行调试的内容。默认情况下，对结构调用函数 {}{}show_debug_message(){}{} 将输出结构的内容 (如上所示)。但是，可以通过将一个专门命名的方法添加到名为 {}{}{}toString{} 的结构中来定制此消息：",
    "Or,&nbsp;using the method variable syntax:":"或者，使用方法变量语法：",
    "Shorthand Initialisation&nbsp;of Variables With The Same Name":"同名变量初始化的简写",
    "So, an example of this in practice would be:":"因此，实践中的一个例子是：",
    "String Output":"字符串输出",
    "Struct Forbidden Variables":"结构禁止的变量",
    "Struct variables that you initialise with the value&nbsp;of an existing variable&nbsp;of the same name (a local or instance variable), can be written using a shorthand notation. Instead&nbsp;of having to write:":"使用同名的现有变量(局部变量或实例变量)的值初始化的结构变量可以使用简写表示法编写。而不是写：",
    "Structs &amp; Constructors":"结构和构造函数",
    "The above code creates an instance scope struct in the variable {}mystruct{}&nbsp;and populates it with some values (structs can be created at local, instance and global scopes, just like any other variable - see the section on {}Variables and Variable Scope{} for more information). Note that you don\u0027t have to populate the contents of a struct when it is created initially and you can create an empty struct by simply doing this:":"以上代码在变量{}mystruct{}中创建实例范围结构，并使用某些值填充该结构(可以在局部、实例和全局范围内创建结构，就像任何其他变量一样-有关详细信息，请参阅{}变量和变量范围{}一节)。请注意，最初创建结构时不必填充其内容，只需执行以下操作即可创建空结构：",
    "The above code shows three constructors:&nbsp;{}item{}, {}potion{} which is a child of {}item{}, and {}enemy{}, which is a separate constructor.":"上面的代码显示了三个构造函数：{}item{}，{}potion{}，它是 {}item{} 的子类，以及 {}enemy{}，它是一个单独的构造函数。",
    "The error occurs because the variables {}a{}&nbsp;and {}b{}&nbsp;are actually being evaluated at the scope of whatever is defining the struct (they are on the right-hand side of the colon \":\"), and are&nbsp;{}not{}&nbsp;the ones being defined within the struct itself.{}{}":"出现错误是因为变量{}a{} 和{}b{} 实际上是在定义结构的范围内计算的(它们在冒号\":\"的右边)，并且 {}不是{} 是在结构本身中定义的。",
    "The variable {}v2{} will now contain a struct with the variables {}x{} and {}y{} and the {}static{}&nbsp;{}method variable{} {}Add{}.":"变量{}v2{}现在将包含带有变量{}x{}和{}y{}以及{}static{}{}方法变量{}{}Add{}的结构。",
    "The variables used in a struct should follow the usual variable naming scheme, i.e.: they cannot start with a number and should only be made up of alphanumeric characters and the underscore \"_\" character, and also note that the contents of a struct are {}independent of the instance or function that created it{}, and as such you can - if you wish - use&nbsp;built-in variable names such as&nbsp;{}image_index{} or {}x{} and {}y{}.":"结构中使用的变量应遵循通常的变量命名方案，即：它们不能以数字开头，只能由字母数字字符和下划线\"_\"字符组成，并且还要注意，结构的内容与创建它的实例或函数{}无关，因此，如果您愿意，可以使用内置变量名，如{}image_index{}或{}x{}和{}y{}。",
    "This constructor&nbsp;will now use {}0{} for the {}_x{} and {}_y{} arguments if they are not specified when the function is called. This means that you can create a new {}Vector2{} struct without having to specify any arguments:":"如果在调用函数时未指定{}_x{}和{}_y{}参数，则此构造函数现在将使用{}0{}。这意味着您可以创建新的{} Vector2 {}结构，而无需指定任何参数：",
    "This functionality makes use of \"static structs\". See:&nbsp;{}Static Struct{}":"该功能利用了\"静态结构\"。请参阅：{}静态结构{}",
    "This has the same result as initialising the struct like this:&nbsp;":"这与初始化结构体的结果相同：",
    "This has the same result as initializing the struct like this:&nbsp;":"这与初始化如下结构的结果相同：",
    "This means that the damage of a basic sword will always be {}10{}, since it passes that value to its parent constructor irrespective of what its own arguments might be.":"这意味着BasicSword的damage将始终为{}10{}，因为它将该值传递给其父构造函数，而不管其自身的参数是什么。",
    "This way you can check whether a struct \"is\" something, as {}a potion is an item{}, so it returns {}true{} for both constructors. However if wouldn\u0027t be true the other way around: {}an item is not a potion{}.":"通过这种方式，您可以检查结构是否\"是\"某物，因为 {}potion 是 item{}，因此它为两个构造函数返回 {}true{}。然而，如果不是真的，反过来：{} item 不是 potion {}。",
    "To access such nested structs you would still use the point notation, like this:":"要访问此类嵌套结构，仍需使用点符号，如下所示：",
    "Using {}with(){} changes the scope of the code to the given struct where you can manipulate the member variables at the struct&nbsp;scope. Note that in the example we also use the {}{}other{} keyword{}. This works just like in an instance when using {}with(){} and will reference the instance (or struct) that is actually running the code block.":"将{}with(){}一起使用会将代码范围更改为给定结构，从而可以在结构范围内操作成员变量。请注意，在本示例中，我们还使用了{}{}other{}关键字{}。这与使用{}with(){}时的实例类似，并且将引用实际运行代码块的实例(或结构)。",
    "Using {}with{} changes the scope of the code to the given struct where you can manipulate the member variables at the struct&nbsp;scope. Note that in the example we also use the {}{}other{} keyword{}. This works just like in an instance when using {}with{}&nbsp;and will reference the instance (or struct) that is actually running the code block.":"将 {}with{} 配合使用会将代码的作用域更改为给定的结构，您可以在其中操作结构作用域中的成员变量。请注意，在本例中，我们还使用了{} {}other{} 关键字{}。这就像在实例中将 {}with{} 一起使用时一样，并将引用实际运行代码块的实例 (或结构)。",
    "Variable Functions":"变量函数",
    "Variables can then be added to this struct at a later point in the game code. To add them afterwards you use the dot operator (in the same way as in&nbsp;{}Addressing Variables In Other Instances{}):&nbsp;":"然后可以在游戏代码的稍后一点将变量添加到此结构中。若要在以后添加它们，请使用点运算符(与{}其他实例中的寻址变量的方法相同{})：",
    "When a struct is no longer required it can be removed from memory using the {}{}delete{}{} operator, which flags the struct as being able to be garbage collected. This is not strictly required as the {}garbage collector{} may do this automatically if the struct is no longer referenced in your code, but it is good practice to do so and we recommend it (for example, call {}delete{} in the {}Clean Up event{} of an instance to explicitly tell the garbage collector that an instance scope struct is to be deleted). Here is an example:":"当一个结构不再需要时，可以使用{}{}delete{}{}操作符从内存中删除它，该操作符将该结构标记为能够被垃圾回收。这不是严格要求的，因为如果代码中不再引用该结构，{}垃圾收集器{}可能会自动执行此操作，但这样做是很好的实践，我们建议这样做(例如，在实例的{}清理事件{}中调用{}delete{}，显式地告诉垃圾收集器要删除一个实例作用域结构)。下面是一个例子:",
    "You can also make use of optional arguments in your constructor functions:":"您还可以在构造函数中使用可选参数：",
    "You can also pass constant values into the parent constructor, so that a certain child constructor always provides the same values to its parent constructor:":"也可以将常量值传递给父构造函数，以便某个子构造函数始终为其父构造函数提供相同的值：",
    "You can also pass values into the parent constructor, so that a certain child constructor always provides the same values to its parent constructor:":"您还可以将值传递给父构造函数，以便某个子构造函数始终向其父构造函数提供相同的值：",
    "You can also perform operations on the variables within a struct or use them in functions, just as you would with any other variable. For example:":"您还可以对结构中的变量执行操作，或者在函数中使用它们，就像对待任何其他变量一样。例如：",
    "You can also use {}script functions{} or&nbsp;{}methods{} to create functions that can be used to generate new structs, which requires the use of the {}constructor{} keyword for the function and the {}{}new{}{} operator when creating a struct from such a function. See the following function:":"您还可以使用{}脚本函数{}或{}方法{}来创建可用于生成新结构的函数，这需要使用函数的{}构造函数{}关键字，以及从此类函数创建结构时使用{}{}new{}{}运算符。请参阅以下函数：",
    "You can see in the above code that you can define methods and use runtime functions in structs, and you can also use local and instance variables within the struct declaration.":"在上面的代码中可以看到，您可以在结构中定义方法和使用运行时函数，还可以在结构声明中使用局部变量和实例变量。",
    "You can use&nbsp;{}{}is_instanceof{}{}&nbsp;to check if a struct belongs to the given constructor, or has the constructor as a parent constructor.":"您可以使用 {}{}is_instanceof{}{} 来检查结构是否属于给定的构造函数，或者是否将该构造函数作为父构造函数。",
    "You can write:&nbsp;":"你可以这样写：",
    "You\u0027ll notice in the above code that you can also define methods and use runtime functions in structs, and you can also use local and instance variables within the struct declaration.":"您将在上面的代码中注意到，您还可以定义方法并在结构中使用运行时函数，还可以在struct声明中使用局部变量和实例变量。",
    "You\u0027ll notice in the above example that the struct variable \"g\" is being set to {}image_index{}, which is an instance variable. You might think that you\u0027d need to use the {}keyword{} {}other{} in this case to get the instance variable, but this is not necessary. Essentially, when you define a struct{}, all member variables on the left-hand side of the colon \":\" are&nbsp;the&nbsp;{}struct{}&nbsp;variables, and the values and variables on the right-hand side use the scope of whatever is defining the struct{} (in this case, an instance).":"在上面的示例中，您将注意到结构变量\"g\"被设置为 {}image_index{}，这是一个实例变量。在本例中，您可能认为需要使用{}关键字{} {}other{} 来获取实例变量，但这并不是必需的。本质上，当您定义结构时，{}冒号\"：\"左侧的所有成员变量都是{}结构{}变量，而右侧的值和变量使用定义结构{}(在本例中为实例)的作用域。",
    "and writing:&nbsp;":"和写入：",
    "is a {}potion{}":"是一个 {}potion{}",
    "is an {}item{}":"是一个 {}item{}",
    "is not an {}enemy{}":"不是一个 {}enemy{}",
    "{}NOTE{}: When working with inheritance, you cannot use method variables to define the constructor function, only script functions.":"{}注意{}:使用继承时，不能使用方法变量来定义构造函数，只能使用脚本函数。",
    "{}{}IMPORTANT!{}{}&nbsp; You {}cannot {}use any built-in {}{}global {}{}scope variables as struct member names, eg: {}game_id{} or {}fps{}. You can find a full list of these global variables from the following page:":"{}{}重要!{}{}您{}不能{}使用任何内置的{}{}全局{}{}范围变量作为结构成员名称，例如：{}game_id{}或{}fps{}。您可以从以下页面找到这些全局变量的完整列表：",
    "{}{}IMPORTANT{}{}&nbsp;You cannot use any built-in {}global variables{} as struct member names, eg: {}game_id{} or {}fps{}. You can find a full list of these global variables on&nbsp;{}Struct Forbidden Variables{}.":"{}{}重要!{}{} 您不能使用任何内置的{}全局{}范围变量作为结构成员名称，例如：{}game_id{} 或 {}fps{}。您可以在{}结构禁用变量{}上找到这些全局变量的完整列表。",
    "{}{}NOTE{}{}&nbsp;When working with inheritance, you cannot use method variables to define the constructor function, only script functions.":"{}{}注意{}{} 在使用继承时，不能使用方法变量来定义构造函数，只能使用脚本函数。"
}

	$(function(){

		//添加按钮
		addNoTranslationStateButton()
		//跳过翻译
		if(noTranslationState())return false

	//这么做只是为了方便移植修改
	const css1="div.footer a,h4,caption"
	const css2="p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption"
	const css3="th,.warning,.important,.optional"

		$(css1).each(function(){
			setTranslator($(this),json_global)
		})

		$(css2).each(function(){
			setTranslator($(this),json)
		})

		$(css3).each(function(){
			setTranslator($(this),json_global)
		})

		//翻译主页
		if($(".header").length){
			window.setInterval(function(){
				//翻译菜单
				$("#toc-panel a:not('isTranslate')").each(function(){
					//区别于main.js,这个不管有没有翻译都将添加标记
					$(this).addClass("isTranslate")
					setTranslator($(this),json_global)
				})
				//翻译术语表
				$(".GlossDefinitionText:not('isTranslate')").each(function(){
					$(this).addClass("isTranslate")
					setTranslator($(this),json_global)
				})
			},250)
			console.log("成功啦!现在正在疯狂翻译菜单中!")
		}

		//翻译tooltip
		$(".tooltip").each(function(){
			setTranslator($(this),json_global,"title")
		})

	})

	document.addEventListener('DOMContentLoaded', () => {
		pangu.autoSpacingPage();
	})

</script>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "8.2.1.2";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Structs &amp; Constructors</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css">
  <script src="../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo">
  <meta name="topic-comment" content="Page outlining the use of Structs">
  <meta name="rh-index-keywords" content="Structs">
  <meta name="search-keywords" content="structs,new,delete,struct">
<meta name="brsnext" value="GameMaker_Language/GML_Overview/Struct_Forbidden_Variables.htm"><meta name="brsprev" value="GameMaker_Language/GML_Overview/Arrays.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Structs &amp; Constructors">
        <span>Structs &amp; Constructors</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Structs &amp; Constructors</h1>
  <p>A <strong><a id="struct"></a>struct </strong>is a variable that holds a collection of other variables. The variables that a struct holds can be of any <a href="Data_Types.htm">data type</a> previously mentioned and these variables can be read from and written to after the initial struct declaration, and you can also add more variables to a struct after it has been declared.</p>
  <p>The variables used in a struct should follow the usual variable naming scheme, i.e.: they cannot start with a number and should only be made up of alphanumeric characters and the underscore "_" character, and also note that the contents of a struct are <em>independent of the instance or function that created it</em>, and as such you can - if you wish - use&nbsp;built-in variable names such as&nbsp;<span class="inline">image_index</span> or <span class="inline">x</span> and <span class="inline">y</span>.</p>
  <p>After the initial creation, structs have no processing overhead while they exist, although they <i>will</i> take up space in memory. The struct syntax is as follows:</p>
  <p class="code"><i>&lt;variable&gt;</i> =<br>
    {<br>
    <i>&nbsp; &nbsp; &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br>
    <i>&nbsp; &nbsp; &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;etc...<br>
    };
  </p>
  <p>So, an example of this in practice would be:</p>
  <p class="code">mystruct =<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;a : 20,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;b : "Hello World"<br>
    };</p>
  <p>The above code creates an instance scope struct in the variable <span class="inline">mystruct</span>&nbsp;and populates it with some values (structs can be created at local, instance and global scopes, just like any other variable - see the section on <a href="Variables_And_Variable_Scope.htm">Variables and Variable Scope</a> for more information). Note that you don't have to populate the contents of a struct when it is created initially and you can create an empty struct by simply doing this:</p>
  <p class="code">mystruct = {};</p>
  <p>Variables can then be added to this struct at a later point in the game code. To add them afterwards you use the dot operator (in the same way as in&nbsp;<a href="Addressing_Variables_In_Other_Instances.htm">Addressing Variables In Other Instances</a>):&nbsp;</p>
  <p class="code">mystruct.newItem = "Some Text";</p>
  <p>This has the same result as initializing the struct like this:&nbsp;</p>
  <p class="code">mystruct =<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;newItem : "Some Text"<br>
    };</p>
  <p>Here is an example of a struct with various variables and data types:</p>
  <p class="code">var _xx = 100;<br>
    mystruct =<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;a : 10,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;b : "Hello World",<br>
    &nbsp;&nbsp;&nbsp;&nbsp;c : int64(5),<br>
    &nbsp;&nbsp;&nbsp;&nbsp;d : _xx + 50,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;e : function(a, b)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return a + b;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>
    &nbsp;&nbsp;&nbsp;&nbsp;f : [ 10, 20, 30, 40, 50 ],<br>
    &nbsp; &nbsp; g : image_index<br>
    };</p>
  <p>You can see in the above code that you can define methods and use runtime functions in structs, and you can also use local and instance variables within the struct declaration.</p>
  <h3 id="inst_in_struct">Instance Variables in Struct Declaration?</h3>
  <p>You'll notice in the above example that the struct variable "g" is being set to <span class="inline">image_index</span>, which is an instance variable. You might think that you'd need to use the <a href="Instance_Keywords.htm">keyword</a> <span class="inline">other</span> in this case to get the instance variable, but this is not necessary. Essentially, when you define a struct<strong>, all member variables on the left-hand side of the colon ":" are&nbsp;the&nbsp;<em>struct</em>&nbsp;variables, and the values and variables on the right-hand side use the scope of whatever is defining the struct</strong> (in this case, an instance).</p>
  <p>Let's look at a simple&nbsp;example to illustrate this. Say you want to define a struct with the variables "x" and "y" and you want to set them to the "x" and "y" of the instance defining the struct. In practice the code would look like this:</p>
  <p class="code">mystruct =<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;x : x,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;y : y<br>
    };</p>
  <p>In the above code the struct member variables <span class="inline">x</span>&nbsp;and <span class="inline">y</span>&nbsp;are being set to the values held in the instance variables <span class="inline">x</span>&nbsp;and <span class="inline">y</span>, since the right-hand side of the colon ":" refers to the instance that is defining the struct. It is worth noting that this means you <em>cannot</em>&nbsp;use struct member variables for defining subsequent variables within the struct declaration. For example, the following would give you an error:</p>
  <p class="code">mystruct =<br>
    {<br>
    &nbsp; &nbsp; a : 10,<br>
    &nbsp; &nbsp; b : 10,<br>
    &nbsp; &nbsp; c : a + b<br>
    }</p>
  <p>The error occurs because the variables <span class="inline">a</span>&nbsp;and <span class="inline">b</span>&nbsp;are actually being evaluated at the scope of whatever is defining the struct (they are on the right-hand side of the colon ":"), and are&nbsp;<em>not</em>&nbsp;the ones being defined within the struct itself.<strong></strong></p>
  <p class="note" style="padding-left: 20px;"><span data-conref="../../assets/snippets/Tag_important.hts"><span class="important">IMPORTANT</span></span>&nbsp;You cannot use any built-in <strong>global variables</strong> as struct member names, eg: <span class="inline">game_id</span> or <span class="inline">fps</span>. You can find a full list of these global variables on&nbsp;<a href="Struct_Forbidden_Variables.htm">Struct Forbidden Variables</a>.</p>
  <h3>Accessing Struct Variables</h3>
  <p>Once a struct has been defined, you can access the data within it using the "point" notation, like this:</p>
  <p class="code">mystruct =<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;a : 20,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;b : "Hello World"<br>
    }<br>
    <br>
    mystring = mystruct.b + string(mystruct.a);
  </p>
  <p>You can also perform operations on the variables within a struct or use them in functions, just as you would with any other variable. For example:</p>
  <p class="code">mystruct.a += 1;<br>
    mystruct.b = mystruct.a + 20;<br>
    mydir = point_direction(mouse_x, mouse_y, mystruct.xx, mystruct.yy);</p>
  <p>Finally, structs can have other structs nested inside them, like this:</p>
  <p class="code">mystruct =<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;a :<br>
    &nbsp; &nbsp; {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aa : "This is an example"<br>
    &nbsp;&nbsp;&nbsp;&nbsp;},<br>
    &nbsp;&nbsp;&nbsp;&nbsp;b :<br>
    &nbsp; &nbsp; {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bb : "And another one"<br>
    &nbsp;&nbsp;&nbsp;&nbsp;},<br>
    };</p>
  <p>To access such nested structs you would still use the point notation, like this:</p>
  <p class="code">var _str = mystruct.a.aa + " " + mystruct.b.bb;<br>
    show_debug_message(_str);</p>
  <p>Another way to access data in a struct is by using the&nbsp;<span class="inline2"><a href="Language_Features/with.htm">with</a></span>&nbsp;statement. So, for example, you could do this:</p>
  <p class="code">with (mystruct)<br>
    {<br>
    &nbsp; &nbsp; a += other.x;<br>
    }</p>
  <p>Using <span class="inline2">with</span> changes the scope of the code to the given struct where you can manipulate the member variables at the struct&nbsp;scope. Note that in the example we also use the <a href="Instance_Keywords.htm"><span class="inline">other</span> keyword</a>. This works just like in an instance when using <span class="inline2">with</span>&nbsp;and will reference the instance (or struct) that is actually running the code block.</p>
  <p>A last way to access data in a struct is by using the struct accessor <span class="inline2"><a href="Accessors.htm#$">$</a></span>. This allows access to struct variables using strings, for both reading:&nbsp;</p>
  <p class="code">var _value = mystruct[$ "x"];</p>
  <p>and writing:&nbsp;</p>
  <p class="code">mystruct[$ "x"] = 200;</p>
  <p>If you need to use strings to access a struct variable, it is faster to <a href="../GML_Reference/Variable_Functions/variable_get_hash.htm">get its hash</a> and use that in <a href="../GML_Reference/Variable_Functions/struct_get_from_hash.htm">read</a>/<a href="../GML_Reference/Variable_Functions/struct_set_from_hash.htm">write</a> to the variable.</p>
  <p>When a struct is no longer required it can be removed from memory using the <a href="Language_Features/delete.htm"><span class="inline">delete</span></a> operator, which flags the struct as being able to be garbage collected. This is not strictly required as the <a class="tooltip" title="The garbage collector is an automated tool that is part of the game code and is used to remove certain things (like arrays and structs) from memory when they are no longer referenced in your code, without the need for you to explicitly remove them.">garbage collector</a> may do this automatically if the struct is no longer referenced in your code, but it is good practice to do so and we recommend it (for example, call <span class="inline">delete</span> in the <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">Clean Up event</a> of an instance to explicitly tell the garbage collector that an instance scope struct is to be deleted). Here is an example:</p>
  <p class="code">// Create event<br>
    mystruct =<br>
    {<br>
    &nbsp; &nbsp; pos_x : x,<br>
    &nbsp; &nbsp; pos_y : y,<br>
    &nbsp; &nbsp; count : 1000<br>
    };<br>
    <br>
    // Clean Up event<br>
    delete mystruct;
  </p>
  <h2 id="constr">Constructor Functions</h2>
  <p>You can also use <a href="Script_Functions.htm">script functions</a> or&nbsp;<a href="Method_Variables.htm">methods</a> to create functions that can be used to generate new structs, which requires the use of the <span class="inline">constructor</span> keyword for the function and the <a href="Language_Features/new.htm"><span class="inline">new</span></a> operator when creating a struct from such a function. See the following function:</p>
  <p class="code">function Vector2(_x, _y) <strong>constructor</strong><br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;x = _x;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;y = _y;<br>
    <br>
    &nbsp; &nbsp; static Add = function(_vec2)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x += _vec2.x;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y += _vec2.y;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;}<br>
    }
  </p>
  <p>Or,&nbsp;using the method variable syntax:</p>
  <p class="code">Vector2 = function(_x, _y) constructor<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;x = _x;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;y = _y;<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;static Add = function(_vec2)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x += _vec2.x;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y += _vec2.y;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;}<br>
    }
  </p>
  <p>Here we are creating a function called&nbsp;<span class="inline">Vector2</span> and telling <span data-keyref="GameMaker Name">GameMaker</span> that this is a function used for creating structs&nbsp;by adding the <span class="inline">constructor</span> keyword after its definition. You can then call this constructor&nbsp;function like this:</p>
  <p class="code">v2 = new Vector2(10, 10);</p>
  <p>The variable <span class="inline">v2</span> will now contain a struct with the variables <span class="inline">x</span> and <span class="inline">y</span> and the <a href="Functions/Static_Variables.htm">static</a>&nbsp;<a href="Method_Variables.htm">method variable</a> <span class="inline">Add</span>.</p>
  <p>You can also make use of optional arguments in your constructor functions:</p>
  <p class="code">function Vector2(<strong>_x = 0, _y = 0</strong>) constructor<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;x = _x;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;y = _y;<br>
    }</p>
  <p>This constructor&nbsp;will now use <span class="inline">0</span> for the <span class="inline">_x</span> and <span class="inline">_y</span> arguments if they are not specified when the function is called. This means that you can create a new <span class="inline">Vector2</span> struct without having to specify any arguments:</p>
  <p class="code">empty_vector = new Vector2();</p>
  <h2>Inheritance</h2>
  <p>Functions created this way will also support single <b>inheritance</b>, i.e.: you can create a constructor function that inherits data from another constructor function.</p>
  <p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;When working with inheritance, you cannot use method variables to define the constructor function, only script functions.</p>
  <p>For example, we created the&nbsp;<span class="inline">Vector2</span>&nbsp;constructor function above, so we can then use that as the "parent" for another constructor function, which we'll call&nbsp;<span class="inline">Vector3</span>:</p>
  <p class="code">function <strong>Vector3(_x, _y, _z) </strong><strong>:</strong><strong> Vector2(_x, _y) </strong>constructor<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;z = _z;<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;static Add = function( _vec3 )<br>
    &nbsp;&nbsp;&nbsp;&nbsp;{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x += _vec3.x;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y += _vec3.y;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z += _vec3.z;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;}<br>
    }
  </p>
  <p>As you can see, when defining the function we use a colon "<span class="inline">:</span>" to separate the new constructor from the parent&nbsp;constructor to be inherited from. The child constructor (<span class="inline">Vector3</span>) passes the <span class="inline">_x</span> and <span class="inline">_y</span> arguments into the parent (<span class="inline">Vector2</span>) constructor, which are used to run the parent's constructor first, after which the child's constructor is executed. This way the child constructor gets the parent's variables (<span class="inline">x</span> and <span class="inline">y</span>) and can also define its own (<span class="inline">z</span>).</p>
  <p>You can also pass values into the parent constructor, so that a certain child constructor always provides the same values to its parent constructor:</p>
  <p class="code">function item(damage) constructor<br>
    {<br>
    &nbsp;&nbsp; &nbsp;my_damage = damage;<br>
    }<br>
    <br>
    function basic_sword() : item(10) constructor {}<br>
    <br>
    var _basic_sword = new basic_sword();<br>
    show_debug_message(_basic_sword.my_damage); // Prints 10
  </p>
  <p>This means that the damage of a basic sword will always be <span class="inline">10</span>, since it passes that value to its parent constructor irrespective of what its own arguments might be.</p>
  <p>Note that assigning a default value to an argument in a child constructor will override the parent's default value for that argument. See the following example:</p>
  <p class="code">function parent(value = 10) constructor<br>
    {<br>
    &nbsp;&nbsp; &nbsp;show_debug_message(value);<br>
    }<br>
    <br>
    function child(value = 20) : parent(value) constructor<br>
    {<br>
    &nbsp;&nbsp; &nbsp;show_debug_message(value);<br>
    }<br>
    <br>
    var _child = new child();
  </p>
  <p>Both of these constructors will print <span class="inline">20</span> to the output log, as that was the default value for the argument set by the child constructor, and the same value was passed into the parent constructor.</p>
  <p>For more details on the <span class="inline">new</span> and <span class="inline">delete</span> operators, please see the following pages:</p>
  <ul class="colour">
    <li><a href="Language_Features/new.htm"><span class="inline">new</span></a></li>
    <li><span class="inline"><a href="Language_Features/delete.htm"><span class="inline">delete</span></a> </span></li>
  </ul>
  <h3>Checking Constructor Inheritance</h3>
  <p>You can use&nbsp;<span class="inline3_func"><a href="../GML_Reference/Variable_Functions/is_instanceof.htm">is_instanceof</a></span>&nbsp;to check if a struct belongs to the given constructor, or has the constructor as a parent constructor.</p>
  <div data-conref="../../assets/snippets/is_instanceof_example.hts">
  <p class="code">function item() constructor {}<br>
    <br>
    function potion() : item() constructor {}<br>
    <br>
    function enemy() constructor {}<br>
    <br>
    var _potion = new potion();<br>
    <br>
    show_debug_message(is_instanceof(_potion, potion)); // true (1)<br>
    show_debug_message(is_instanceof(_potion, item)); // true (1)<br>
    show_debug_message(is_instanceof(_potion, enemy)); // false (0)
  </p>
  <p>The above code shows three constructors:&nbsp;<span class="inline2">item</span>, <span class="inline2">potion</span> which is a child of <span class="inline2">item</span>, and <span class="inline2">enemy</span>, which is a separate constructor.</p>
  <p>It creates a struct from the <span class="inline2">potion</span> constructor. Using <span class="inline2">is_instanceof()</span>, we can check that the new struct:</p>
  <ul class="colour">
    <li>is a <span class="inline2">potion</span></li>
    <li>is an <span class="inline2">item</span></li>
    <li>is not an <span class="inline2">enemy</span></li>
  </ul>
  <p>This way you can check whether a struct "is" something, as <strong>a potion is an item</strong>, so it returns <span class="inline2">true</span> for both constructors. However if wouldn't be true the other way around: <strong>an item is not a potion</strong>.</p>

</div>
  <p>This functionality makes use of "static structs". See:&nbsp;<a href="Structs/Static_Structs.htm">Static Struct</a></p>
  <h2>String Output</h2>
  <p>One final thing to mention about structs is that you can change what is output to the console from them for debugging. By default, calling the function <a href="../GML_Reference/Debugging/show_debug_message.htm"><span class="inline">show_debug_message()</span></a>&nbsp;on a struct will output the contents of the struct (as shown above). However, it's possible to customise this message by adding a specifically named method to the struct called <span class="inline"><a id="A"></a>toString</span>:</p>
  <p class="code">mystruct =<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;a : 20,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;b : "Hello World",<br>
    <br>
    &nbsp; &nbsp; toString&nbsp;: function()<br>
    &nbsp; &nbsp; {<br>
    &nbsp; &nbsp; &nbsp; &nbsp; return "This stuct says " + b + ",&nbsp;" + string(a) + " times!";<br>
    &nbsp; &nbsp; }<br>
    }<br>
    show_debug_message(mystruct);
  </p>
  <p>Now when the <span class="inline">show_debug_message()</span> function is called, the <span class="inline">toString</span> method will be used to generate the output and - with the above example - you'll get:</p>
  <p class="code">This struct says Hello World, 20 times!</p>
  <p>Note that you can also call the <a href="../GML_Reference/Strings/Strings.htm"><span class="inline">string()</span></a>&nbsp;function on a struct reference and use that to display the contents - or the <span class="inline">toString</span> method - to the screen, or save it to a file, or whatever, eg:</p>
  <p class="code">var _str = string(mystruct);<br>
    draw_text(32, 32, _str);</p>
  <p>Finally, there are a number of&nbsp;runtime functions that you can use on structs to get the variables they contain&nbsp;as well as a few other things. You can find them in the following section:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Variable Functions</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="GML_Overview.htm">GML&nbsp;Overview</a></div>
        <div style="float:right">Next:&nbsp;<a href="Structs/Static_Structs.htm">Static Struct</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Structs
struct
constructor
-->
  <!-- TAGS
structs
-->

</body></html>