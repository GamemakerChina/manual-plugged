<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/main.css"><script>let str;removeHtml=function(t){return t=(t=(t=(t=t.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(t){return t.match(/(<([^>]+)>)/gi)},setTranslator=function(t,n,a){let e;e=a?t.attr(a):t.html();let l=n[removeHtml(e)];if(null!=l&&l.length){n=retHtml(e);let o=0;n&&n.forEach(function(t,n){var a=l.replace("{"+o+"}",t);l=a===l?l.replace("{}",t):a,o++}),a?t.attr(a,l):t.html(l)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){$(".header").length&&$(".header").append(`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`)},removeExtensionFromHash=function(t){return t.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")},$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption,blockquote").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption,.expandtext").each(function(){setTranslator($(this),json)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../..",gTopicId="8.2.1.1.1_1"</script><script type="text/javascript" src="../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Constants</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../assets/css/default.css" type="text/css"><script src="../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Page explaining the different GML constants"><meta name="rh-index-keywords" content="Constants,macro,enum,pointer_invalid,pointer_null,undefined,NaN,infinity,true,false,pi"><meta name="search-keywords" content="constants,macros,enums,macro,enum"><meta name="brsnext" value="GameMaker_Language/GML_Overview/Data_Types.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/event_data.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Constants"><span>Constants</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">Constants</span></h1><p>A constant is a type of variable that is set once at the start of the game and then never changes. In fact, constant values&nbsp;<em>cannot be changed after they have been declared</em>. This makes them ideal for holding values that are used throughout the game to identify special data.</p><p>In the GameMaker Language there are two types of user-defined constants:&nbsp;<strong>macros</strong>&nbsp;and&nbsp;<strong>enums</strong>, both of which are explained below. Also note that any value that is always the same is classed as a constant, regardless of the <a href="../Data_Types.htm">data type</a>, for example, a string or the number 3.</p><p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;The GameMaker Language also has a number of built-in constant values that are used to identify specific things. These are outlined on the appropriate pages for the runtime functions that require them in the <a href="../../GML_Reference/GML_Reference.htm">GML Reference</a> section.</p><h2 id="h">Macros</h2><p>While not exactly variables, macros are similar to them in how they are used, i.e.: they are named values that you can use throughout your code to replace <a class="tooltip" title="In computer programming, the term hard-coded is used to describe code that is considered fixed and not likely to change. Hardcoded features are built into hardware or software in such a way that they cannot be modified later on. For example, if you are making a game and 'hard-code' the player health to 10, then you would be using the value 10 throughout the game code rather than using a variable.">hard-coded</a> values. Basically, a macro is a named variable that holds an expression.&nbsp;You can define your own macros using the <a href="../Script_Functions.htm">Script Editor</a> and then use them in your code and actions as if they were regular variables, with the one difference being that they <i>can't be changed in the game</i>.</p><p>The syntax structure for a macro is as follows:</p><p class="code">#macro&nbsp;<i>&lt;NAME&gt;</i>&nbsp;<i>&lt;VALUE&gt;</i></p><p>For example, say you define the following macro "<span class="inline">TOTAL_WEAPONS</span>":</p><p class="code">#macro TOTAL_WEAPONS 10</p><p class="note_heading">Macro syntax...</p><p class="note">The syntax shown above must be used correctly to define macros. You cannot use an equal sign (like in variables) or put a semicolon at the end (like in a regular statement). Doing so will cause your macro definition to become invalid.<br><br>For example, this is not the correct way to define a macro:<br><br><span class="inline2">#macro TOTAL_WEAPONS = 10;</span><br><br>Removing the equal sign and colon will make it a valid macro definition.<br><br><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;The recommended GML naming conventions recommend <span class="inline2">UPPERCASE_NAMING</span> for constants, however you can use lower case or any other naming conventions you like.</p><p>You could then use this in your code like this:</p><p class="code">pos++;<br><br>if (pos&nbsp;&gt;= TOTAL_WEAPONS)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;pos = 0;<br>}</p><p>Note that you would not be able to change the constant's value, so code like this will cause the game to crash:</p><p class="code">TOTAL_WEAPONS = 11;</p><p>You can define a macro anywhere in your code or in a script&nbsp;and it will be <i>pre-compiled</i> and included in your game as if it was there from the start, but we recommend that you create a dedicated script asset and define all your macros in there. It will be easier to organise and debug later!</p><h3>Expression As Macro</h3><p>If you need the value of a macro to change at run-time then you should probably make it a <a href="Global_Variables.htm">global variable</a>, since these can be changed from code during a game, unless you set the macro to be a&nbsp;<a href="../Runtime_Functions.htm">runtime&nbsp;function</a>&nbsp;or any <a href="../Expressions_And_Operators.htm">expression</a>. By setting the macro to a function/expression it means that this function/expression will be called every time you use the macro. For example:</p><p class="code">#macro COL&nbsp;make_colour_hsv(irandom(255), 255, 255)</p><p>You would then call this macro something like this:</p><p class="code">image_blend = COL;</p><p>Using this code will make the image blend a different colour every time the macro is used. It is worth noting that you can also split macros over multiple lines using the <span class="inline"><span class="inline">\</span></span> character to show where the line breaks are. An example would be something like:</p><p class="code">#macro HELLO show_debug_message("Hello" + \<br>string(player_name) + \<br>", how are you today?");</p><p>This is purely cosmetic, in that splitting a macro like this will have no effect over the result of the final macro when used, and is simply to provide support for multi-line text on macros that have longer lines of code.</p><h3 id="h1">Configuration Override</h3><p>One very important feature of macros is that they can be defined for use with specific&nbsp;<a href="../../../Settings/Configurations.htm">Configurations</a>, meaning you can override the value of a macro when running in a given configuration.</p><p>For example, say you have a configuration for Android ads and another for iOS ads, then you could define a single macro to hold the required app ID value, and override it for each configuration:</p><p class="code">#macro AD_ID ""<br>#macro Android:AD_ID "com.yoyogames.googlegame"<br>#macro iOS:AD_ID "com.yoyogames.appstoregame"</p><p>Configurations do not necessarily have to be named after a platform. You might e.g. also have a specific configuration for a demo version of your game:&nbsp;</p><p class="code">#macro&nbsp;DemoVersion:AD_ID ""</p><p>As you can see, you give the config name first then a colon <span class="inline">:</span> and then the macro name and override value. Note that you cannot have any white-space between the colon <span class="inline">:</span> and either the config name nor the macro name otherwise you will get an error.</p><p>Macro overrides are inherited by child configurations. Say you have the following configuration set-up:</p><p><img class="center" src="../../../assets/Images/Settings/Configs_Children.png">Here, any macro overrides set for <span class="inline2">MobileAds</span> will be inherited by <span class="inline2">MobileNoAds</span>, and you can override an inherited value by setting a macro for that child configuration.</p><h2 id="enumhead">Enums</h2><p>An enum is an "enumerator"; it essentially permits you to create your own limited data type with a list of constant values. They have the following structure:</p><p class="code">enum <i>&lt;NAME&gt;</i><br>{<br><i>&nbsp; &nbsp; &lt;MEMBER&gt;</i> [= <i>&lt;VALUE&gt;</i>],<br><i>&nbsp; &nbsp; &lt;<i>MEMBER</i>&gt;</i> [= <i>&lt;<i>VALUE</i>&gt;</i>],<br>&nbsp; &nbsp; // etc...<br>}</p><p>In the following example, we create an enum for the colours of the rainbow and assign it various constants and default values:</p><p class="code">enum RAINBOW<br>{<br>&nbsp; &nbsp; RED,<br>&nbsp; &nbsp; ORANGE,<br>&nbsp; &nbsp; YELLOW,<br>&nbsp; &nbsp; GREEN,<br>&nbsp; &nbsp; BLUE,<br>&nbsp; &nbsp; INDIGO,<br>&nbsp; &nbsp; VIOLET<br>}</p><p>The enum entries can only be <b>integer numbers</b> or <b><a class="tooltip" title="An expression is a combination of one or more constants, variables, operators, and/or functions that are interpreted according to particular rules of precedence and association to return another value. A simple expression would be (5 + 5), which returns 10.">expression</a><span class="glossextra">s</span> with previous enums that evaluate to an integer number</b>, and by default are numbered from 0 upwards, so our example given above would default to <span class="inline">RED = 0</span>, <span class="inline">ORANGE = 1</span>, <span class="inline">YELLOW = 2</span>, etc...</p><p>You can also assign values to the enum variables at the time of creation:</p><p class="code">enum&nbsp;ENUM_TEST<br>{<br>&nbsp; &nbsp; VAL = 10<br>}<br><br>enum RAINBOW<br>{<br>&nbsp; &nbsp; RED = 5,<br>&nbsp; &nbsp; ORANGE = 5 * 2,<br>&nbsp; &nbsp; YELLOW = 15,<br>&nbsp; &nbsp; GREEN = 20,<br>&nbsp; &nbsp; BLUE = 25,<br>&nbsp; &nbsp; INDIGO = 30,<br>&nbsp; &nbsp; VIOLET = 35 * ENUM_TEST.VAL<br>}</p><p>Notice in the above example we use another enum to create an expression for "VIOLET". This only works if the enum being referenced was created <i>before</i> the enum that is using it in an expression, but it will not work for variables or functions, since the enum value must be able to be evaluated as a constant when the project is <a class="tooltip" title="Compiling is when GameMaker takes your code and collects it together in such a way as to create an executable package that will run on a device as a game.">Compiling</a>. Also note that all enum values evaluate to <b>integer</b> values, and when you create your own you should be aware that <i>only integer values are permitted</i> for enums to work. This value can be any integer number that a floating point double precision number can represent, including negative values.</p><p>To later access the value within a given enum type, you can use the point <span class="inline">"."</span> method, like this:</p><p class="code">variable = &lt;ENUM_NAME&gt;.&lt;<em>ENUM_MEMBER</em>&gt;;</p><p>As an example, let's use the "<span class="inline">RAINBOW</span>" enum that we created in the code above:</p><p class="code">colour_value = RAINBOW.GREEN * RAINBOW.RED;</p><p>The <span class="inline">colour_value</span> variable would now hold the value 100 (20 * 5).</p><p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;You <em>cannot</em> modify the values for any enum constant after it has been created, much the same as you can't modify macros after they have been created.</p><p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;Enum values are stored as int64s, so running&nbsp;<span class="inline2"><a href="../../GML_Reference/Variable_Functions/is_real.htm">is_real</a></span>&nbsp;on them will return <span class="inline2">false</span>.</p><h2>Built-In Constants</h2><p>The following table shows a list of the built-in constants that can be returned by some functions and operations in your projects:</p><table><tbody><tr><th>Constant</th><th>Description</th></tr><tr><td><span class="inline">pointer_null</span></td><td>This constant indicates that the pointer is not pointing to anything meaningful (the same as<span>&nbsp;</span><span class="inline">NULL</span><span>&nbsp;</span>in C++ or <span class="inline">null</span> in C#).<br>This value is <a class="tooltip" title="A value that is considered &quot;false&quot; when used as a boolean, for example in an if() condition.">falsy</a>.</td></tr><tr><td><span class="inline">pointer_invalid</span></td><td>This constant simply means that the value is not a valid pointer</td></tr><tr><td><span class="inline">undefined</span></td><td>This constant is returned when a function has to return&nbsp;<em>something</em>&nbsp;but has no appropriate or "correct" value to return.<br>This value is <a class="tooltip" title="A value that is considered &quot;false&quot; when used as a boolean, for example in an if() condition.">falsy</a>.</td></tr><tr><td><span class="inline">NaN</span></td><td><span>This constant that can be returned when the compiler cannot evaluate the results of an operation as a number - for example, 0 / 0 cannot be defined as a real number, and is therefore represented by&nbsp;</span><span class="inline">NaN</span></td></tr><tr><td><span class="inline">infinity</span></td><td><span class="inline"><span data-highlight-container="true"><span data-highlight="true"><font face="open_sansregular"><span style="font-size:18px;font-weight:400">This constant&nbsp;</span></font></span></span></span> <span>refers to a number that is considered infinite, such as the result you would get when dividing any floating point value by zero, e.g.&nbsp;1.0/0.</span></td></tr><tr><td><span class="inline">true</span></td><td>This constant represents the value 1, which is what <span data-keyref="GameMaker Name">GameMaker</span> will evaluate as a boolean "true" (note that any value equal to or greater than 1 will evaluate as <span class="inline">true</span>).</td></tr><tr><td><span class="inline">false</span></td><td>This constant represents the value 0, which is what <span data-keyref="GameMaker Name">GameMaker</span> will evaluate as a boolean "false" (note that any value less than or equal to 0 will evaluate as <span class="inline">false</span>).</td></tr><tr><td><span class="inline">pi</span></td><td>This constant represents the value of pi: 3.141592653589793280..., although the exact value will depend on various factors like the OS or the platform being targeted.</td></tr></tbody></table><p>See <a href="../../../Additional_Information/Type_Tables.htm#h">Equality Table</a>&nbsp;for information on equality comparisons for a few of the constants listed above.</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back:&nbsp;<a href="../Variables_And_Variable_Scope.htm">Variables And Variable Scope</a></div><div style="float:right">Next:&nbsp;<a href="Local_Variables.htm">Local Variables</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>