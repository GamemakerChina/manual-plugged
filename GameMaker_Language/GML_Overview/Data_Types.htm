<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../assets/import/main.css"><script>let str;removeHtml=function(e){return e=(e=(e=(e=e.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(e){return e.match(/(<([^>]+)>)/gi)},setTranslator=function(e,a,t){let s;s=t?e.attr(t):e.html();let o=a[removeHtml(s)];if(null!=o&&o.length){a=retHtml(s);let n=0;a&&a.forEach(function(e,a){var t=o.replace("{"+n+"}",e);o=t===o?o.replace("{}",e):t,n++}),t?e.attr(t,o):e.html(o)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var e=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(e):($(".topic-header").append(e),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(e){return e.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={"A boolean is simply a value that can either be true or false.&nbsp;Note that currently&nbsp;{}GameMaker{}&nbsp;will interpret a real number equal to or below 0.5 as a {}false{} value, and any real number greater than 0.5 as being {}true{}. This does&nbsp;{}not{}&nbsp;mean however that you should be checking 1 and 0 (or any other real number) for {}true{} and {}false{}, as you are also provided with the&nbsp;{}constants{}&nbsp;{}true{} and {}false{}, which should always be used in your code to prevent any issues should real boolean data types be added in a future update.":"布尔值只是一个可以为 true 也可以为 false 的值。请注意，目前{}GameMaker{}会将等于或低于 0.5 的实数解释为{}false{}值，将任何大于 0.5 的实数解释为{}true{}。但这{}并不{}意味着您应该检查 1 和 0(或任何其他实数)中的{}true{}和{}false{}，因为我们还提供了{}常量{}{}true{}和{}false{}，应始终在代码中使用它们，以防止在将来的更新中添加实际布尔数据类型时出现任何问题。","A boolean is simply a value that can either be&nbsp;{}true{}&nbsp;or&nbsp;{}false{}. Note that currently&nbsp;{}GameMaker{}&nbsp;will interpret a real number equal to or below 0.5 as a&nbsp;{}false{}&nbsp;value, and any real number greater than 0.5 as being&nbsp;{}true{}. This does&nbsp;{}not{}&nbsp;mean however that you should be checking 1 and 0 (or any other real number) for true and false, as you are also provided with the&nbsp;{}constants{}&nbsp;{}true{}&nbsp;and&nbsp;{}false{}&nbsp;which should always be used in your code to prevent any issues should real boolean data types be added in a future update.":"布尔值可以是 {}true{} 或 {}false{}。注意，当前 {}GameMaker{} 将等于或低于0.5的实数解释为 {}false{} 值，而任何大于0.5的实数将解释为 {}true{}。但是 {}不是{} 意味着你应该检查1和0(或任何其他实数)是否为真和假，因为你还提供了 {} 常量{} {}true{} 和 {}false{} 这应该总是在你的代码中使用在将来的更新中添加真实的布尔数据类型，以防止出现任何问题。","A handle contains a reference to one of the following types of resources:":"句柄包含对以下资源类型之一的引用：","A handle is a 64-bit integer, where the first 32 bits contain information about the type of resource, and the next 32 bits contain the index number of the resource.":"句柄是一个64位整数，其中前32位包含有关资源类型的信息，后32位包含资源的索引号。","A hexadecimal value can also begin with a hash/pound symbol ({}#{}), however when written this way, its value will not equal a similar hex value written using a previously shown format ({}${} or {}0x{}). This is due to the way colours are interpreted in GML, which required the format for hash/pound hex values to be changed so that CSS colours could be written in an {}#RRGGBB{} format. For more information, read {} {}.":"十六进制值也可以以散列/磅符号({}#{})开始，但是以这种方式编写时，其值将不等于使用先前显示的格式({}${}或{}0x{})编写的类似十六进制值。这是由于颜色在GML中的解释方式，这需要更改哈希/磅十六进制值的格式，以便CSS颜色可以以{}#RRGGBB{}格式编写。有关详细信息，请阅读{}{}。","A hexadecimal value can also begin with a hash/pound symbol ({}#{}), however when written this way, its value will not equal a similar hex value written using a previously shown format ({}${} or {}0x{}). This is due to the way colours are interpreted in GML, which required the format for hash/pound hex values to be changed so that CSS colours could be written in an {}#RRGGBB{} format. For more information, read {}Hex Colours{}.":"十六进制值也可以以哈希/磅符号({}#{})开头，但是，以这种方式写入时，其值将不等于使用先前显示的格式({}${}或{}0x{})写入的类似十六进制值。这是由于GML 中解释颜色的方式，这要求更改哈希/磅十六进制值的格式，以便可以以{}#Rrggbb{}格式写入CSS颜色。有关详细信息，请阅读{}十六进制颜色{}。","A hexadecimal value can also begin with a hash/pound symbol ({}#{}), however when written this way, its value will not equal a similar hex value written using a previously shown format ({}${} or {}0x{}). This is due to the way colours are interpreted in GML, which required the format for hash/pound hex values to be changed so that CSS colours could be written in an {}#RRGGBB{} format. For more information, see&nbsp;{}Hex Colours{}.":"十六进制值也可以以井号/井号({}#{}) 开头，但是以这种方式编写时，其值将不等于使用先前显示的格式({}${}或{}0x{})。这是由于 GML 中解释颜色的方式造成的，GML 需要更改哈希/磅十六进制值的格式，以便可以以{}#RRGGBB{}格式写入 CSS 颜色。如需了解更多信息，请参阅{}十六进制颜色{}。",'A pointer is a data type that "points" to a memory location. You cannot do operations on a pointer and it is used only for some very specific functions, like getting a texture or buffer address from memory for another function. For examples of functions that return a pointer you can see&nbsp;{}{}buffer_get_address(){}{}&nbsp;or&nbsp;{}{}sprite_get_texture(){}{}.':"指针是一种“指向”内存位置的数据类型。你不能对指针进行操作，它只用于一些非常特定的函数，比如为另一个函数从内存中获取纹理或缓冲区地址。对于返回指针的函数示例，您可以看到 {}{}buffer_get_address(){}{} 或 {}{}sprite_get_texture(){}{}。",'A pointer is a data type that "points" to a memory location. You cannot do operations on a pointer in&nbsp;{}GameMaker{} and it is used only for some very specific functions, like getting a texture or buffer address from memory for another function. For examples of functions that return a pointer you can see&nbsp;{}{}buffer_get_address{}{} or {}{}sprite_get_texture{}{}.':'指针是一种"指向"内存位置的数据类型。您无法在{}GameMaker{}中对指针进行操作，它仅用于某些非常特定的函数，例如从内存中获取另一个函数的纹理或缓冲区地址。有关返回指针的函数示例，您可以查看{}{}buffer_get_address{}{}或{}{}sprite_get_texture{}{}。',"A reference created with&nbsp;{}{}ref_create{}{}":"使用{}{}ref_create{}创建的引用","All the underscores used in the literals shown above only make them easier to read, and don't change anything about their functionality.":"上面显示的文字中使用的所有下划线只会使它们更易于阅读，并且不会更改其功能的任何内容。",'An "int64" is a 64-bit integer that can be created using {}{}int64(){}{} (by passing in a non-64-bit real number) or when reading a {}buffer_u64{} value from a {}buffer{}.':'"int64"是一个64位整数，可以使用{}{}int64(){}{}(通过输入非64位实数)或从{}缓冲区{}读取{}buffer_u64{}值来创建。','An "int64" is a 64-bit integer that can be created using&nbsp;{}{}int64{}{} (by passing in a non-64-bit real number) or when reading a {}buffer_u64{} value from a {}buffer{}.':'"int64"是一个 64 位整数，可以使用{}{}int64{}{}(通过传入非 64 位实数)或从{6}buffer{7}读取{}buffer_u64{}的值。','An enum is an "enumerator", and it essentially permits you to create your own limited data type with a list of constant values. Enums are explained in depth on the page for {}Constants{}.':'枚举是"枚举器(enumerator)"，它基本上允许您使用常量值列表创建自己的有限数据类型。{}常量{}的页面上详细说明了枚举。',"Any bitwise operations, even when run on non-64-bit values, will always return a 64-bit integer back.":"任何按位操作，即使在非64位值上运行，也将始终返回64位整数。","Any bitwise operations, even when run on non-64-bit values, will always return a 64-bit integer.":"任何按位运算，即使在非 64 位值上运行，也始终返回 64 位整数。",Assets:"","Assets, such as Objects, Sprites, Rooms, etc.":"资源，如对象、精灵、房间等。",'Before continuing, let\'s just briefly explain what we mean by "data types". When you create a variable it can be used to hold information, and when you call a&nbsp;function, it can also stored returned information. However this information can come in various "flavours" -&nbsp;for example, it can be a {}real number{} or it can be a {}string{}. These different types of values being used are called&nbsp;{}data types{}&nbsp;and when using&nbsp;the GameMaker Language they can be any of the following:':'在继续之前，我们先简单解释一下"数据类型"是什么意思。创建变量时，它可用于保存信息，调用函数时，它还可以存储返回的信息。但是，此信息可以有多种"风格"-例如，它可以是{}实数{}或者可以是{}字符串{}。使用的这些不同类型的值称为{}数据类型{}，当使用GameMaker语言时，它们可以是以下任意值：','Before continuing, let\'s just briefly explain what we mean by "data types". When you create a variable it can be used to hold information, and when you call a&nbsp;function, it can also stored returned information. However, this information can come in various "flavours" -&nbsp;for example, it can be a {}real number{} or it can be a {}string{}. These different types of values being used are called&nbsp;{}data types{}&nbsp;and when using&nbsp;the GameMaker Language they can be any of the following:':'在继续之前，我们先简要解释一下"数据类型"的含义。当你创建一个变量时，它可以用来保存信息，当你调用一个函数时，它也可以存储返回的信息。不过，此信息可以有多种"风格" - 例如，它可以是{}实数{}，也可以是{}字符串{}。使用的这些不同类型的值称为{}数据类型{}，使用 GameMaker 语言时，它们可以是以下任意类型：',"Data Structures":"数据结构","Data Structures ":"数据结构","Data Types":"数据类型","Divisions on int64 values will also return integers (e.g.: {}int64(5) / int64(2) = 2{}).":"int 64值的除法也将返回整数(例如：{}int 64(5 )/ int 64(2 )= 2{}。","For example, the following decimal values can be expressed as hexadecimal as shown:":"例如，以下十进制值可以表示为十六进制，如图所示：","For example, the following two are not equal:":"例如，以下两项不相等：","For them to refer to the same decimal value, you would have to swap the first two and last two characters:":"要使它们引用相同的十进制值，必须交换前两个和最后两个字符：",'If you convert a handle to a string or print it as an output, you will see a string in the format {}"ref &lt;type&gt; &lt;id&gt;"{}, e.g. {}"ref ds_list 1"{}.':'如果您将句柄转换为字符串或将其作为输出打印，您将看到格式为{}"ref type id"{}的字符串，例如{}"ref ds_list 1"{}。','If you convert a handle to a string or print it as an output, you will see a string in the format&nbsp;{}{}"ref&nbsp;&lt;type&gt;&nbsp;&lt;id&gt;"{}{}, e.g. {}"ref ds_list 1"{}.':'如果将句柄转换为字符串或将其打印为输出，您将看到格式为{}{}"ref &lt;type&gt; &lt;id&gt;"{}{}的字符串，例如{}"ref ds_list 1"{}。',"If you convert the handle to a number (using&nbsp;{}{}real{}{}&nbsp;or&nbsp;{}{}int64{}{}), you get the index number.":"如果将句柄转换为数字(使用{}{}real{}{}或{}{}int64{}{})，您将获得索引号。","In previous section&nbsp;we&nbsp;covered {}variables and their scoping rules{} but little has been said about the different {}data types{} that a variable can store. Therefore this section explains the different types and what they can be used for.":"在前面的章节中，我们介绍了{}变量及其范围规则{}，但对于变量可以存储的不同{}数据类型{}却鲜有说明。因此，本节将说明不同的类型以及它们可用于哪些目的。","Note that since {}NaN{} is not a number, it cannot be compared to itself, so&nbsp;comparisons such as {}NaN == NaN{} will return {}false{}. Same goes for an array comparison such as this:":"请注意，由于{}NaN{}不是数字，因此无法将其与自身进行比较，因此比较(例如{}NaN==NaN{})将返回{}false{}。对于数组比较(例如：","Note that the {}infinity{} constant is equal to itself, so {}infinity == infinity{} will return {}true{}.":"请注意，{}无穷{}常量等于其自身，因此{}infinity==infinity{}将返回{}true{}。","Note that the {}infinity{} constant is equal to itself, so {}infinity == infinity{}&nbsp;will return {}true{}.":"请注意，{}infinity{}常量等于其自身，因此{}infinity == infinity{}将返回{}true{}。","Note that while created variables in&nbsp;{}GameMaker{}&nbsp;are all stored as double-precision floating point numbers or integers, you can still use other formats when dealing with extensions. These can be passed into {}GameMaker{} from an extension and then checked using the appropriate&nbsp;{}is_*(){}&nbsp;function, a list of which can be found {}here{}.":"请注意，虽然{}GameMaker{}中创建的变量全部存储为双精度浮点数或整数，但在处理扩展时仍可使用其他格式。这些信息可以从扩展名传递到{}GameMaker{}，然后使用相应的{}is_*(){}函数进行检查，{}此处可以找到列表{}。","Object Instances":"对象实例","Particle Systems":"粒子系统","Real numbers are any value that is not a string, nor any of the other possible data types. So, 124, 45639.566546456, 0, -45.5 etc... are all examples of real numbers. All real numbers are stored as 64-bit double-precision floating point values (or integer values), and the compiler will optimise where possible (for example, 0.0 will be optimised to the integer value of 0).":"实数是任何不是字符串，也不是任何其他可能的数据类型的值。因此，124, 45639.566546456,0,-45.5等...都是实数的例子。所有实数都存储为64位双精度浮点值(或整数值)，编译器将在可能的情况下进行优化(例如，0.0将被优化为0的整数值)。","Real numbers are any value that is not a string, nor any of the other possible data types. So, 124, 45639.566546456, 0, -45.5, etc. are all examples of real numbers. All real numbers are stored as 64-bit double-precision floating point values (or integer values), and the compiler will optimise where possible (for example, 0.0 will be optimised to the integer value of 0).":"实数是除字符串以外的任何值，也不是任何其他可能的数据类型。所以，124、45639.566546456、0、-45.5等都是实数的例子。所有实数都存储为 64 位双精度浮点值(或整数值)，编译器将尽可能进行优化(例如 0.0 将优化为整数值 0)。",'References for data structures and assets (such as objects, sprites, etc.) are stored as int64s, where the first 32 bits contain information about the type of resource, and the next 32 bits contain the ID for the resource. See the next section "Handles" for more info.':'数据结构和资产(例如对象、精灵等)的引用存储为 int64，其中前 32 位包含有关资源类型的信息，接下来的 32 位包含资源的 ID。有关详细信息，请参阅下一节"句柄"。','References for data structures and assets (such as objects, sprites, etc.) are stored as int64s, where the first 32 bits contain information about the type of resource, and the next 32 bits contain the ID for the resource. See the next section "ref" for more info.':'数据结构和资产(例如对象、精灵等)的引用被存储为int64，其中前32位包含有关资源类型的信息，接下来的32位包含资源的ID。更多信息请参见下一节"ref"。',"Related Pages":"相关内容","Script Functions":"脚本函数",'The "{}Any{}" data type can be found on many pages in the manual, e.g. {}in the arguments,{}&nbsp;or as a {}return value{}.&nbsp;It indicates that {}any type of value{} is accepted, or can be returned.':"“{}Any{}”数据类型可以在手册的许多页面上找到，例如{}在参数中{}，或作为{}返回值{}。它表示接受或返回{}任何类型的值{}。",'The above code shows two binary values, {}0010{} and {}0100{}, being used in a {}bitwise "OR" operation{}.':'上面的代码显示了两个二进制值，{}0010{} 和 {}0100{}，用于{}逐位"或"运算{}。',"The constant {}infinity{} refers to a number that is considered infinite, such as the result you would get when dividing any floating point value by zero, eg: 1.0/0.":"常量{}infinity{}是指被视为无穷大的数字，例如将任何浮点值除以零时得到的结果，例如：1.0/0。","The constant&nbsp;{}infinity{}&nbsp;refers to a number that is considered infinite, such as the result you would get when dividing any floating point value by zero, eg: 1.0/0.":"常数 {}无穷大{} 指的是一个被认为是无穷大的数字，例如，将任何浮点值除以零时得到的结果，例如：1.0/0。","The type information in a handle is used to make sure that you pass the correct type of resource into a function (e.g. making sure you pass a DS list into&nbsp;{}{}ds_list_add{}{} instead of a DS map, grid or something else).":"句柄中的类型信息用于确保将正确类型的资源传递到函数中(例如，确保您将DS列表传递到{}{}ds_list_add{}{}，而不是DS映射、网格或其他内容)。",'There is also a function to check if a value is a pointer (see "{}Checking Data Types{}", below) and a function to convert a value into a pointer:':'还有一个函数用于检查值是否为指针(请参阅下面的"{}检查数据类型{}")，以及一个函数用于将值转换为指针：',"This can be used in places where a 64-bit integer is strictly required, or when you want to work with {}bit-shifting{} and need those 64 bit positions.":"这可用于严格要求64位整数的位置，也可用于要使用{}位移{}并需要这些64位位置的位置。","This constant indicates that the pointer is not pointing to anything meaningful (the same as {}NULL{} in C++ or {}null{} in C#). This value is {}falsy{}.":"这个常数表示指针没有指向任何有意义的东西（与C++中的{}NULL{}或C#中的{}null{}相同）。这个值是{}falsy{}。","This constant simply means that the value is not a valid pointer":"此常量仅表示该值不是有效的指针","Type Tables":"类型表","Underscores in Literals":"按原义加下划线","Variable Functions":"变量函数","When dealing with any value that is not an integer, you may experience slight rounding errors due to the nature of floating point maths. For more information on this and other number related functions, please see:&nbsp;{}GML Reference - Number Functions{}.":"处理任何非整数值时，由于浮点数学的性质，您可能会遇到轻微的舍入错误。有关此函数和其它与数字相关的函数的详细信息，请参阅：{}GML 参考-数字函数{}。","You can also find arithmetic type tables that show the results of different operations using mixed variable data types here:":"您还可以在此处找到显示使用混合变量数据类型的不同操作结果的算术类型表格：","You can check the data type of any variable using the functions listed on the following the page:":"可以使用以下页面中列出的函数检查任何变量的数据类型：",'You can convert a string that\'s correctly formatted as&nbsp;{}{}"ref&nbsp;&lt;type&gt;&nbsp;&lt;id&gt;"{}{}&nbsp;back to a handle using the&nbsp;{}{}handle_parse{}{}&nbsp;function.':'您可以使用{4}{5}handle_parse{6}{7}函数将正确格式为{}{}"ref &lt;type&gt; &lt;id&gt;"{}{}的字符串转换回句柄。',"You can convert any real number into an implicitly boolean value using the following function:":"您可以使用以下函数将任何实数转换为隐式布尔值：","You can use underscores ({}_{}) in numeric literals, such as real numbers, hexadecimal and binary values. These are ignored during compilation and only serve as visual separators. Here are a few examples:":"您可以在数字文字中使用下划线({}_{})，例如实数、十六进制和二进制值。这些在编译期间被忽略，仅用作视觉分隔符。这里有一些例子：","You can use underscores ({}_{}) in numeric literals, such as real numbers, hexadecimal and binary values. These are ignored during compilation and only serve as visual seperators. Here are a few examples:":"您可以在数字文字中使用下划线 ({}_{})，例如实数、十六进制值和二进制值。它们在编译过程中被忽略，仅用作视觉分隔符。以下是几个例子：","You can write binary literals with the {}0b{} prefix:":"您可以编写带有前缀 {}0b{} 的二进制文字：","You get a handle when you create a new resource (with a {}_create(){} function) or reference an existing resource in your code (like referencing an object, getting an instance through a function, etc.).":"当你创建一个新的资源(使用{}_create(){}函数)或在代码中引用一个现有的资源(比如引用一个对象，通过一个函数获取一个实例，等等)时，你会得到一个句柄。","You may also use (and get returned) the following built in constants when using pointers:":"使用指针时，还可以使用(并返回)以下内置常量：","You may also use (and get returned) the following built-in constants when using pointers:":"使用指针时，您还可以使用(并返回)以下内置常量：",bool:"bool 布尔","{}A method variable is a variable that has been assigned a function and it can be used exactly the same as you would use a GML runtime function. For more detailed information, please see the section&nbsp;{}Method Variables{}.{}":"{}方法变量是已分配函数的变量，可以使用与使用GML 运行时函数完全相同的变量。有关详细信息，请参阅{}方法变量{}一节。{}",'{}A string is simply any text that has been placed in quotation marks "...". You can perform certain operations on strings, like add two strings together to create a longer string (concatenation) and you can also change the string properties and even extract real numbers from it. For more information on strings and the string functions see:&nbsp;{}GML Reference - Strings{}.{}':'{}字符串只是放在引号"..."中的任何文本。您可以对字符串执行某些操作，如将两个字符串添加到一起以创建更长的字符串(连接)，还可以更改字符串属性，甚至从中提取实数。有关字符串和字符串函数的详细信息，请参阅：{}GML 参考-字符串{}。{}','{}A string is simply any text that has been placed in quotation marks {}"..."{}. You can perform certain operations on strings, like add two strings together to create a longer string (concatenation) and you can also change the string properties and even extract real numbers from it. For more information on strings and the string functions see:&nbsp;{}GML Reference - Strings{}.{}':'{}字符串就是放在引号{}"..."{}中的任何文本。您可以对字符串执行某些操作，例如将两个字符串添加在一起以创建更长的字符串(串联)，您还可以更改字符串属性，甚至从中提取实数。如需了解有关字符串和字符串函数的更多信息，请参阅：{}GML 参考 - 字符串{}。{}','{}A struct (sometimes called a "lightweight object") is a raw data structure that acts as a container for variables of all data types. You assign a struct to a variable and in the struct you can then define further variables and these can then be read from or written to as required. For more detailed information on structs, please see the section&nbsp;{}GML Overview - Structs{}.{}':'{}结构(有时称为"轻量级对象")是一种原始数据结构，用作所有数据类型变量的容器。将结构指定给变量，然后在结构中定义进一步的变量，然后可以根据需要读取或写入这些变量。有关结构的详细信息，请参阅{}GML 概述-结构{}一节。{}','{}An array is a special data type that can be used to hold multiple values. You assign the array to a variable, and then "fill in" different indices of the array with values. This array can then be passed through to scripts and functions on a pass-by-reference basis, however should you modify the passed array, it will then become a copy of the original array and so will need to be returned back to the original variable for the array to be updated. For more information on arrays, please see:&nbsp;{}GML Overview - Arrays{}.{}':'{}数组是一种特殊的数据类型，可用于保存多个值。将数组指定给变量，然后使用值"填充"数组的不同索引。然后，可以在逐个引用的基础上将此数组传递给脚本和函数。但是，如果修改传递的数组，它将成为原始数组的副本，因此需要返回到原始变量以更新数组。有关阵列的详细信息，请参阅：{}GML 概述-阵列{}。{}','{}An undefined value (also known as a "null" value) is one where an expression doesn\'t have a correct value, although it is syntactically correct, and so must return&nbsp;{}something{}. For example, say you have a {}DS map{} and use the function {}{}{}ds_map_find_value{}{}{}. Now, what happens when the map does not have the value being looked for? Well, since the function is correctly formatted, and the issue is that no such value exists, then it would return the&nbsp;constant {}undefined{}, and you can check for this constant as you would check for {}true{} or any other value.{}':'{}未定义值(也称为"空"值)是指表达式没有正确值的值，尽管它在语法上是正确的，因此必须返回{}某些内容{}。例如，假设您有一个{}DS 地图{}并使用函数{}{}{}ds_map_find_value{}{}{}。现在，当地图没有要查找的值时会发生什么？好吧，由于该函数的格式正确，而且问题是不存在这样的值，因此它将返回常量{}undefined{}，您可以像检查{}true{}或任何其他值一样检查此常量。其他值。{}','{}An undefined value (also known as a "null" value) is one where an expression doesn\'t have a correct value, although it is syntactically correct, and so must return&nbsp;{}something{}. For example, say you have a {}DS map{} and use the function&nbsp;{}{}ds_map_find_value(){}{}. Now, what happens when the map does not have the value being looked for? Well, since the function is correctly formatted, and the issue is that the no such value exists, then it would return the&nbsp;constant&nbsp;{}undefined{}, and you can check for this constant as you would check for&nbsp;{}true{}&nbsp;or any other value.{}':'{}未定义的值(也称为"null"值)是一个表达式没有正确的值，尽管它在语法上是正确的，因此必须返回{}一些东西{}。例如，假设您有一个{}DS map{}，并使用函数{}{}ds_map_find_value(){}{}。现在，当map没有要查找的值时会发生什么？好吧，既然函数的格式是正确的，问题是不存在这样的值，那么它将返回常量{}undefined{}，你可以像检查{}true{}或任何其他值一样检查这个常量。','{}An undefined value (also known as a "null" value) is one where an expression doesn\'t have a correct value, although it is syntactically correct, and so must return&nbsp;{}something{}. For example, say you have a {}DS map{} and use the function&nbsp;{}{}ds_map_find_value(){}{}. Now, what happens when the map does not have the value being looked for? Well, since the function is correctly formatted, and the issue is that the no such value exists, then it would return the&nbsp;constant&nbsp;{}undefined{}, and you can check for this constant as you would check for&nbsp;{}true{}&nbsp;or any other value.{}{}':"{}未定义值（也称为“空”值）是指表达式没有正确值的值，尽管它在语法上是正确的，因此必须返回{}某些内容{}。例如，假设您有一个 {}DS map{}并使用函数 {}{}ds_map_find_value(){}{}。现在，当地图没有要查找的值时会发生什么？那么，由于函数格式正确，问题是不存在这样的值，那么它会返回常量 {}undefined{}，您可以像检查 {}true{} 或其他值一样检查这个常量。{}{}","{}Any{}{}Any{}":"{}Any{}{}Any{} 任何","{}Arrays{}{}Arrays{}":"{}Arrays{}{}Arrays{} 数组","{}Assets{}, such as Objects, Sprites, Rooms, etc.":"{}资产{}，例如对象、精灵、房间等。","{}Binary Literals{}{}Binary Literals{}":"{}Binary Literals 二进制文字{}{}Binary Literals 二进制文字{}","{}Boolean{}{}Boolean{}":"{}Boolean{}{}Boolean{} 布尔","{}Buffers{}, {}Vertex Buffers{} and {}Vertex Formats{}":"{}缓冲区{}、{}顶点缓冲区{}和{}顶点格式{}","{}Enum{}{}Enum{}":"{}Enum{}{}Enum{} 枚举","{}GameMaker{}&nbsp;will accept&nbsp;{}hexadecimal literals{}&nbsp;as legitimate values. Hexadecimal values are especially common when working with colours, but can be used anywhere a positive integer value is required. Hexadecimal values can be formatted in the following two ways, where {}{}abcd{}{}&nbsp;would be the actual hex value:":"{}GameMaker{}将接受{}十六进制文字{}作为合法值。使用颜色时，十六进制值尤其常见，但可以在需要正整数值的任何地方使用。十六进制值可以通过以下两种方式进行格式化，其中{}{}abcd{}{}将是实际的十六进制值：","{}Handles{}{}Handles{}":"{}Handles{}{}Handles{} 句柄","{}Hexadecimal Literals{}{}Hexadecimal Literals{}":"{}Hexadecimal Literals 十六进制文字{}{}Hexadecimal Literals 十六进制文字{}","{}Hexadecimal Values{}{}Hexadecimal Values{}":"{}Hexadecimal Values{}{}Hexadecimal Values{} 十六进制","{}Infinity{}{}Infinity{}":"{}Infinity{}{}Infinity{} 无穷大","{}Method Variables{}{}Method Variables{}":"{}Method Variables{}{}Method Variables{} 方法变量","{}NOTE{}&nbsp;On the&nbsp;{}HTML5{}&nbsp;target, all real numbers are doubles.":"{}注意{}在{}HTML5{}目标上，所有实数都是双精度的。","{}NaN{}{}NaN{}":"{}NaN{}{}NaN{} 非数字","{}Particle System Instances{}, {}Particle Emitters{}, {}Particle Types{}":"{}粒子系统实例{}、{}粒子发射器{}、{}粒子类型{}","{}Pointer{}{}Pointer{}":"{}Pointer{}{}Pointer{} 指针","{}Real Numbers{}{}Real Numbers{}":"{}Real Numbers{}{}Real Numbers{} 实数","{}Strings{}{}Strings{}":"{}Strings{}{}Strings{} 字符串","{}Structs{}{}Structs{}":"{}Structs{}{}Structs{} 结构","{}Surfaces{}":"{}表面{}","{}Time Sources{}":"{}时间源{}","{}Undefined{}{}Undefined{}":"{}Undefined{}{}Undefined{} 未定义","{}{}NOTE{}{}&nbsp;On the&nbsp;{}HTML5{}&nbsp;target, all real numbers are doubles.":"{}{}注意{}{}在{}HTML5{}目标上，所有实数均为双精度数。","{}{}NOTE{}{}&nbsp;While created variables in&nbsp;{}GameMaker{}&nbsp;are all stored as double-precision floating point numbers or integers, you can still use other formats when dealing with extensions. These can be passed into {}GameMaker{} from an extension and then checked using the appropriate {}is_*(){} function, a list of which can be found under {}Data Type Functions{}.":"{}{}注意{}{}虽然在{}GameMaker{}中创建的变量全部存储为双精度浮点数或整数，但在处理扩展时您仍然可以使用其他格式。这些可以从扩展程序传递到{}GameMaker{}，然后使用适当的{}is_*(){}函数进行检查，可以在{}数据类型函数{}下找到该函数的列表。","{}{}NOTE{}{}&nbsp;You can use the function&nbsp;{}{}typeof{}{}&nbsp;to get the data type that a variable holds.":"{}{}注意{}{}您可以使用函数{}{}typeof{}{}来获取变量所保存的数据类型。",'{}{}NaN{}&nbsp;stands for "not a number", and is a constant that can be returned when the compiler cannot evaluate the results of an operation as a number. For example, 0/0 cannot be defined as a real number, and is therefore represented by {}NaN{}, or the square root of a negative number - which is considered an "imaginary" number - cannot be represented as a real number, and so is represented by {}NaN{}.{}':'{}{}NaN{}代表"不是数字"，是一个常量，当编译器无法将运算结果计算为数字时，可以返回该常量。例如，0/0 不能定义为实数，因此用{}NaN{}表示，或者负数的平方根(被视为"虚数")不能表示为实数，因此用{}NaN{}表示。{}','{}{}NaN{}&nbsp;stands for "not a number", and is a constant that can be returned when the compiler cannot evaluate the results of an operation as a number. For example, 0/0 cannot be defined as a real number, and is therefore represented by&nbsp;{}NaN{}, or the square root of a negative number - which is considered an "imaginary" number - cannot be represented as a real number, and so is represented by&nbsp;{}NaN{}.{}':'{}{}NaN{}代表"非数字"，是一个常量，当编译器无法将操作结果作为数字计算时，可以返回该常量。例如，0/0不能定义为实数，因此用{}NaN{}表示，或者负数的平方根(被认为是"想象的"数)不能用实数表示，因此用{}NaN{}表示。{}'},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(e){json_global=e}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../..",gTopicId="8.2.1.1_1"</script><script type="text/javascript" src="../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Data Types</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../assets/css/default.css" type="text/css"><script src="../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Page outlining Data Types"><meta name="rh-index-keywords" content="Data Types"><meta name="search-keywords" content="Data Types"><meta name="brsnext" value="GameMaker_Language/GML_Overview/Language_Features/If_Else_and_Conditional_Operators.htm"><meta name="brsprev" value="GameMaker_Language/GML_Overview/Variables/Constants.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Data Types"><span>Data Types</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">Data Types</span></h1><p>In previous section&nbsp;we&nbsp;covered <a href="Variables_And_Variable_Scope.htm">variables and their scoping rules</a> but little has been said about the different <b>data types</b> that a variable can store. Therefore this section explains the different types and what they can be used for.</p><p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;You can use the function&nbsp;<span class="inline3_func"><a href="../GML_Reference/Variable_Functions/typeof.htm">typeof</a></span>&nbsp;to get the data type that a variable holds.</p><p>Before continuing, let's just briefly explain what we mean by "data types". When you create a variable it can be used to hold information, and when you call a&nbsp;function, it can also stored returned information. However, this information can come in various "flavours" -&nbsp;for example, it can be a <em>real number</em> or it can be a <em>string</em>. These different types of values being used are called&nbsp;<b>data types</b>&nbsp;and when using&nbsp;the GameMaker Language they can be any of the following:</p><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true" data-skip-index="true">Real Numbers</span><span data-close-text="true">Real Numbers</span></a></p><div class="droptext" data-targetname="drop-down1"><p class="dropspot">Real numbers are any value that is not a string, nor any of the other possible data types. So, 124, 45639.566546456, 0, -45.5, etc. are all examples of real numbers. All real numbers are stored as 64-bit double-precision floating point values (or integer values), and the compiler will optimise where possible (for example, 0.0 will be optimised to the integer value of 0).</p><p class="dropspot">When dealing with any value that is not an integer, you may experience slight rounding errors due to the nature of floating point maths. For more information on this and other number related functions, please see:&nbsp;<a href="../GML_Reference/Maths_And_Numbers/Number_Functions/Number_Functions.htm">GML Reference - Number Functions</a>.</p><p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;On the&nbsp;<b>HTML5</b>&nbsp;target, all real numbers are doubles.</p><p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;While created variables in&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>&nbsp;are all stored as double-precision floating point numbers or integers, you can still use other formats when dealing with extensions. These can be passed into <span data-keyref="GameMaker Name">GameMaker</span> from an extension and then checked using the appropriate <span class="inline3_func">is_*()</span> function, a list of which can be found under <a href="../GML_Reference/Variable_Functions/Variable_Functions.htm#data_type_functions">Data Type Functions</a>.</p><p class="dropspot">&nbsp;&nbsp;</p></div><p id="p"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#"><span data-open-text="true" data-skip-index="true">Boolean</span><span data-close-text="true">Boolean</span></a></p><div class="droptext" data-targetname="drop-down6"><p class="dropspot">A boolean is simply a value that can either be true or false.&nbsp;Note that currently&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>&nbsp;will interpret a real number equal to or below 0.5 as a <span class="inline2">false</span> value, and any real number greater than 0.5 as being <span class="inline2">true</span>. This does&nbsp;<i>not</i>&nbsp;mean however that you should be checking 1 and 0 (or any other real number) for <span class="inline2">true</span> and <span class="inline2">false</span>, as you are also provided with the&nbsp;<b>constants</b>&nbsp;<span class="inline2">true</span> and <span class="inline2">false</span>, which should always be used in your code to prevent any issues should real boolean data types be added in a future update.</p><p class="dropspot">You can convert any real number into an implicitly boolean value using the following function:</p><ul class="dropspotlist"><li class="dropspot"><a href="../GML_Reference/Variable_Functions/bool.htm">bool</a></li></ul><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true" data-skip-index="true">Strings</span><span data-close-text="true">Strings</span></a></p><div class="droptext" data-targetname="drop-down"><p class="dropspot"><label for="one">A string is simply any text that has been placed in quotation marks <span class="inline2">"..."</span>. You can perform certain operations on strings, like add two strings together to create a longer string (concatenation) and you can also change the string properties and even extract real numbers from it. For more information on strings and the string functions see:&nbsp;<a href="../GML_Reference/Strings/Strings.htm">GML Reference - Strings</a>.</label></p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true" data-skip-index="true">Arrays</span><span data-close-text="true">Arrays</span></a></p><div class="droptext" data-targetname="drop-down2"><p class="dropspot"><label for="three">An array is a special data type that can be used to hold multiple values. You assign the array to a variable, and then "fill in" different indices of the array with values. This array can then be passed through to scripts and functions on a pass-by-reference basis, however should you modify the passed array, it will then become a copy of the original array and so will need to be returned back to the original variable for the array to be updated. For more information on arrays, please see:&nbsp;<a href="Arrays.htm">GML Overview - Arrays</a>.</label></p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span data-open-text="true" data-skip-index="true">Structs</span><span data-close-text="true">Structs</span></a></p><div class="droptext" data-targetname="drop-down3"><p class="dropspot"><label for="eleven">A struct (sometimes called a "lightweight object") is a raw data structure that acts as a container for variables of all data types. You assign a struct to a variable and in the struct you can then define further variables and these can then be read from or written to as required. For more detailed information on structs, please see the section&nbsp;<a href="Structs.htm">GML Overview - Structs</a>.</label></p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#"><span data-open-text="true" data-skip-index="true">Method Variables</span><span data-close-text="true">Method Variables</span></a></p><div class="droptext" data-targetname="drop-down4"><p class="dropspot"><label for="twelve">A method variable is a variable that has been assigned a function and it can be used exactly the same as you would use a GML runtime function. For more detailed information, please see the section&nbsp;<a href="Method_Variables.htm">Method Variables</a>.</label></p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#"><span data-open-text="true" data-skip-index="true">int64</span><span data-close-text="true">int64</span></a></p><div class="droptext" data-targetname="drop-down13"><p class="dropspot">An "int64" is a 64-bit integer that can be created using&nbsp;<span class="inline3_func"><a href="../GML_Reference/Variable_Functions/int64.htm">int64</a></span> (by passing in a non-64-bit real number) or when reading a <span class="inline2">buffer_u64</span> value from a <a href="../GML_Reference/Buffers/buffer_read.htm">buffer</a>.</p><p class="dropspot">This can be used in places where a 64-bit integer is strictly required, or when you want to work with <a href="../../Additional_Information/Bitwise_Operators.htm">bit-shifting</a> and need those 64 bit positions.</p><p class="dropspot">Any bitwise operations, even when run on non-64-bit values, will always return a 64-bit integer.</p><p class="dropspot">Divisions on int64 values will also return integers (e.g.: <span class="inline2">int64(5) / int64(2) = 2</span>).</p><p class="dropspot">References for data structures and assets (such as objects, sprites, etc.) are stored as int64s, where the first 32 bits contain information about the type of resource, and the next 32 bits contain the ID for the resource. See the next section "Handles" for more info.</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down16" href="#"><span data-open-text="true" data-skip-index="true">Handles</span><span data-close-text="true">Handles</span></a></p><div class="droptext" data-targetname="drop-down16"><p class="dropspot">A handle contains a reference to one of the following types of resources:</p><ul class="colour"><li class="dropspot"><a href="../GML_Reference/Data_Structures/Data_Structures.htm">Data Structures</a></li><li class="dropspot"><a href="../../The_Asset_Editors/The_Asset_Editors.htm">Assets</a>, such as Objects, Sprites, Rooms, etc.</li><li class="dropspot"><a href="../GML_Reference/Asset_Management/Instances/Instances.htm">Object Instances</a></li><li class="dropspot"><a href="Script_Functions.htm">Script Functions</a></li><li class="dropspot"><a href="../GML_Reference/Drawing/Particles/Particle_Systems/part_system_create.htm">Particle System Instances</a>, <a href="../GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_create.htm">Particle Emitters</a>, <a href="../GML_Reference/Drawing/Particles/Particle_Types/part_type_create.htm">Particle Types</a></li><li class="dropspot"><a href="../GML_Reference/Buffers/buffer_create.htm">Buffers</a>, <a href="../GML_Reference/Drawing/Primitives/vertex_create_buffer.htm">Vertex Buffers</a> and <a href="../GML_Reference/Drawing/Primitives/vertex_format_end.htm">Vertex Formats</a></li><li class="dropspot"><a href="../GML_Reference/Drawing/Surfaces/Surfaces.htm">Surfaces</a></li><li class="dropspot">A reference created with&nbsp;<span class="inline3_func"><a href="../GML_Reference/Variable_Functions/ref_create.htm">ref_create</a></span></li><li class="dropspot"><a href="../GML_Reference/Time_Sources/Time_Sources.htm">Time Sources</a></li><li class="dropspot"><a href="../GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_id.htm">Room Layers</a></li></ul><p class="dropspot">You get a handle when you create a new resource (with a <span class="inline2">_create()</span> function) or reference an existing resource in your code (like referencing an object, getting an instance through a function, etc.).</p><p class="dropspot">A handle is a 64-bit integer, where the first 32 bits contain information about the type of resource, and the next 32 bits contain the index number of the resource.</p><p class="dropspot">If you convert the handle to a number (using&nbsp;<span class="inline3_func"><a href="../GML_Reference/Strings/real.htm">real</a></span>&nbsp;or&nbsp;<span class="inline3_func"><a href="../GML_Reference/Variable_Functions/int64.htm">int64</a></span>), you get the index number.</p><p class="dropspot">The type information in a handle is used to make sure that you pass the correct type of resource into a function (e.g. making sure you pass a DS list into&nbsp;<span class="inline3_func"><a href="../GML_Reference/Data_Structures/DS_Lists/ds_list_add.htm">ds_list_add</a></span> instead of a DS map, grid or something else).</p><p class="dropspot" style="text-align:left">If you convert a handle to a string or print it as an output, you will see a string in the format&nbsp;<span data-conref="../../assets/snippets/Handle_Format.hts"><span class="inline2">"ref&nbsp;&lt;type&gt;&nbsp;&lt;id&gt;"</span></span>, e.g. <span class="inline2">"ref ds_list 1"</span>.</p><p class="dropspot">You can convert a string that's correctly formatted as&nbsp;<span data-conref="../../assets/snippets/Handle_Format.hts"><span class="inline2">"ref&nbsp;&lt;type&gt;&nbsp;&lt;id&gt;"</span></span>&nbsp;back to a handle using the&nbsp;<span class="inline3_func"><a href="../GML_Reference/Variable_Functions/handle.htm">handle_parse</a></span>&nbsp;function.</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#"><span data-open-text="true" data-skip-index="true">Hexadecimal Literals</span><span data-close-text="true">Hexadecimal Literals</span></a></p><div class="droptext" data-targetname="drop-down5"><p class="dropspot"><span data-keyref="GameMaker Name">GameMaker</span>&nbsp;will accept&nbsp;<b>hexadecimal literals</b>&nbsp;as legitimate values. Hexadecimal values are especially common when working with colours, but can be used anywhere a positive integer value is required. Hexadecimal values can be formatted in the following two ways, where <span class="inline"><em>abcd</em></span>&nbsp;would be the actual hex value:</p><p class="code"><span style="background-color:transparent"><strong>$</strong><em>abcd</em></span><br><strong>0x</strong><em>abcd</em></p><p class="dropspot">For example, the following decimal values can be expressed as hexadecimal as shown:</p><p class="code"><strong>11406</strong> -&gt; $2c8e, 0x2c8e<br><strong>16777215</strong>&nbsp;-&gt; $ffffff, 0xffffff</p><hr><p class="dropspot">A hexadecimal value can also begin with a hash/pound symbol (<span class="inline2">#</span>), however when written this way, its value will not equal a similar hex value written using a previously shown format (<span class="inline2">$</span> or <span class="inline2">0x</span>). This is due to the way colours are interpreted in GML, which required the format for hash/pound hex values to be changed so that CSS colours could be written in an <span class="inline2">#RRGGBB</span> format. For more information, see&nbsp;<a href="../GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm#hex_colours">Hex Colours</a>.</p><p class="dropspot">For example, the following two are not equal:</p><p class="code">$2c8edd <strong>!=</strong> #2c8edd</p><p class="dropspot">For them to refer to the same decimal value, you would have to swap the first two and last two characters:</p><p class="code">$<strong>2c</strong>8edd <strong>=</strong><strong>=</strong> #dd8e<strong>2c</strong></p><p>&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down15" href="#"><span data-open-text="true" data-skip-index="true">Binary Literals</span><span data-close-text="true">Binary Literals</span></a></p><div class="droptext" data-targetname="drop-down15"><p class="dropspot">You can write binary literals with the <span class="inline2">0b</span> prefix:</p><p class="code">var _six = 0b0010 | 0b0100; // produces 0b0110, or 6</p><p class="dropspot">The above code shows two binary values, <span class="inline2">0010</span> and <span class="inline2">0100</span>, being used in a <a href="../../Additional_Information/Bitwise_Operators.htm">bitwise "OR" operation</a>.</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#"><span data-open-text="true" data-skip-index="true">Pointer</span><span data-close-text="true">Pointer</span></a></p><div class="droptext" data-targetname="drop-down7"><p class="dropspot">A pointer is a data type that "points" to a memory location. You cannot do operations on a pointer in&nbsp;<span data-keyref="GameMaker Name">GameMaker</span> and it is used only for some very specific functions, like getting a texture or buffer address from memory for another function. For examples of functions that return a pointer you can see&nbsp;<span class="inline3_func"><a href="../GML_Reference/Buffers/buffer_get_address.htm">buffer_get_address</a></span> or <span class="inline3_func"><a href="../GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_texture.htm">sprite_get_texture</a></span>.</p><p class="dropspot">There is also a function to check if a value is a pointer (see "<b>Checking Data Types</b>", below) and a function to convert a value into a pointer:</p><ul class="dropspotlist"><li class="dropspot"><a href="../GML_Reference/Variable_Functions/ptr.htm" style="background-color:transparent">ptr</a></li></ul><p class="dropspot">You may also use (and get returned) the following built-in constants when using pointers:</p><table class="cke_show_border"><tbody><tr><th>Constant</th><th>Description</th></tr><tr><td><span class="inline">pointer_null</span></td><td>This constant indicates that the pointer is not pointing to anything meaningful (the same as <span class="inline">NULL</span> in C++ or <span class="inline">null</span> in C#). This value is <a class="tooltip" title="A value that is considered &quot;false&quot; when used as a boolean, for example in an if() condition.">falsy</a>.</td></tr><tr><td><span class="inline">pointer_invalid</span></td><td>This constant simply means that the value is not a valid pointer</td></tr></tbody></table><p>&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#"><span data-open-text="true" data-skip-index="true">Enum</span><span data-close-text="true">Enum</span></a></p><div class="droptext" data-targetname="drop-down8"><p class="dropspot">An enum is an "enumerator", and it essentially permits you to create your own limited data type with a list of constant values. Enums are explained in depth on the page for <a href="Variables/Constants.htm">Constants</a>.</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#"><span data-open-text="true" data-skip-index="true">Undefined</span><span data-close-text="true">Undefined</span></a></p><div class="droptext" data-targetname="drop-down9"><p class="dropspot"><label for="seven">An undefined value (also known as a "null" value) is one where an expression doesn't have a correct value, although it is syntactically correct, and so must return&nbsp;<i>something</i>. For example, say you have a <a href="../GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">DS map</a> and use the function</label> <span class="inline3_func"><a href="../GML_Reference/Data_Structures/DS_Maps/ds_map_find_value.htm">ds_map_find_value</a></span><label for="seven">. Now, what happens when the map does not have the value being looked for? Well, since the function is correctly formatted, and the issue is that no such value exists, then it would return the&nbsp;constant <span class="inline2">undefined</span>, and you can check for this constant as you would check for <span class="inline2">true</span> or any other value.</label></p><p class="code"><label for="seven">var _value = ds_map_find_value(my_map, "key");<br><br>if (<a href="../GML_Reference/Variable_Functions/is_undefined.htm">is_undefined</a>(value)) {<br>&nbsp; &nbsp; show_debug_message("The key does not exist!");<br>}</label></p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#"><span data-open-text="true" data-skip-index="true">NaN</span><span data-close-text="true">NaN</span></a></p><div class="droptext" data-targetname="drop-down10"><p class="dropspot"><label for="nine"><span class="inline">NaN</span>&nbsp;stands for "not a number", and is a constant that can be returned when the compiler cannot evaluate the results of an operation as a number. For example, 0/0 cannot be defined as a real number, and is therefore represented by <span class="inline2">NaN</span>, or the square root of a negative number - which is considered an "imaginary" number - cannot be represented as a real number, and so is represented by <span class="inline2">NaN</span>.</label></p><p class="dropspot">Note that since <span class="inline2">NaN</span> is not a number, it cannot be compared to itself, so&nbsp;comparisons such as <span class="inline2">NaN == NaN</span> will return <span class="inline2">false</span>. Same goes for an array comparison such as this:</p><p class="code">show_debug_message(array_equals([NaN], [NaN]));<br><br>// Output: 0 (false)</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#"><span data-open-text="true" data-skip-index="true">Infinity</span><span data-close-text="true">Infinity</span></a></p><div class="droptext" data-targetname="drop-down11"><p class="dropspot">The constant <span class="inline2">infinity</span> refers to a number that is considered infinite, such as the result you would get when dividing any floating point value by zero, eg: 1.0/0.</p><p class="dropspot">Note that the <span class="inline2">infinity</span> constant is equal to itself, so <span class="inline2">infinity == infinity</span>&nbsp;will return <span class="inline2">true</span>.</p></div><p id="variable"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#"><span data-open-text="true" data-skip-index="true">Any</span><span data-close-text="true">Any</span></a></p><div class="droptext" data-targetname="drop-down12"><p class="dropspot">The "<strong>Any</strong>" data type can be found on many pages in the manual, e.g. <a href="../GML_Reference/Variable_Functions/is_string.htm">in the arguments,</a>&nbsp;or as a <a href="../GML_Reference/Variable_Functions/array_get.htm">return value</a>.&nbsp;It indicates that <em>any type of value</em> is accepted, or can be returned.</p></div><h2>Underscores in Literals</h2><p>You can use underscores (<span class="inline2">_</span>) in numeric literals, such as real numbers, hexadecimal and binary values. These are ignored during compilation and only serve as visual separators. Here are a few examples:</p><p class="code">var _integer = 100_000_000; // same as 100000000<br>var _float &nbsp; = 3_141.59; // same as 3141.59<br>var _hexadec = 0xDEAD_BEEF; // same as 0xDEADBEEF<br>var _binary &nbsp;= 0b01101000_01101001; // same as 0b0110100001101001</p><p>All the underscores used in the literals shown above only make them easier to read, and don't change anything about their functionality.</p><h2>Related Pages</h2><p>You can check the data type of any variable using the functions listed on the following the page:</p><ul class="colour"><li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Variable Functions</a></li></ul><p>You can also find arithmetic type tables that show the results of different operations using mixed variable data types here:</p><ul class="colour"><li><a href="../../Additional_Information/Type_Tables.htm">Type Tables</a></li></ul><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="GML_Overview.htm">GML&nbsp;Overview</a></div><div style="float:right">Next:&nbsp;<a href="Language_Features/If_Else_and_Conditional_Operators.htm">if / else and Conditional Operators</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>