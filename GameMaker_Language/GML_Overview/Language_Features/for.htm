<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/main.css"><script>let str;removeHtml=function(e){return e=(e=(e=(e=e.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(e){return e.match(/(<([^>]+)>)/gi)},setTranslator=function(e,t,n){let a;a=n?e.attr(n):e.html();let i=t[removeHtml(a)];if(null!=i&&i.length){t=retHtml(a);let o=0;t&&t.forEach(function(e,t){var n=i.replace("{"+o+"}",e);i=n===i?i.replace("{}",e):n,o++}),n?e.attr(n,i):e.html(i)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var e=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(e):($(".topic-header").append(e),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(e){return e.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={"An example of using {}continue{} in a {}for{} loop would be:":"在{}for{}循环中使用{}continue{}的一个例子是:","For more examples of loop keywords please see the sections on {}{}repeat{}{}, {}{}while{}{}, and {}{}do / until{}{}.":"有关循环关键字的更多示例，请参阅{}{}repeat{}{}、{}{}while{}{}和{}{}do / until{}{}部分。","Go back to step 2 and perform the expression again and continue or exit the loop":"返回步骤2并再次执行表达式，然后继续或退出循环","It is worth noting that you can use the special {}{}break{}{} and {}{}continue{}{} statements within a {}for{} loop too. Using {}break{} will immediately exit the loop and move on to any code that is in the event or function after the loop should have finished, e.g.:":"值得注意的是，您也可以在{8}for{9}循环中使用特殊的{}{}break{}{}和{}{}continue{}{}语句。使用{}break{}将立即退出循环，并在循环应该结束后移到事件或函数中的任何代码，例如:","It is worth noting that you can use the special&nbsp;{}{}break{}{}&nbsp;and&nbsp;{}{}continue{}{} statements within a {}for{} loop too. Using {}break{} will immediately exit the loop and move on to any code that is in the event or function after the loop should have finished, e.g.:":"值得注意的是，您也可以在{8}for{9}循环中使用特殊的{}{}break{}{}和{}{}continue{}{}语句。使用{}break{}将立即退出循环，并在循环结束后继续执行事件或函数中的任何代码，例如：","Now, this may sound complicated when written like that, but you should interpret it as:":"现在，这样写可能听起来很复杂，但你应该把它解释为。","One of the most used ways to iterate over a&nbsp;{}statement{}&nbsp;(or statements) multiple times is to use a {}for{} loop, which has this form:":"对{}语句{}(或语句)进行多次迭代的最常用方法之一是对{}循环使用{}，其形式如下：","The above code initialises a {}for{} loop, starting at 0 and counting up to (and including) 9, and then uses the loop value of {}i{} to draw the values stored in an array down the screen. Note how the {}for{} loop variable {}i{} is used to not only loop through the array, but to draw a number as well as tell {}GameMaker{} where to draw the values to in the room. This flexibility is one of the main reasons why {}for{} loops are so important in programming.":"上面的代码初始化了一个{}for{}循环，从0开始，一直数到(包括)9，然后使用{}i{}的循环值，在屏幕上画出存储在数组中的数值。请注意{}for{}循环变量{}i{}是如何被用于不仅循环数组，而且绘制数字以及告诉{}GameMaker{}在房间里把数值画到哪里。这种灵活性是{}for{}循环在编程中如此重要的主要原因之一。",'The above code loops through the 10 nearest instances of the given "parent" object, and if an instance is found it checks the instance object ID, and if it is an instance of {}obj_Enemy_Melee{} then the loop is ended using {}break{} and the ID value assigned to a variable (if no instance is found, then the keyword {}{}noone{}{} will be&nbsp;added to the variable).':"上面的代码循环遍历给定“父”对象的10个最近的实例，如果找到一个实例，它会检查实例对象ID，如果它是{}obj_Enemy_Melee{}的一个实例，那么循环将使用{}break{}和分配给变量的ID值结束(如果没有找到实例，则关键字{}{}noone{}{}将被添加到变量中)。",'The above code loops through the 10 nearest instances of the given "parent" object, and if an instance is found it checks the instance object ID, and if it is an instance of {}obj_Enemy_Melee{} then the loop is ended using&nbsp;{}{}break{}{} and the ID value assigned to a variable (if no instance is found, then the keyword {}{}{}noone{}{}{} will be&nbsp;added to the variable).':'上述代码循环遍历给定"父"对象的 10 个最近的实例，如果找到实例，则检查实例对象 ID，如果它是{}obj_Enemy_Melee{}的实例，则使用结束循环{}{}break{}{}以及分配给变量的 ID 值(如果未找到实例，则关键字{}{}{}noone{}{}{}将添加到变量中)。',"The expression tests whether the loop should be ended":"测试循环表达式是否应结束 (语法中 expression)","The first assignment initialises the for-loop":"第一个赋值初始化 for 循环","The first assignment initializes the for-loop":"首先赋值初始化for-循环 (语法中 assignment)","The operation is performed":"执行运算 (语法中 operation)","The statement is performed":"执行语句 (&#123;&#125;内语句 statement)","This code will check the value stored in each array position of a 10 length 1D&nbsp;{}array{}, and if any are less than or equal to 0 it will {}continue{} the loop, meaning that the current iteration will end, {}i{} will be incremented, and the next loop iteration will be started. If the value is greater than 0, then it is added to the local variable {}_val{}, and after the loop is finished the total value is drawn to the screen.":"这段代码将检查存储在长度为10的1D {}数组{}的每个数组位置中的值，如果其中任何值小于或等于0，它将{}继续{}循环，这意味着当前迭代将结束，{}i{}将递增，并开始下一个循环迭代。如果该值大于0，则将其添加到本地变量{}_val{}中，在循环完成后，将总值绘制到屏幕上。","This is extremely useful for doing repetitive tasks that would involve multiple lines of code in any other way, and is commonly used as a counter for evaluating arrays, drawing things, setting incremental values, etc. The following code example illustrates a typical use for this type of statement:":"这对于执行以任何其他方式涉及多行代码的重复任务非常有用，并且通常用作评估数组、绘制事物、设置增量值等的计数器。以下代码示例说明了此方法的典型用途声明类型：","This is extremely useful for doing repetitive tasks that would involve multiple lines of code in any other way, and is commonly used as a counter for evaluating arrays, drawing things, setting incremental values, etc...&nbsp;The following code example illustrates a typical use for this type of statement:":"这对于做重复性的工作是非常有用的，因为以任何其他方式都会涉及到多行代码，而且通常被用作评估数组、绘制东西、设置增量值等的计数器。下面的代码例子说明了这种类型的语句的典型用途。","This works as follows - First&nbsp;the assignment is executed which assigns a value to a variable, then the {}expression{}&nbsp; is evaluated and, if it is&nbsp;{}true{}, the statements in the curly brackets{} are executed executed. Next the operation is performed on the assigned variable and then the expression is evaluated again. This loop will continue until the expression is found to be&nbsp;{}false{}.":"其工作原理如下-首先执行为变量赋值的赋值，然后计算{}表达式{}，如果它为{}true{}，则执行花括号{}中的语句。接下来，对指定的变量执行操作，然后再次计算表达式。此循环将继续，直到发现表达式为{}false{}。","This works as follows - First&nbsp;the assignment is executed which assigns a value to a variable, then the {}expression{}&nbsp;is evaluated and, if it is&nbsp;{}true{}, the statements in the curly brackets {}{ }{} are executed. Next the operation is performed on the assigned variable and then the expression is evaluated again. This loop will continue until the expression is found to be {}false{}.":"其工作原理如下 - 首先执行赋值操作，将值赋给变量，然后计算{}表达式{}，如果为{}true{}，则执行大括号{}{ }{}中的语句被处决。接下来，对分配的变量执行运算，然后再次计算表达式。此循环将继续下去，直到发现表达式为{}false{}。",'{}NOTE{}: You will see multiple examples when working with other people of the variables "{}i{}" and "{}j{}" being used for the loop counter variable. These are {}not{} obligatory variable names and you can use anything like "{}a{}" or "{}foo{}" or whatever. The use of "{}i{}" and "{}j{}" is simply a standard convention in programming.':'{}注意{}:您将看到许多其他人一起使用变量“{}i{}”和“{}j{}”作为循环计数器变量的例子。这{}不是{}必选变量名，你可以使用诸如"{}a{}"或"{}foo{}"之类的东西。使用“{}i{}”和“{}j{}”只是编程中的一种标准约定。',"{}When should you use a {}for{} loop?{} Anytime you need to perform a fixed number of iterations over one or more statements&nbsp;while keeping track of the {}iteration{} that is currently being run and using that iteration value.":"{}什么时候应该使用{}for{}循环？{}任何时候，你需要对一条或多条语句执行固定数量的迭代，同时跟踪当前正在运行的{}迭代{}，并使用该迭代值。","{}{}NOTE{}{}&nbsp;You can use a {}var{} statement in the assignment part to initialise multiple variables. See&nbsp;{}Local Variables{}.":"{}{}注意{}{}您可以在赋值部分使用{}var{}语句来初始化多个变量。请参阅{}局部变量{}。",'{}{}NOTE{}{}&nbsp;You will see multiple examples when working with other people of the variables "{}i{}" and "{}j{}" being used for the loop counter variable. These are {}not{} obligatory variable names and you can use anything like "{}a{}" or "{}foo{}" or whatever. The use of "{}i{}" and "{}j{}" is simply a standard convention in programming.':'{}{}注意{}{}在与其他人一起工作时，您将看到多个变量"{}i{}"和"{}j{}"用于循环计数器变量的示例。这些不是强制性的变量名，你可以使用任何像"a"或"foo"之类的名字。"{}i{}"和"{}j{}"的使用只是编程中的标准约定。',"{}{}NOTE{}{}&nbsp;You will see multiple examples when working with other people of the variables {}i{}&nbsp;and {}j{}&nbsp;being used for the loop counter variable. These are {}not{} obligatory variable names and you can use anything like {}a{}&nbsp;or {}foo{}&nbsp;or whatever. The use of {}i{}&nbsp;and {}j{}&nbsp;is simply a standard convention in programming.":"{}{}注意{}{}在与其他人合作时，您将看到多个关于循环计数器变量使用变量{}i{}和{}j{}的示例。这些{}不是{}强制变量名称，您可以使用{}a{}或{}foo{}等名称。{}i{}和{}j{}的使用只是编程中的标准约定。"},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(e){json_global=e}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../..",gTopicId="8.2.1.3.0_4"</script><script type="text/javascript" src="../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>for</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../assets/css/default.css" type="text/css"><script src="../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Page outlining the for function"><meta name="rh-index-keywords" content="for"><meta name="search-keywords" content="for"><meta name="brsnext" value="GameMaker_Language/GML_Overview/Language_Features/switch.htm"><meta name="brsprev" value="GameMaker_Language/GML_Overview/Language_Features/do___until.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="for"><span>for</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">for</span></h1><p>One of the most used ways to iterate over a&nbsp;<a class="tooltip" title="In programming, a statement is a single line of code written legally in a programming language that expresses an action to be carried out. A statement might have internal components of its own, including expressions, operators and functions. An example of a statement is A = B + 5. A GameMaker Studio 2 program is nothing but a sequence of one or more statements that together perform a task (like move the player). ">statement</a>&nbsp;(or statements) multiple times is to use a <span class="inline2">for</span> loop, which has this form:</p><p class="code">for (&lt;assignment&gt;; &lt;expression&gt;; &lt;operation&gt;;)<br>{<br>&nbsp; &nbsp; &lt;statement&gt;;<br>&nbsp; &nbsp; &lt;statement&gt;;<br>&nbsp; &nbsp; ...<br>}</p><p>This works as follows - First&nbsp;the assignment is executed which assigns a value to a variable, then the <a class="tooltip" title="An expression is a combination of one or more constants, variables, operators, and/or functions that are interpreted according to particular rules of precedence and association to return another value. A simple expression would be (5 + 5), which returns 10.">expression</a>&nbsp;is evaluated and, if it is&nbsp;<span class="inline2">true</span>, the statements in the curly brackets <span class="inline2">{ }</span> are executed. Next the operation is performed on the assigned variable and then the expression is evaluated again. This loop will continue until the expression is found to be <span class="inline2">false</span>.</p><p>Now, this may sound complicated when written like that, but you should interpret it as:</p><ol><li>The first assignment initialises the for-loop</li><li>The expression tests whether the loop should be ended</li><li>The statement is performed</li><li>The operation is performed</li><li>Go back to step 2 and perform the expression again and continue or exit the loop</li></ol><p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;You can use a <span class="inline2">var</span> statement in the assignment part to initialise multiple variables. See&nbsp;<a href="../Variables/Local_Variables.htm">Local Variables</a>.</p><p>This is extremely useful for doing repetitive tasks that would involve multiple lines of code in any other way, and is commonly used as a counter for evaluating arrays, drawing things, setting incremental values, etc. The following code example illustrates a typical use for this type of statement:</p><p class="code">for (var i = 0; i &lt; 10; i += 1)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;draw_text(32, 32 + (i * 32), string(i) + ". "+ string(scr[i]));<br>}</p><p>The above code initialises a <span class="inline2">for</span> loop, starting at 0 and counting up to (and including) 9, and then uses the loop value of <span class="inline2">i</span> to draw the values stored in an array down the screen. Note how the <span class="inline2">for</span> loop variable <span class="inline2">i</span> is used to not only loop through the array, but to draw a number as well as tell <span data-keyref="GameMaker Name">GameMaker</span> where to draw the values to in the room. This flexibility is one of the main reasons why <span class="inline2">for</span> loops are so important in programming.</p><p><strong>When should you use a <span class="inline">for</span> loop?</strong> Anytime you need to perform a fixed number of iterations over one or more statements&nbsp;while keeping track of the <a class="tooltip" title="An iteration is a single pass through a set of operations in your project code. One form of iteration in computer programming is via loops. A loop will repeat a certain segment of code until a condition is met and it can proceed further. Each time the computer runs a loop, it is known as an iteration. In simple terms, iteration is the process of repeating a particular snippet of code over and over again to perform a certain action.">iteration</a> that is currently being run and using that iteration value.</p><p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;You will see multiple examples when working with other people of the variables <span class="inline2">i</span>&nbsp;and <span class="inline2">j</span>&nbsp;being used for the loop counter variable. These are <b>not</b> obligatory variable names and you can use anything like <span class="inline2">a</span>&nbsp;or <span class="inline2">foo</span>&nbsp;or whatever. The use of <span class="inline2">i</span>&nbsp;and <span class="inline2">j</span>&nbsp;is simply a standard convention in programming.</p><p>It is worth noting that you can use the special&nbsp;<span class="inline2"><a href="break.htm">break</a></span>&nbsp;and&nbsp;<span class="inline2"><a href="continue.htm">continue</a></span> statements within a <span class="inline2">for</span> loop too. Using <span class="inline2">break</span> will immediately exit the loop and move on to any code that is in the event or function after the loop should have finished, e.g.:</p><p class="code">var _inst =&nbsp;noone;<br>for (var i = 0; i &lt; 10; i += 1)<br>{<br>&nbsp; &nbsp; _inst = instance_find(obj_Enemy_Parent, i);<br>&nbsp; &nbsp; if (instance_exists(_inst))<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; if (_inst.object_index == obj_Enemy_Melee)<br>&nbsp; &nbsp; &nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; }<br>}<br>target = _inst;</p><p>The above code loops through the 10 nearest instances of the given "parent" object, and if an instance is found it checks the instance object ID, and if it is an instance of <span class="inline2">obj_Enemy_Melee</span> then the loop is ended using&nbsp;<span class="inline2"><a href="break.htm">break</a></span> and the ID value assigned to a variable (if no instance is found, then the keyword <span class="inline2"><span class="inline"><a href="../Instance_Keywords.htm">noone</a></span></span> will be&nbsp;added to the variable).</p><p>An example of using <span class="inline2">continue</span> in a <span class="inline2">for</span> loop would be:</p><p class="code">var _val = 0;<br>for (var i = 0; i &lt; 10; i += 1)<br>{<br>&nbsp; &nbsp; if (val_array[i] &lt;=&nbsp;0)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; continue;<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; _val += val_array[i];<br>}<br>draw_text(32, 32, "Positive Values Total = " + string(_val));</p><p>This code will check the value stored in each array position of a 10 length 1D&nbsp;<a href="../Arrays.htm">array</a>, and if any are less than or equal to 0 it will <span class="inline2">continue</span> the loop, meaning that the current iteration will end, <span class="inline2">i</span> will be incremented, and the next loop iteration will be started. If the value is greater than 0, then it is added to the local variable <span class="inline2">_val</span>, and after the loop is finished the total value is drawn to the screen.</p><p>For more examples of loop keywords please see the sections on <span class="inline2"><a href="repeat.htm">repeat</a></span>, <span class="inline2"><a href="while.htm">while</a></span>, and <span class="inline2"><a href="do___until.htm">do / until</a></span>.</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="../Language_Features.htm">Language&nbsp;Features</a></div><div style="float:right">Next: <a href="switch.htm">switch</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>