<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/main.css"><script>let str;removeHtml=function(t){return t=(t=(t=(t=t.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(t){return t.match(/(<([^>]+)>)/gi)},setTranslator=function(t,e,n){let o;o=n?t.attr(n):t.html();let l=e[removeHtml(o)];if(null!=l&&l.length){e=retHtml(o);let a=0;e&&e.forEach(function(t,e){var n=l.replace("{"+a+"}",t);l=n===l?l.replace("{}",t):n,a++}),n?t.attr(n,l):t.html(l)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var t=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(t):($(".topic-header").append(t),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(t){return t.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={"A simple example of use is shown below:":"一个简单的使用示例如下所示：","At it's most basic the {}try{} syntax is as follows:":"最基本的 {}try{} 语法如下：","Finally, you can also nest various {}try{} / {}catch{} / {}finally{} within each other, for example:":"最后，您还可以将各种 {}try{} / {}catch{} / {}finally{} 相互嵌套，例如：","However, having a {}try{} without anything to actually handle any exceptions the code may produce will not be very helpful, so we usually pair it with a {}catch{}, with the following syntax:":"但是，如果 {}try{} 没有任何内容来实际处理代码可能产生的任何异常，将不会很有帮助，因此我们通常将其与 {}catch{} 配对，语法如下：","It is worth noting that you can have any combination of these together, ie:":"值得注意的是，您可以将这些组合在一起，即：","It is worth noting that you can take over the default GML error message and use your own handler code by calling the function {}{}exception_unhandled_handler(){}{}. This {}runtime function{} permits you to supply a custom {}method{} to use that will be called whenever any unhandled exceptions occur in your game.":"值得注意的是，您可以接管默认的 GML 错误消息并通过调用函数 {}{}exception_unhandled_handler(){}{} 使用您自己的处理程序代码。此{}运行时函数{}允许您提供自定义{}方法{}以供您在游戏中发生任何未处理的异常时调用。","It may be that you want to run some code regardless of whether an exception was thrown or not, and so for that you can add in a {}finally{} block. The {}finally{} syntax is:":"您可能希望无论是否抛出异常都运行一些代码，因此您可以添加一个 {}finally{} 块。 {}finally{} 语法是：","Note that within the {}finally{} block you {}cannot {}use {}{}break{}{}, {}{}continue{}{}, {}{}exit{}{} or {}{}return{}{} statements as they have no meaning in this context and the compiler will generate an error if they are used.":"注意，在{}finally{}块中，你{}不能{}使用{}{}break{}{}、{}{}continue{}{}、{}{}exit{}{}或{}{}return{}{}语句，因为它们在这里没有意义，如果使用它们，编译器将产生错误。","The {}try{}, {}catch{} and {}finally{} statements can be used in your game for error checking and permit you to test out blocks of code and control what happens if any {}runtime exceptions{} occur. Using these will prevent the exception ending the game and showing the standard error message to the user, but this means that you will have to handle what happens next in that case, like saving out log files - for example - and ending the game gracefully (note that if you choose to do nothing, your game may become unstable and not perform correctly).":"{}try{}、{}catch{} 和 {}finally{} 语句可在您的游戏中用于错误检查并允许您测试代码块并控制发生任何{}运行时异常{}时发生的情况.使用这些将防止异常结束游戏并向用户显示标准错误消息，但这意味着您将必须处理在这种情况下接下来发生的事情，例如保存日志文件 - 并优雅地结束游戏（请注意，如果您选择什么都不做，您的游戏可能会变得不稳定并且无法正常运行）。","What {}catch{} does is permit you to run extra code supplied in the following block when an exception from the previous {}try{} has been caught. If this is a runtime exception, then the supplied variable can be used to access a {}struct{} which will contain the following information:":"{}catch{} 的作用是允许您在捕获到前一个 {}try{} 的异常时运行以下块中提供的额外代码。如果这是运行时异常，则提供的变量可用于访问包含以下信息的 {}struct{}："},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(t){json_global=t}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../..",gTopicId="8.2.1.3.0_12"</script><script type="text/javascript" src="../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>try / catch / finally</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../assets/css/default.css" type="text/css"><script src="../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Page outlining the try / catch / finally functions"><meta name="rh-index-keywords" content="try,catch,finally"><meta name="search-keywords" content="try,catch,finally"><meta name="brsnext" value="GameMaker_Language/GML_Overview/Language_Features/throw.htm"><meta name="brsprev" value="GameMaker_Language/GML_Overview/Language_Features/begin_end.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="try / catch / finally"><span>try / catch / finally</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1>try / catch / finally</h1><p>The <span class="inline">try</span>, <span class="inline">catch</span> and <span class="inline">finally</span> statements can be used in your game for error checking and permit you to test out blocks of code and control what happens if any <a href="../../../Additional_Information/Errors/Runner_Errors.htm">runtime exceptions</a> occur. Using these will prevent the exception ending the game and showing the standard error message to the user, but this means that you will have to handle what happens next in that case, like saving out log files - for example - and ending the game gracefully (note that if you choose to do nothing, your game may become unstable and not perform correctly).</p><p>At it's most basic the <span class="inline">try</span> syntax is as follows:</p><p class="code">try<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;statement1&gt;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;statement2&gt;;<br>&nbsp; &nbsp; ...<br>}</p><p>However, having a <span class="inline">try</span> without anything to actually handle any exceptions the code may produce will not be very helpful, so we usually pair it with a <span class="inline">catch</span>, with the following syntax:</p><p class="code">try<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;statement1&gt;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;statement2&gt;;<br>&nbsp;&nbsp;&nbsp;&nbsp;...<br>}<br>catch(&lt;variable&gt;)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;statement1&gt;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;statement2&gt;;<br>&nbsp;&nbsp;&nbsp;&nbsp;...<br>}</p><p>What <span class="inline">catch</span> does is permit you to run extra code supplied in the following block when an exception from the previous <span class="inline">try</span> has been caught. If this is a runtime exception, then the supplied variable can be used to access a <a href="../Structs.htm">struct</a> which will contain the following information:</p><p class="code">{<br>message : "",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// a string that is a short message for this exception<br>longMessage : "",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// a string that is a longer message for this exception<br>script : "",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// a string that describes where the exception came from<br>stacktrace : [ "", "" ],&nbsp;&nbsp;&nbsp;&nbsp;// an array of strings that is the stack frame the exception was generated<br>}</p><p>A simple example of use is shown below:</p><p class="code">var a = 0, b = 0, c = 0;<br>try<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;c = a div b;<br>}<br>catch( _exception)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;show_debug_message(_exception.message);<br>&nbsp;&nbsp;&nbsp;&nbsp;show_debug_message(_exception.longMessage);<br>&nbsp;&nbsp;&nbsp;&nbsp;show_debug_message(_exception.script);<br>&nbsp;&nbsp;&nbsp;&nbsp;show_debug_message(_exception.stacktrace);<br>}</p><p>It may be that you want to run some code regardless of whether an exception was thrown or not, and so for that you can add in a <span class="inline">finally</span> block. The <span class="inline">finally</span> syntax is:</p><p class="code">finally<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;statement1&gt;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;statement2&gt;;<br>&nbsp;&nbsp;&nbsp;&nbsp;etc...<br>}</p><p>It is worth noting that you can have any combination of these together, ie:</p><ul class="colour"><li><span class="inline">try</span> / <span class="inline">finally</span></li><li><span class="inline">try</span> / <span class="inline">catch</span></li><li><span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span></li></ul><p>Note that within the <span class="inline">finally</span> block you <em>cannot</em> use <a href="break.htm"><span class="inline">break</span></a>, <a href="continue.htm"><span class="inline">continue</span></a>, <a href="exit.htm"><span class="inline">exit</span></a> or <a href="return.htm"><span class="inline">return</span></a> statements as they have no meaning in this context and the compiler will generate an error if they are used.</p><p>Finally, you can also nest various <span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span> within each other, for example:</p><p class="code">var a = 0, b = 0, c = 0;<br>try<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;try<br>&nbsp; &nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c = a div b;<br>&nbsp; &nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;finally<br>&nbsp; &nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++a;<br>&nbsp; &nbsp; }<br>}<br>catch(_exception)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;++a;<br>&nbsp;&nbsp;&nbsp;&nbsp;show_debug_message(_exception.message);<br>&nbsp;&nbsp;&nbsp;&nbsp;show_debug_message(_exception.longMessage);<br>&nbsp;&nbsp;&nbsp;&nbsp;show_debug_message(_exception.script);<br>&nbsp;&nbsp;&nbsp;&nbsp;show_debug_message(_exception.stacktrace);<br>}<br>finally<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;show_debug_message("a = " + string(a));<br>}</p><p>It is worth noting that you can take over the default GML error message and use your own handler code by calling the function <a href="../../GML_Reference/Debugging/exception_unhandled_handler.htm"><span class="inline">exception_unhandled_handler()</span></a>. This <a href="../Runtime_Functions.htm">runtime function</a> permits you to supply a custom <a href="../Method_Variables.htm">method</a> to use that will be called whenever any unhandled exceptions occur in your game.</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="../Language_Features.htm">Language&nbsp;Features</a></div><div style="float:right">Next: <a href="throw.htm">throw</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>