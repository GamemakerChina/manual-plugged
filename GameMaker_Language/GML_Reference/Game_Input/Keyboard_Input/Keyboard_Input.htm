<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../../../assets/import/main.css"><script>let str;removeHtml=function(e){return e=(e=(e=(e=e.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(e){return e.match(/(<([^>]+)>)/gi)},setTranslator=function(e,t,a){let n;n=a?e.attr(a):e.html();let r=t[removeHtml(n)];if(null!=r&&r.length){t=retHtml(n);let o=0;t&&t.forEach(function(e,t){var a=r.replace("{"+o+"}",e);r=a===r?r.replace("{}",e):a,o++}),a?e.attr(a,r):e.html(r)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var e=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(e):($(".topic-header").append(e),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(e){return e.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={'But what if you want to use the arrow keys? Or if you want to modify an action using the "Shift" key? Well, for that {}GameMaker{} has a series of {}vk_*{} constants ({}vk_{}&nbsp;stands for {}virtual key{}) that you can use in place of {}{}ord{}{}:':'但是如果您想使用箭头键怎么办？或者如果您想使用 "Shift" 键修改操作？嗯，为此，{}GameMaker{} 有一系列 {}vk_*{} 常量 ({}vk_{} 代表 {} 虚拟键 {})，您可以使用它们来代替 {}{}ord{}{}：',"Each input character from a key (or multiple keys) is defined by its {}UTF-8{} code, which is a numerical value. This value can be retrieved for any character using the&nbsp;{}{}ord{}{}&nbsp;function but, {}GameMaker{} also has a series of {}constants{} for the most used keyboard special keys and a special functions. Typically you'd use a combination of&nbsp;{}{}ord{}{} with the {}keyboard_check*{} functions, something like this:":"一个键 (或多个键) 的每个输入字符均由其 {}UTF-8{} 代码定义，该代码是一个数值。使用 {}{}ord{}{} 函数可以检索任何角色的该值，但是，{}GameMaker{} 还为最常用的键盘特殊键和特殊函数提供了一系列 {} 常量 {}。通常，您会结合使用 {}{}ord{}{} 和 {}keyboard_check*{} 函数，如下所示：","Each input character from a key (or multiple keys) is defined by its {}UTF8{} code, which is a numerical value. This value can be retrieved for any character using the {}{}ord(){}{} function but, {}GameMaker{} also has a series of {}constants{} for the most used keyboard special keys and a special functions. Typically you'd use a combination of {}ord(){} with the {}keyboard_check*(){} functions, something like this:":"来自一个键 (或多个键) 的每个输入字符都由其{}UTF8{}代码定义，该代码是一个数值。可以使用{}{}ord(){}{}函数为任何字符检索此值，但是 ，{}GameMaker{}还具有一系列{}常量{}用于最常用的键盘特殊键和特殊函数。通常，您会使用{}ord(){}与{}keyboard_check*(){}函数的组合，如下:","Each input character from a key (or multiple keys) is defined by its {}UTF8{} code, which is a numerical value. This value can be retrieved for any character using the&nbsp;{}{}ord{}{}&nbsp;function but, {}GameMaker{} also has a series of {}constants{} for the most used keyboard special keys and a special functions. Typically you'd use a combination of {}ord(){} with the {}keyboard_check*(){} functions, something like this:":"来自一个键 (或多个键) 的每个输入字符都由其 {}UTF8{} 代码定义，该代码是一个数值。可以使用 {}{}ord(){}{} 函数为任何字符检索此值，但是 ，{}GameMaker{} 还具有一系列 {} 常量 {} 用于最常用的键盘特殊键和特殊函数。通常，您会使用 {}ord(){} 与 {}keyboard_check*(){} 函数的组合，如下:","Finally, the following variables are built-in to {}GameMaker{} and can be accessed to get information about the keyboard state and input:":"最后，{}GameMaker{}内置了以下变量，可以访问以获取有关键盘状态和输入的信息:","Function Reference":"功能参考",General:"常规","If you need to check for a key character that is not 0 - 9, A - Z or one of the VK constants, then you should be checking one of the {}keyboard_*{} variables, like {}keyboard_lastchar{} for example:":"如果您需要检查不是0- 9，a-Z或VK常量之一的关键字符，那么您应该检查{}keyboard_*{}变量之一，例如{}keyboard_lastchar{}例如:","If you need to check for a key character that is not 0 - 9, A - Z or one of the VK constants, then you should be checking one of the {}keyboard_*{} variables, like&nbsp;{}{}keyboard_lastchar{}{} for example:":"如果您需要检查不是 0-9，a-Z 或 VK 常量之一的关键字符，那么您应该检查 {}keyboard_*{} 变量之一，例如 {}{}keyboard_lastchar{}{} 例如:","If you need to check for a key character that is not 0 - 9, A - Z or one of the {}vk_*{}&nbsp;constants, then you should be checking one of the {}keyboard_*{}&nbsp;variables, like&nbsp;{}{}keyboard_lastchar{}{} for example:":"如果您需要检查不是 0 - 9、A - Z 或 {}vk_*{} 常量之一的关键字符，那么您应该检查 {}keyboard_*{} 变量之一，例如 {}{}keyboard_lastchar{}{} 例如：","Keyboard Input":"键盘输入","Keyboard State &amp; Input":"键盘状态 和 输入","Simulating Keypresses":"模拟按键",'So, the above will check the "A" key and if it\'s being pressed then it\'ll set the horizontal speed of the object to -5. Note, that using {}ord(){} in this way will only function correctly if the input string is only one character in length and is a number from 0 to 9 or a {}capitalised{} Roman character from A to Z. The function {}ord(){} will return a full UTF8 value, but the {}keyboard_check*(){} functions will {}only detect A - Z and 0 - 9{}. But what if you want to use the arrow keys? Or if you want to modify an action using the "shift" key? Well, for that {}GameMaker{} has a series of {}vk_{} constants ({}vk_{} stands for {}virtual key{}) that you can use in place of {}ord(){}:':"因此，以上内容将检查 “A” 键，如果按下该键，则将对象的水平速度设置为-5。请注意，以这种方式使用{}ord(){}只有当输入字符串的长度只有一个字符并且是从0到9的数字或从a到Z的{}大写{}罗马字符时，才会正常工作。函数{}ord(){}将返回完整的UTF8值，但{}keyboard_check*(){}函数将{}仅检测a-Z和0- 9{}。但是，如果您想使用箭头键怎么办？或者如果你想使用 “shift” 键修改一个动作？好吧，对于{}GameMaker{}具有一系列{}vk_{}常量 ({}vk_{}代表{}虚拟按键{})，您可以使用它们代替{}ord(){}:","So, the above will check the \"A\" key and if it's being pressed then it'll set the horizontal speed of the object to -5. Note, that using&nbsp;{}{}ord{}{} in this way will only function correctly if the input string is only one character in length and is a number from 0 to 9 or a {}capitalised{} Roman character from A to Z. The function&nbsp;{}{}ord{}{} will return a full UTF-8 value, but the {}keyboard_check*{} functions will {}only detect A - Z and 0 - 9{}.":'因此，上面的代码将检查 "A" 键，如果按下它，则会将对象的水平速度设置为 -5。请注意，只有当输入字符串长度只有一个字符并且是 0 到 9 之间的数字或从 A 到 {4} 大写 {5} 的罗马字符时，以这种方式使用 {}{}ord{}{} 才能正确运行 Z。函数 {}{}ord{}{} 将返回完整的 UTF-8 值，但 {}keyboard_check*{} 函数将 {} 仅检测 A - Z 和 0 - 9{}。','The above code will detect if the "Tab" key is {}pressed{} and create an instance of object "obj_Menu" if it is.':"上面的代码将检测 “Tab” 键是否被{}按下，如果是，则创建对象 “obj_Menu” 的实例。",'The above code will detect if the "Tab" key is {}pressed{} and create an instance of object {}obj_Menu{}&nbsp;if it is.':'上述代码将检测是否 {} 按下了 {}"Tab" 键，如果按下则创建对象 {}obj_Menu{} 的实例。',"The following constants can only be used with {}keyboard_check_direct(){}:":"以下常量只能与{}keyboard_check_direct(){}一起使用:","The following constants can only be used with {}{}keyboard_check_direct{}{}:":"以下常量只能与 {}{}keyboard_check_direct{}{} 一起使用：","The following functions are available for use when working with a keyboard:":"使用键盘时可以使用以下函数:","There are also some functions that can be used to simulate keypresses:":"还有一些函数可以用来模拟按键:","Virtual Key Constant (vk_*)":"虚拟键常数(vk_*)","When dealing with the keyboard in {}GameMaker{} you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely.":"在 {}GameMaker{} 中处理键盘时，您可以使用多种函数来识别不同的键盘状态，例如按下或释放。还有一些将所有按键存储为字符串，或者可以告诉您最后按下的按键是什么，以及其他允许您完全清除键盘状态的按键。","When dealing with the keyboard in {}GameMaker{} you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely.":"在{}GameMaker{}中处理键盘时，您可以使用多种函数来识别不同的键盘状态，例如按下或释放。还有一些将所有按键存储为字符串，或者可以告诉您最后按下的按键是什么，以及其他允许您完全清除键盘状态的按键。","add key on the numeric keypad":"在数字键盘上加法键","alt key":"Alt 键","backspace key":"退格键","decimal dot keys on the numeric keypad":"数字键盘上的小数点键","delete key":"Delete 键","divide key on the numeric keypad":"数字键盘上的除法键","either of the control keys":"任意控制 (Ctrl) 键","either of the shift keys":"任意 Shift 键","end key":"End 键","enter key":"Enter 键","escape key":"Escape 键","home key":"Home 键","insert key":"Insert 键","keycode for the down arrow key":"向下箭头键的键码","keycode for the function keys F1 to F12":"函数键F1至F12的键码","keycode for the left arrow key":"左箭头键的键码","keycode for the right arrow key":"右箭头键的键码","keycode for the up arrow key":"向上箭头键的键码","keycode representing that any key is pressed":"表示按下任何键的键码","keycode representing that no key is pressed":"表示未按下键的键码","left alt key":"左 Alt 键","left control key":"左控制 (Ctrl) 键","left shift key":"左 Shift 键","multiply key on the numeric keypad":"数字键盘上的乘法键","number keys on the numeric keypad":"数字键盘上的数字键","pagedown key":"PageDown / PgDn 键","pageup key":"PageUp / PgUp 键","pause/break key":"Pause / Break 键","printscreen/sysrq key":"PrintScreen/SysRq 键","right alt key":"右 Alt 键","right control key":"右控制 (Ctrl) 键","right shift key":"右 Shift 键","space key":"空格键","subtract key on the numeric keypad":"数字键盘上的减法键","tab key":"Tab 键","{}Keyboard Input{}":"{}键盘输入{}","{}NOTE{}: These functions will {}not{} work when using an on-screen {}Virtual Keyboard{}.":"{}注意{}: 使用屏幕上的{}{}{}虚拟键盘{}时，这些函数不会起作用。","{}NOTE{}: When using the {}Virtual Keyboard{}, {}only{} the {}{}keyboard_string{}{} variable will be updated with the keyboard input.":"{}注意{}: 使用{}虚拟键盘{}{}时仅{}{}{}keyboard_string{}{}变量会随键盘输入而更新。","{}The following is a small example of how to use the {}vk_*{}&nbsp;{}{}constants:{}":"{} 以下是如何使用 {}vk_*{}{}{} 常量的小示例：{}","{}The following is a small example of how to use the{}{}&nbsp;{}{}vk_{}{}&nbsp;{}{}constants:{}":"{}以下是如何使用{}{}{}{}vk_{}{}{}{}常量{}的小例子 :","{}{}NOTE{}{} These functions are designed for Windows/Mac/Ubuntu desktop platforms only. You may find some of the built-in variables and constants aren't valid on other platforms and many of the functions won't work on mobiles.":"{}{}注意{}{}这些函数仅适用于Windows/Mac/Ubuntu桌面平台。您可能会发现一些内置的变量和常量在其他平台上无效，并且许多函数在手机上不起作用。","{}{}NOTE{}{}&nbsp;These functions are designed for Windows/Mac/Ubuntu desktop platforms only. You may find some of the built-in variables and constants aren't valid on other platforms and many of the functions won't work on mobiles.":"{}{}注意{}{} 这些函数仅适用于 Windows/Mac/Ubuntu 桌面平台。您可能会发现一些内置的变量和常量在其他平台上无效，并且许多函数在手机上不起作用。","{}{}NOTE{}{}&nbsp;These functions will {}not{} work when using an on-screen {}Virtual Keyboard{}.":"{}{}注意{}{} 使用屏幕上的{6}虚拟键盘{7}时，这些函数{}不会{}起作用。","{}{}NOTE{}{}&nbsp;When using the {}Virtual Keyboard{}, {}only{} the&nbsp;{}{}keyboard_string{}{} variable will be updated with the keyboard input.":"{}{} 注意{}{} 使用 {} 虚拟键盘 {}{} 时仅 {}{}{}keyboard_string{}{} 变量会随键盘输入而更新。"},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(e){json_global=e}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../../..",gTopicId="8.2.2.8.1"</script><script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Keyboard Input</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css"><script src="../../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Reference section for Keyboard Input"><meta name="rh-index-keywords" content="vk_nokey,vk_anykey,vk_left,vk_right,vk_up,vk_down,vk_enter,vk_escape,vk_space,vk_shift,vk_control,vk_alt,vk_backspace,vk_tab,vk_home,vk_end,vk_delete,vk_insert,vk_pageup,vk_pagedown,vk_pause,vk_printscreen,vk_f1,vk_f2,vk_f3,vk_f4,vk_f5,vk_f6,vk_f7,vk_f8,vk_f9,vk_f10,vk_f11,vk_f12,vk_numpad0,vk_numpad1,vk_numpad2,vk_numpad3,vk_numpad4,vk_numpad5,vk_numpad6,vk_numpad7,vk_numpad8,vk_numpad9,vk_multiply,vk_divide,vk_add,vk_subtract,vk_decimal,vk_lshift,vk_lcontrol,vk_lalt,vk_rshift,vk_rcontrol,vk_ralt"><meta name="search-keywords" content="Keyboard Input,vk_nokey,vk_anykey,vk_left,vk_right,vk_up,vk_down,vk_enter,vk_escape,vk_space,vk_shift,vk_control,vk_alt,vk_backspace,vk_tab,vk_home,vk_end,vk_delete,vk_insert,vk_pageup,vk_pagedown,vk_pause,vk_printscreen,vk_f1,vk_f2,vk_f3,vk_f4,vk_f5,vk_f6,vk_f7,vk_f8,vk_f9,vk_f10,vk_f11,vk_f12,vk_numpad0,vk_numpad1,vk_numpad2,vk_numpad3,vk_numpad4,vk_numpad5,vk_numpad6,vk_numpad7,vk_numpad8,vk_numpad9,vk_multiply,vk_divide,vk_add,vk_subtract,vk_decimal,vk_lshift,vk_lcontrol,vk_lalt,vk_rshift,vk_rcontrol,vk_ralt"><meta name="brsnext" value="GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/io_clear.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Game_Input/Game_Input.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Keyboard Input"><span>Keyboard Input</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">Keyboard Input</span></h1><p>When dealing with the keyboard in <span data-keyref="GameMaker Name">GameMaker</span> you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key presses as a string or that can tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely.</p><p>Each input character from a key (or multiple keys) is defined by its <a href="https://en.wikipedia.org/wiki/UTF-8" target="_blank">UTF-8</a> code, which is a numerical value. This value can be retrieved for any character using the&nbsp;<span class="inline3_func"><a href="../../Strings/ord.htm">ord</a></span>&nbsp;function but, <span data-keyref="GameMaker Name">GameMaker</span> also has a series of <span class="inline">constants</span> for the most used keyboard special keys and a special functions. Typically you'd use a combination of&nbsp;<span class="inline3_func"><a href="../../Strings/ord.htm">ord</a></span> with the <span class="inline3_func">keyboard_check*</span> functions, something like this:</p><p class="code">if (keyboard_check(ord("A")))<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;hspeed = -5;<br>}</p><p>So, the above will check the "A" key and if it's being pressed then it'll set the horizontal speed of the object to -5. Note, that using&nbsp;<span class="inline3_func"><a href="../../Strings/ord.htm">ord</a></span> in this way will only function correctly if the input string is only one character in length and is a number from 0 to 9 or a <i>capitalised</i> Roman character from A to Z. The function&nbsp;<span class="inline3_func"><a href="../../Strings/ord.htm">ord</a></span> will return a full UTF-8 value, but the <span class="inline3_func">keyboard_check*</span> functions will <i>only detect A - Z and 0 - 9</i>.</p><p>But what if you want to use the arrow keys? Or if you want to modify an action using the "Shift" key? Well, for that <span data-keyref="GameMaker Name">GameMaker</span> has a series of <span class="inline2">vk_*</span> constants (<span class="inline2">vk_</span>&nbsp;stands for <i>virtual key</i>) that you can use in place of <span class="inline3_func"><a href="../../Strings/ord.htm">ord</a></span>:</p><table id="table" style="caption-side:top"><caption>Virtual Key Constant (vk_*)</caption><colgroup><col><col></colgroup><tbody><tr><th>Constant</th><th>Description</th></tr><tr><td><span class="inline"><a id="vk_nokey"></a>vk_nokey</span></td><td>keycode representing that no key is pressed</td></tr><tr><td><span class="inline">vk_anykey</span></td><td>keycode representing that any key is pressed</td></tr><tr><td><span class="inline">vk_left</span></td><td>keycode for the left arrow key</td></tr><tr><td><span class="inline">vk_right</span></td><td>keycode for the right arrow key</td></tr><tr><td><span class="inline">vk_up</span></td><td>keycode for the up arrow key</td></tr><tr><td><span class="inline">vk_down</span></td><td>keycode for the down arrow key</td></tr><tr><td><span class="inline">vk_enter</span></td><td>enter key</td></tr><tr><td><span class="inline">vk_escape</span></td><td>escape key</td></tr><tr><td><span class="inline">vk_space</span></td><td>space key</td></tr><tr><td><span class="inline">vk_shift</span></td><td>either of the shift keys</td></tr><tr><td><span class="inline">vk_control</span></td><td>either of the control keys</td></tr><tr><td><span class="inline">vk_alt</span></td><td>alt key</td></tr><tr><td><span class="inline">vk_backspace</span></td><td>backspace key</td></tr><tr><td><span class="inline">vk_tab</span></td><td>tab key</td></tr><tr><td><span class="inline">vk_home</span></td><td>home key</td></tr><tr><td><span class="inline">vk_end</span></td><td>end key</td></tr><tr><td><span class="inline">vk_delete</span></td><td>delete key</td></tr><tr><td><span class="inline">vk_insert</span></td><td>insert key</td></tr><tr><td><span class="inline">vk_pageup</span></td><td>pageup key</td></tr><tr><td><span class="inline">vk_pagedown</span></td><td>pagedown key</td></tr><tr><td><span class="inline">vk_pause</span></td><td>pause/break key</td></tr><tr><td><span class="inline">vk_printscreen</span></td><td>printscreen/sysrq key</td></tr><tr><td><span class="inline">vk_f1 ... vk_f12</span></td><td>keycode for the function keys F1 to F12</td></tr><tr><td><span class="inline">vk_numpad0 ... vk_numpad9</span></td><td>number keys on the numeric keypad</td></tr><tr><td><span class="inline">vk_multiply</span></td><td>multiply key on the numeric keypad</td></tr><tr><td><span class="inline">vk_divide</span></td><td>divide key on the numeric keypad</td></tr><tr><td><span class="inline">vk_add</span></td><td>add key on the numeric keypad</td></tr><tr><td><span class="inline">vk_subtract</span></td><td>subtract key on the numeric keypad</td></tr><tr><td><span class="inline">vk_decimal</span></td><td>decimal dot keys on the numeric keypad</td></tr><tr><td><span class="inline">vk_lshift</span></td><td>left shift key</td></tr><tr><td><span class="inline">vk_lcontrol</span></td><td>left control key</td></tr><tr><td><span class="inline">vk_lalt</span></td><td>left alt key</td></tr><tr><td><span class="inline">vk_rshift</span></td><td>right shift key</td></tr><tr><td><span class="inline">vk_rcontrol</span></td><td>right control key</td></tr><tr><td><span class="inline">vk_ralt</span></td><td>right alt key</td></tr></tbody></table><p><span style="text-align:justify">The following is a small example of how to use the <span class="inline2">vk_*</span>&nbsp;</span><span style="text-align:justify">constants:</span></p><p class="code">if (keyboard_check_pressed(vk_tab))<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;instance_create_layer(x, y, "Controllers", obj_Menu);<br>}</p><p>The above code will detect if the "Tab" key is <i>pressed</i> and create an instance of object <span class="inline2">obj_Menu</span>&nbsp;if it is.</p><p>If you need to check for a key character that is not 0 - 9, A - Z or one of the <span class="inline2">vk_*</span>&nbsp;constants, then you should be checking one of the <span class="inline2">keyboard_*</span>&nbsp;variables, like&nbsp;<span class="inline2"><a href="keyboard_lastchar.htm">keyboard_lastchar</a></span> for example:</p><p class="code">var _key = keyboard_lastchar;<br>if ord(_key) == ord("ç")<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;show_debug_message("ç key pressed");<br>}</p><h2 id="func_ref">Function Reference</h2><h3 id="general">General</h3><p class="note"><span data-conref="../../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;These functions will <i>not</i> work when using an on-screen <a href="../Virtual_Keys_And_Keyboards/Virtual_Keys_And_Keyboards.htm">Virtual Keyboard</a>.</p><ul class="colour"><li><a href="io_clear.htm">io_clear</a></li><li><a href="keyboard_check.htm">keyboard_check</a></li><li><a href="keyboard_check_pressed.htm">keyboard_check_pressed</a></li><li><a href="keyboard_check_released.htm">keyboard_check_released</a></li><li><a href="keyboard_check_direct.htm">keyboard_check_direct</a></li><li><a href="keyboard_clear.htm">keyboard_clear</a></li><li><a href="keyboard_set_map.htm">keyboard_set_map</a></li><li><a href="keyboard_get_map.htm">keyboard_get_map</a></li><li><a href="keyboard_unset_map.htm">keyboard_unset_map</a></li><li><a href="keyboard_set_numlock.htm">keyboard_set_numlock</a></li><li><a href="keyboard_get_numlock.htm">keyboard_get_numlock</a></li></ul><h3 id="simulating_keypresses">Simulating Keypresses</h3><ul class="colour"><li><a href="keyboard_key_press.htm">keyboard_key_press</a></li><li><a href="keyboard_key_release.htm">keyboard_key_release</a></li></ul><h3 id="keyboard_state_input">Keyboard State &amp; Input</h3><p class="note"><span data-conref="../../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;When using the <a href="../Virtual_Keys_And_Keyboards/Virtual_Keys_And_Keyboards.htm">Virtual Keyboard</a>, <i>only</i> the&nbsp;<span class="inline2"><a href="keyboard_string.htm">keyboard_string</a></span> variable will be updated with the keyboard input.</p><ul class="colour"><li><a href="keyboard_key.htm">keyboard_key</a></li><li><a href="keyboard_lastkey.htm">keyboard_lastkey</a></li><li><a href="keyboard_lastchar.htm">keyboard_lastchar</a></li><li><a href="keyboard_string.htm">keyboard_string</a></li></ul><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back:&nbsp;<a href="../Game_Input.htm">Game Input</a></div><div style="float:right">Next:&nbsp;<a href="../Mouse_Input/Mouse_Input.htm">Mouse Input</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>