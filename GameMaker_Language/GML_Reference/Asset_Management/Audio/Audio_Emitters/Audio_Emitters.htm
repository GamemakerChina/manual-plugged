<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../../../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../../../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../../../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../../../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../../../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../../../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../../../../assets/import/main.css"><script>let str;removeHtml=function(e){return e=(e=(e=(e=e.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(e){return e.match(/(<([^>]+)>)/gi)},setTranslator=function(e,t,n){let a;a=n?e.attr(n):e.html();let i=t[removeHtml(a)];if(null!=i&&i.length){t=retHtml(a);let o=0;t&&t.forEach(function(e,t){var n=i.replace("{"+o+"}",e);i=n===i?i.replace("{}",e):n,o++}),n?e.attr(n,i):e.html(i)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var e=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(e):($(".topic-header").append(e),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(e){return e.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={"Adding an emitter":"添加发射器","Additional listeners":"其他侦听器","After setting a falloff model and making sure the listener's position and orientation are updated correctly, you can start playing sounds in the 3D audio space using&nbsp;{}audio_play_sound_at{}:&nbsp;":"设置衰减模型并确保正确更新收听者的位置和方向后，可以使用{}audio_play_sound_at{}在3D音频空间中开始播放声音：","All in all,&nbsp;{}audio_play_sound_at{}&nbsp;is a good way to play simple sounds in 3D audio space but it is limited. It doesn't allow you to change the position, the velocity or the falloff parameters once the sound is playing. Position and falloff parameters {}are{} passed to the function but cannot be changed afterwards.":"总之，{}audio_play_sound_at{}是在3D音频空间播放简单声音的好方法，但有限。一旦播放声音，它不允许您更改位置、速度或衰减参数。位置和衰减参数{}传递给函数，但以后无法更改。",'An audio emitter "emits" a sound. It can be compared to a speaker in the real world.':'音频发射器"发出"声音。它可以与现实世界中的扬声器相比较。',"At one point you may have quite a few sound instances playing. In that case you could store them in an array as follows:&nbsp;":"在某个时刻，您可能有相当多的声音实例正在播放。在这种情况下，您可以按如下方式将其存储在数组中：","Audio emitters are added using&nbsp;{}audio_emitter_create{}. They are placed at&nbsp;{}(0, 0, 0){}, have a velocity of 0 and default falloff settings.":"使用{}audio_emitter_create{}添加音频发射器。 它们位于{}( 0， 0， 0){}，具有 0 的速度和默认衰减设置。","Audio emitters are provided to increase the flexibility of the {}GameMaker{} audio engine, and they permit you to add real time effects to your audio assets, like pitch and Doppler variations, as well as the ability to position your sounds within the 3D audio space and give them realistic motion effects. All these functions are affected by the position of the {}listener{} within the audio environment and so will require that you use the provided functions for changing the listener position, velocity and orientation too (see - {}Audio Listeners{}).":"提供音频发射器可增强{}GameMaker{}音频引擎的灵活性，并允许您在音频资源中添加实时效果，如音调和多普勒变化，以及将声音定位在3D音频空间内并提供逼真的运动效果。所有这些函数都受{}收听者{}在音频环境中的位置影响，因此需要您使用所提供的函数来更改收听者的位置、速度和方向(请参见-{}音频监听器{})。","Audio emitters created by&nbsp;{}GameMaker{}":"{}GameMaker{}创建的音频发射器","By combining audio emitters and listeners you can create a rich, lively environment. Setting this up can be a bit involved so in this part we will look at the things that you need to do to set up a full system with emitters and the default listener.":"通过结合音频发射器和收听者，您可以创造一个丰富、活泼的环境。设置此设置可能涉及一些内容，因此在本部分中，我们将讨论如何设置具有发射器和默认侦听器的完整系统。","Compared to&nbsp;{}audio_play_sound_at{}, an emitter can have its position, velocity, listener mask and falloff parameters changed after you start playing a sound on it using {}audio_play_sound_on{}.":"与{}audio_play_sound_at{}相比，发射器在开始使用{}audio_play_sound_on{}播放声音后，其位置、速度、监听器掩码和衰减参数可以更改。","Every time the above piece of code is executed the newly created sound instance's ID is added to the {}bird_sounds{} array.":"每次执行上述代码时，新创建的声音实例的ID都会添加到{}bird_sounds{}数组中。","Every time you call one of {}audio_play_sound{},&nbsp;{}audio_play_sound_at{}&nbsp;or&nbsp;{}audio_play_sound_on{}&nbsp;you create a new sound {}instance{}.":"每次调用{}audio_play_sound{}、{}audio_play_sound_at{}或{}audio_play_sound_on{}之一时，都会创建一个新的声音{}实例{}。","Everything that you expect to hear in the left speaker will actually be heard in the right speaker and vice versa (see the page on {}audio_listener_orientation{}&nbsp;for an image of how this looks). So once you start moving emitters and the listener around, make sure to set the listener's orientation to the following:&nbsp;":"您期望在左扬声器中听到的所有声音实际上都会在右扬声器中听到，反之亦然(请参见{}audio_listener_orientation{}页的图片了解其外观)。因此，一旦开始移动发射器和接收器，请确保将接收器的方向设置为：","From the moment the relative position of the listener to the sound or emitter changes (by either changing the listener or the emitter position) this will no longer be the case.":"从收听者与声音或发射器的相对位置改变(通过改变收听者或发射器位置)的那一刻起，这种情况将不再存在。",Functions:"函数","If there is more than one listener,&nbsp;{}audio_get_listener_info{}&nbsp;can be used to get the name, listener mask and index of every listener.":"如果存在多个侦听器，可以使用{}audio_get_listener_info{}获取每个监听器的名称、监听器掩码和索引。","If you know the listener index you can change its settings (position, velocity and orientation) using the functions starting with {}audio_listener_set_{} instead of {}audio_listener_{}.":"如果您知道侦听器索引，可以使用以{}audio_listener_set_{}而不是{}audio_listener_{}开头的函数来更改其设置(位置、速度和方向)。","If you want more control over how sounds are played, use an audio emitter.":"如果你想更好地控制声音的播放方式，请使用音频发射器。","If you want to change the properties of the sound instance you should assign the return value to a variable, like this:&nbsp;":"如果要更改声音实例的属性，应为变量指定返回值，如下所示：","If you want to use additional listeners you should first check if the system supports multiple listeners using&nbsp;{}audio_get_listener_count{}.":"如果要使用其他侦听器，应首先使用{}audio_get_listener_count{}检查系统是否支持多个侦听器。","In this line of code, instead of having an up vector that doesn't change at all (y = -1 all the time), you change it based on the direction of the player. The simplest way to do this is to use the&nbsp;{}lengthdir_x{}&nbsp;and&nbsp;{}lengthdir_y{}&nbsp;functions. The look at vector can stay the same since the listener is still looking into the screen.":"在这行代码中，不是有一个完全不变的向上向量(y=-1)，而是根据玩家的方向来改变它。最简单的方法是使用{}lengthdir_x{}和{}lengthdir_y{}函数。观看矢量可以保持不变，因为收听者仍然在查看屏幕。","It does not only have a {}position{}, it also has an {}orientation{}, which can be changed using {}audio_listener_orientation{}. By default, however, that orientation is upside down! The default orientation has the up vector set to {}(0, 1, 0){}, but since {}GameMaker{}'s&nbsp;y axis points downward, that means the listener is standing upside down in the room.":"它不仅具有{}位置{}，还具有{}方向{}，可以使用{}audio_listener_orientation{}更改该方向。 然而，默认情况下，该方向是颠倒的！默认方向的向上向量设置为{}(0， 1， 0){}，但由于{}GameMaker{}的y轴指向下，这意味着收听者在房间内倒立。","It is not strictly required that you set this but if you don't call this function the model used will be the default&nbsp;{}audio_fa{}{}lloff_none{}. This means that the gain is set to 1 and so the volume of a sound does not change with the distance from the listener to the emitter.":"不严格要求您设置此值，但如果不调用此函数，则所使用的模型将是默认的{}audio_fa{}{}lloff_none{}。 这意味着增益设置为 1，因此音量不会随从收听者到发射器的距离而改变。","Keeping track of playing sound instances":"跟踪播放声音实例","Note that you can change certain properties of the sound since it can be accessed through the {}sound_instance{} variable above. These are only properties of the sound itself, however, such as gain, offset and pitch. There is no way to change the position or velocity of sounds that are played using&nbsp;{}audio_play_sound_at{}.":"请注意，您可以更改声音的某些属性，因为它可以通过上面的{}sound_instance{}变量访问。然而，这些只是声音本身的特性，如增益、偏移和音调。无法更改使用{}audio_play_sound_at{}播放的声音的位置或速度。","Playing sounds":"播放声音","Playing sounds on an emitter":"在发射器上播放声音","Setting a falloff model":"设置衰减模型","Sounds can be played {}on{} an emitter using&nbsp;{}audio_play_sound_on{}:&nbsp;":"可使用{}audio_play_sound_on{}在{}发射器上播放{}声音：",'The above line of code plays the sound "snd_Explosion" {}at{} the position (x, y, 0) with a falloff reference distance of 100, a falloff max distance of 300 and a falloff factor of 1.':'上面的代码行在{}位置(x，y，0)播放声音"snd_Explosion"{}，其衰减参考距离为100，衰减最大距离为300，衰减系数为1。',"The above line of code will set the default listener's orientation so that it looks {}into the screen{} and&nbsp;{}faces up{}. So this corresponds to a listener standing or sitting at the computer looking at the screen.":"上面的代码行将设置默认侦听器的方向，以便它看起来{}进入屏幕{}并且{}面朝上{}。 这相当于听众站在或坐在电脑前看着屏幕。","The default audio listener is located at position {}(0, 0, 0){}. {}audio_play_sound{}&nbsp;plays a sound at the listener's position. So by default sounds that are played this way will be audible through both speakers, right and left.":"默认音频收听器位于位置{}( 0， 0， 0){}。{}audio_play_sound{}在收听者的位置播放声音。因此，默认情况下，通过左右两个扬声器都能听到以这种方式播放的声音。","The first thing to do when working with audio emitters (and with sounds played using&nbsp;{}audio_play_sound_at{} at a different position than&nbsp;{}(0, 0, 0){}) is to set a falloff model using {}{}audio_falloff_set_model(){}{}. The falloff model determines how the volume of the sound being played changes with the distance from the listener to the emitter.":"使用音频发射器(以及使用{}audio_play_sound_at{}在与{}(0， 0， 0){}不同的位置播放的声音)时，首先要使用{}{}audio_falloff_set_model(){}{}设置衰减模型。 衰减模型确定所播放声音的音量如何随着从收听者到发射器的距离而改变。","The following functions exist to deal with audio emitters:":"以下函数可用于处理音频发射器：","The position of an emitter can be updated using&nbsp;{}audio_emitter_position{}. This can be set to an instance's position:&nbsp;":"可以使用{}audio_emitter_position{}更新发射器的位置。 这可以设置为实例的位置：","The sound instance being played may not be audible for various reasons, such as its position being too far away from the listener. But it always exists.":"由于各种原因，播放的声音实例可能无法听到，例如其位置离收听者太远。但它始终存在。","The velocity of an emitter is updated using&nbsp;{}audio_emitter_velocity{}. The easiest way to set the velocity is by setting it to the {}hspeed{} and {}vspeed{} of an instance, like this:&nbsp;":"使用{}audio_emitter_velocity{}更新发射器的速度。 设置速度的最简单方法是将其设置为实例的{}hspeed{}和{}vspeed{}，如下所示：","This way you can keep track of all sound instances (of {}snd_Bird{} in the above example) that are playing.":"这样可以跟踪正在播放的所有声音实例(上例中的{}snd_Bird{})。","Updating an emitter":"更新发射器","Updating the listener":"更新侦听器","Using audio emitters and listeners":"使用音频发射器和监听器","When working with {}Sequences{},&nbsp;{}GameMaker{}&nbsp;adds creates audio emitter for every audio track ({}seqtracktype_audio{}) in the sequence.&nbsp;The ID of these emitters can be found in the&nbsp;{}Sequence Instance's{}&nbsp;{}activeTracks[i].emitterIndex{}&nbsp;property.":"使用{}序列{}时，{}GameMaker{}添加为序列中的每个音轨({}seqtracktype_audio{}) 创建音频发射器。这些发射器的 ID 可以在{}序列实例的{}{}activeTracks[i].emitterIndex{}属性中找到。","When working with {}Sequences{},&nbsp;{}GameMaker{}&nbsp;adds creates audio emitter for every audio track ({}{}seqtracktype_audio{}) in the sequence.&nbsp;{}The ID of these emitters can be found in the&nbsp;{}Sequence Instance's{}&nbsp;{}activeTracks[i].emitterIndex{}&nbsp;property.":"当使用{}序列{}时，{}GameMaker{}为序列中的每个音轨({}{}SeqTrackType_Audio{})添加和创建音频发射器。{}这些发射器的ID可以在{}序列实例的{}{}ActiveTracks[I]中找到。emitterIndex{}属性。",'When you are creating a top-down game it can be more interesting to make the listener\'s orientation follow the direction that the player (or any other "listener") is facing. That can be done by the following line of code:&nbsp;':'当您创建自上而下的游戏时，让听者的方向遵循玩家(或任何其他"听众")所面对的方向可能更有趣。这可以通过以下代码行实现：',audio_emitter_velocity:"","{}Audio Emitters{}":"{}音频发射器{}","{}GameMaker{}&nbsp;automatically updates the position of such an emitter. It does not update the velocity of an audio track emitter but this is something you can do yourself by calling&nbsp;{}audio_emitter_velocity{}&nbsp;in one of the {}Sequence Step Events{}.":"{}GameMaker{}自动更新此发射器的位置。它不更新音轨发射器的速度，但您可以通过在{}序列步骤事件{}之一中调用{}audio_emitter_velocity{}自行执行此操作。",'{}{}IMPORTANT{}{}&nbsp;That a sound is being "played" does not necessarily mean that it will be heard by the listener. Sounds that have stopped playing, that are too far away from the listener or that have a gain set that is too low (or that are played on an emitter that has a gain set that is too low) will not be audible.':'{}{}重要{}{}声音正在"播放"并不一定意味着收听者将听到该声音。停止播放的声音、离收听者太远的声音、或增益设置过低的声音(或在增益设置过低的发射器上播放的声音)将无法听到。',"{}{}NOTE{}{}&nbsp;If you want to make sure sounds can no longer be heard past the maximum distance you should set one of the falloff models that end in {}_scaled{}.":"{}{}注意{}{}如果要确保声音不再超过最大距离，则应设置以{}_scaled{}结尾的衰减模型之一。","{}{}NOTE{}{}&nbsp;The {}velocity{} of an audio emitter is expressed in {}pixels per step{}.{}{}{}{}":"{}{}注意{}{}音频发射器的{}速度{}以每步{}像素表示{}。{}{}{}{}"},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(e){json_global=e}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../../../..",gTopicId="8.2.2.3.5.1"</script><script type="text/javascript" src="../../../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Audio Emitters</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css"><script src="../../../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Page outlining the different functions and variables associated with Audio Emitters"><meta name="rh-index-keywords" content=""><meta name="search-keywords" content="Audio Emitters"><meta name="brsnext" value="GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_create.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_destroy_stream.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Audio Emitters"><span>Audio Emitters</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">Audio Emitters</span></h1><p>Audio emitters are provided to increase the flexibility of the <span data-keyref="GameMaker Name">GameMaker</span> audio engine, and they permit you to add real time effects to your audio assets, like pitch and Doppler variations, as well as the ability to position your sounds within the 3D audio space and give them realistic motion effects. All these functions are affected by the position of the <i>listener</i> within the audio environment and so will require that you use the provided functions for changing the listener position, velocity and orientation too (see - <a href="../Audio_Listeners/Audio_Listeners.htm">Audio Listeners</a>).</p><h2>Using audio emitters and listeners</h2><p>By combining audio emitters and listeners you can create a rich, lively environment. Setting this up can be a bit involved so in this part we will look at the things that you need to do to set up a full system with emitters and the default listener.</p><h3>Setting a falloff model</h3><p>The first thing to do when working with audio emitters (and with sounds played using&nbsp;<a href="../audio_play_sound_at.htm">audio_play_sound_at</a> at a different position than&nbsp;<span data-keyref="Position_Origin">(0, 0, 0)</span>) is to set a falloff model using <span class="inline"><a href="../audio_falloff_set_model.htm">audio_falloff_set_model()</a></span>. The falloff model determines how the volume of the sound being played changes with the distance from the listener to the emitter.</p><p>It is not strictly required that you set this but if you don't call this function the model used will be the default&nbsp;<span class="inline">audio_fa<span class="inline"></span>lloff_none</span>. This means that the gain is set to 1 and so the volume of a sound does not change with the distance from the listener to the emitter.</p><p class="note"><span data-conref="../../../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;If you want to make sure sounds can no longer be heard past the maximum distance you should set one of the falloff models that end in <span class="inline">_scaled</span>.</p><h3>Updating the listener</h3><p>The default audio listener is located at position <span data-keyref="Position_Origin">(0, 0, 0)</span>. <a href="../audio_play_sound.htm">audio_play_sound</a>&nbsp;plays a sound at the listener's position. So by default sounds that are played this way will be audible through both speakers, right and left.</p><p>From the moment the relative position of the listener to the sound or emitter changes (by either changing the listener or the emitter position) this will no longer be the case.</p><p>It does not only have a <strong>position</strong>, it also has an <strong>orientation</strong>, which can be changed using <a href="../Audio_Listeners/audio_listener_orientation.htm">audio_listener_orientation</a>. By default, however, that orientation is upside down! The default orientation has the up vector set to <span data-keyref="Unit_Vector_Y">(0, 1, 0)</span>, but since <span data-keyref="GameMaker Name">GameMaker</span>'s&nbsp;y axis points downward, that means the listener is standing upside down in the room.</p><p>Everything that you expect to hear in the left speaker will actually be heard in the right speaker and vice versa (see the page on <a href="../Audio_Listeners/audio_listener_orientation.htm">audio_listener_orientation</a>&nbsp;for an image of how this looks). So once you start moving emitters and the listener around, make sure to set the listener's orientation to the following:&nbsp;</p><p class="code">audio_listener_orientation(0, 0, 1, 0, -1, 0);</p><p>The above line of code will set the default listener's orientation so that it looks <strong>into the screen</strong> and&nbsp;<strong>faces up</strong>. So this corresponds to a listener standing or sitting at the computer looking at the screen.</p><p>When you are creating a top-down game it can be more interesting to make the listener's orientation follow the direction that the player (or any other "listener") is facing. That can be done by the following line of code:&nbsp;</p><p class="code">audio_listener_orientation(0, 0, 1, lengthdir_x(1, direction), lengthdir_y(1, direction), 0);</p><p>In this line of code, instead of having an up vector that doesn't change at all (y = -1 all the time), you change it based on the direction of the player. The simplest way to do this is to use the&nbsp;<a href="../../../Maths_And_Numbers/Angles_And_Distance/lengthdir_x.htm">lengthdir_x</a>&nbsp;and&nbsp;<a href="../../../Maths_And_Numbers/Angles_And_Distance/lengthdir_y.htm">lengthdir_y</a>&nbsp;functions. The look at vector can stay the same since the listener is still looking into the screen.</p><h3>Playing sounds</h3><p>After setting a falloff model and making sure the listener's position and orientation are updated correctly, you can start playing sounds in the 3D audio space using&nbsp;<a href="../audio_play_sound_at.htm">audio_play_sound_at</a>:&nbsp;</p><p class="code">sound_instance = audio_play_sound_at(snd_Explosion, x, y, 0, 100, 300, 1, true, 1);</p><p>The above line of code plays the sound "snd_Explosion" <strong>at</strong> the position (x, y, 0) with a falloff reference distance of 100, a falloff max distance of 300 and a falloff factor of 1.</p><p>Note that you can change certain properties of the sound since it can be accessed through the <span class="inline2">sound_instance</span> variable above. These are only properties of the sound itself, however, such as gain, offset and pitch. There is no way to change the position or velocity of sounds that are played using&nbsp;<a href="../audio_play_sound_at.htm">audio_play_sound_at</a>.</p><p>All in all,&nbsp;<a href="../audio_play_sound_at.htm">audio_play_sound_at</a>&nbsp;is a good way to play simple sounds in 3D audio space but it is limited. It doesn't allow you to change the position, the velocity or the falloff parameters once the sound is playing. Position and falloff parameters <i>are</i> passed to the function but cannot be changed afterwards.</p><p>If you want more control over how sounds are played, use an audio emitter.</p><h3>Adding an emitter</h3><p>Audio emitters are added using&nbsp;<a href="audio_emitter_create.htm">audio_emitter_create</a>. They are placed at&nbsp;<span data-keyref="Position_Origin">(0, 0, 0)</span>, have a velocity of 0 and default falloff settings.</p><p class="code">emitter = audio_emitter_create();</p><h3>Updating an emitter</h3><p>An audio emitter "emits" a sound. It can be compared to a speaker in the real world.</p><p>Compared to&nbsp;<a href="../audio_play_sound_at.htm">audio_play_sound_at</a>, an emitter can have its position, velocity, listener mask and falloff parameters changed after you start playing a sound on it using <a href="audio_play_sound_on.htm">audio_play_sound_on</a>.</p><p>The position of an emitter can be updated using&nbsp;<a href="audio_emitter_position.htm">audio_emitter_position</a>. This can be set to an instance's position:&nbsp;</p><p class="code">audio_emitter_position(emitter, x, y, 0);</p><p>The velocity of an emitter is updated using&nbsp;<a href="audio_emitter_velocity.htm">audio_emitter_velocity</a>. The easiest way to set the velocity is by setting it to the <a href="../../Instances/Instance_Variables/hspeed.htm">hspeed</a> and <a href="../../Instances/Instance_Variables/vspeed.htm">vspeed</a> of an instance, like this:&nbsp;</p><p class="code">audio_emitter_velocity(emitter, hspeed, vspeed, 0);</p><p class="note"><span data-conref="../../../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;The <i>velocity</i> of an audio emitter is expressed in <i>pixels per step</i>.</p><h3>Audio emitters created by&nbsp;<span data-keyref="GameMaker Name">GameMaker</span></h3><p>When working with <a href="../../Sequences/Sequences.htm">Sequences</a>,&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>&nbsp;adds creates audio emitter for every audio track (<span class="inline2">seqtracktype_audio</span>) in the sequence.&nbsp;The ID of these emitters can be found in the&nbsp;<a href="../../Sequences/Sequence_Structs/The_Sequence_Instance_Struct.htm">Sequence Instance's</a>&nbsp;<span class="inline2">activeTracks[i].emitterIndex</span>&nbsp;property.</p><p><span data-keyref="GameMaker Name">GameMaker</span>&nbsp;automatically updates the position of such an emitter. It does not update the velocity of an audio track emitter but this is something you can do yourself by calling&nbsp;<a href="audio_emitter_velocity.htm">audio_emitter_velocity</a>&nbsp;in one of the <a href="../../Sequences/Sequence_Events_Moments_Broadcast.htm">Sequence Step Events</a>.</p><h3>Playing sounds on an emitter</h3><p>Sounds can be played <strong>on</strong> an emitter using&nbsp;<a href="audio_play_sound_on.htm">audio_play_sound_on</a>:&nbsp;</p><p class="code">sound_instance = audio_play_sound_on(emitter,&nbsp;snd_Explosion, false, 10);<br></p><h3>Keeping track of playing sound instances</h3><p>Every time you call one of <a href="../audio_play_sound.htm">audio_play_sound</a>,&nbsp;<a href="../audio_play_sound_at.htm">audio_play_sound_at</a>&nbsp;or&nbsp;<a href="audio_play_sound_on.htm">audio_play_sound_on</a>&nbsp;you create a new sound <strong>instance</strong>.</p><p>The sound instance being played may not be audible for various reasons, such as its position being too far away from the listener. But it always exists.</p><p>If you want to change the properties of the sound instance you should assign the return value to a variable, like this:&nbsp;</p><p class="code">sound_instance = audio_play_sound_at(snd_Explosion, x, y, 0, 100, 300, 1, true, 1);</p><p>At one point you may have quite a few sound instances playing. In that case you could store them in an array as follows:&nbsp;</p><p class="code">var _x =&nbsp;random(room_width);<br>var _y = random(room_height);<br>var _new_sound_instance = audio_play_sound_at(snd_Bird, _x, _y, 0, 200, 400, true, 10);<br>array_push(bird_sounds, _new_sound_instance);</p><p>Every time the above piece of code is executed the newly created sound instance's ID is added to the <span class="inline2">bird_sounds</span> array.</p><p>This way you can keep track of all sound instances (of <span class="inline">snd_Bird</span> in the above example) that are playing.</p><p class="note"><span data-conref="../../../../../assets/snippets/Tag_important.hts"><span class="important">IMPORTANT</span></span>&nbsp;That a sound is being "played" does not necessarily mean that it will be heard by the listener. Sounds that have stopped playing, that are too far away from the listener or that have a gain set that is too low (or that are played on an emitter that has a gain set that is too low) will not be audible.</p><h3>Additional listeners</h3><p>If you want to use additional listeners you should first check if the system supports multiple listeners using&nbsp;<a href="../Audio_Listeners/audio_get_listener_count.htm">audio_get_listener_count</a>.</p><p>If there is more than one listener,&nbsp;<a href="../Audio_Listeners/audio_get_listener_info.htm">audio_get_listener_info</a>&nbsp;can be used to get the name, listener mask and index of every listener.</p><p>If you know the listener index you can change its settings (position, velocity and orientation) using the functions starting with <span class="inline">audio_listener_set_</span> instead of <span class="inline">audio_listener_</span>.</p><h2>Functions</h2><p>The following functions exist to deal with audio emitters:</p><ul class="colour"><li><a href="audio_emitter_create.htm">audio_emitter_create</a></li><li><a href="audio_emitter_exists.htm">audio_emitter_exists</a></li><li><a href="audio_emitter_position.htm">audio_emitter_position</a></li><li><a href="audio_emitter_velocity.htm">audio_emitter_velocity</a></li><li><a href="audio_emitter_falloff.htm">audio_emitter_falloff</a></li><li><a href="audio_emitter_gain.htm">audio_emitter_gain</a></li><li><a href="audio_emitter_pitch.htm">audio_emitter_pitch</a></li><li><a href="audio_emitter_set_listener_mask.htm">audio_emitter_set_listener_mask</a></li><li><a href="audio_emitter_free.htm">audio_emitter_free</a></li><li><a href="audio_play_sound_on.htm">audio_play_sound_on</a></li><li><a href="audio_emitter_get_gain.htm">audio_emitter_get_gain</a></li><li><a href="audio_emitter_get_pitch.htm">audio_emitter_get_pitch</a></li><li><a href="audio_emitter_get_x.htm">audio_emitter_get_x</a></li><li><a href="audio_emitter_get_y.htm">audio_emitter_get_y</a></li><li><a href="audio_emitter_get_z.htm">audio_emitter_get_z</a></li><li><a href="audio_emitter_get_vx.htm">audio_emitter_get_vx</a></li><li><a href="audio_emitter_get_vy.htm">audio_emitter_get_vy</a></li><li><a href="audio_emitter_get_vz.htm">audio_emitter_get_vz</a></li><li><a href="audio_emitter_get_listener_mask.htm">audio_emitter_get_listener_mask</a></li><li><a href="audio_emitter_bus.htm">audio_emitter_bus</a></li><li><a href="audio_emitter_get_bus.htm">audio_emitter_get_bus</a></li></ul><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back:&nbsp;<a href="../Audio.htm">Audio</a></div><div style="float:right">Next:&nbsp;<a href="../Audio_Listeners/Audio_Listeners.htm">Audio Listeners</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>