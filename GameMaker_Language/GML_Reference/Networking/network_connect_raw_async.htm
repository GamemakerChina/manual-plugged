<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/main.css"><script>let str;removeHtml=function(t){return t=(t=(t=(t=t.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(t){return t.match(/(<([^>]+)>)/gi)},setTranslator=function(t,e,n){let a;a=n?t.attr(n):t.html();let s=e[removeHtml(a)];if(null!=s&&s.length){e=retHtml(a);let o=0;e&&e.forEach(function(t,e){var n=s.replace("{"+o+"}",t);s=n===s?s.replace("{}",t):n,o++}),n?t.attr(n,s):t.html(s)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var t=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(t):($(".topic-header").append(t),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(t){return t.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={"The URL or IP to connect to (a string).":"连接到(字符串)的URL或IP。",'The above code will create a new TCP socket then attempt to create a "raw" asynchronous&nbsp;connection through that to the given URL on port 6510.':'上述代码将创建一个新的TCP套接字，然后尝试通过该套接字创建到端口6510上给定URL的"原始"异步连接。',"The difference between this function and&nbsp;{}{}network_connect_async{}{} is that this function can connect to any server and does nothing to the raw data, meaning that you have to implement the protocols yourself at the server end. Note that this function is asynchronous, generating an {}Asynchronous Networking{} event of the type&nbsp;{}network_type_non_blocking_connect{}.":"该函数与 {}{}network_connect_async{}{} 的区别在于，该函数可以连接到任何服务器，并且对原始数据不执行任何操作，这意味着您必须在服务器端自行实现协议。请注意，该函数是异步函数，会生成 {}network_type_non_blocking_connect{} 类型的 {} 异步网络 {} 事件。","The function takes the&nbsp;{}{}Network Socket ID{}{}{} {}to connect through (see {}{}network_create_socket{}{}) and requires you to give the IP address to connect to (a string, can be IPv4 or IPv6) as well as the port to connect through. If the connection fails a value of less than 0 will be returned.":"该函数采用 {}{} 网络套接字 ID{}{}{}{} 进行连接 (请参阅 {}{}network_create_socket{}{})，并要求您提供要连接的 IP 地址 (一个字符串，可以是是 IPv4 或 IPv6) 以及要连接的端口。如果连接失败，将返回小于 0 的值。","The id of the socket to use.":"要使用的套接字的ID。","The port to connect to.":"要连接到的端口。","This function sends a request to connect to a server.":"该函数发送连接到服务器的请求。","With this function you can send a request to connect to a server. The function takes the {}socket id{} to connect through (see {}{}network_create_socket(){}{}) and requires you to give the IP address to connect to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The difference between this function and {}{}network_connect_async(){}{}is that this function can connect to any server and does nothing to the raw data, meaning that you have to implement the protocols yourself at the server end. Note that this function is asynchronous, generating an {}Asynchronous Networking{} event of the type&nbsp;{}network_type_non_blocking_connect{}.":"使用此函数，您可以发送连接到服务器的请求。该函数通过{}套接字ID{}进行连接(请参阅{}{}network_create_socket(){}{})，并要求您提供要连接的IP地址到(字符串)以及要连接的端口，如果连接失败，将返回小于0的值。此函数与{}{}network_connect_async(){}{}的区别在于函数可以连接到任何服务器，而不会对原始数据执行任何操作，这意味着您必须在服务器端自行实施协议。请注意，此函数是异步的，生成类型为network_type_non_blocking_connect的{}异步网络{}{}{}事件。","With this function you can send a request to connect to a server. The function takes the {}socket id{} to connect through (see {}{}network_create_socket(){}{}) and requires you to give the IP address to connect to (a string, can be IPv4 or IPv6) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The difference between this function and {}{}network_connect_async(){}{}is that this function can connect to any server and does nothing to the raw data, meaning that you have to implement the protocols yourself at the server end. Note that this function is asynchronous, generating an {}Asynchronous Networking{} event of the type&nbsp;{}network_type_non_blocking_connect{}.":"使用此函数，您可以发送连接到服务器的请求。该函数通过{}套接字ID{}进行连接(请参阅{}{}network_create_socket(){}{})，并要求您提供要连接的IP地址到(字符串，可以是 IPv4 或 IPv6) 以及要连接的端口，如果连接失败，将返回小于0的值。此函数与{}{}network_connect_async(){}{}的区别在于函数可以连接到任何服务器，而不会对原始数据执行任何操作，这意味着您必须在服务器端自行实施协议。请注意，此函数是异步的，生成类型为network_type_non_blocking_connect的{}异步网络{}{}{}事件。","{}{}NOTE{}{}&nbsp;This function uses a TCP-like socket (i.e. {}network_socket_tcp{}). It may work with other socket types as well, but this isn't guaranteed.":"{}{} 注意{}{} 此函数使用类似 TCP 的套接字 (即 {}network_socket_tcp{})。它也可能适用于其他套接字类型，但这不能保证。"},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(t){json_global=t}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../..",gTopicId="8.2.2.15.0_8"</script><script type="text/javascript" src="../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>network_connect_raw_async</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../assets/css/default.css" type="text/css"><script src="../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Reference page for network_connect_raw_async"><meta name="rh-index-keywords" content="network_connect_raw_async"><meta name="search-keywords" content="network_connect_raw_async"><meta name="brsnext" value="GameMaker_Language/GML_Reference/Networking/network_resolve.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Networking/network_connect_raw.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="network_connect_raw_async"><span>network_connect_raw_async</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">network_connect_raw_async</span></h1><p>This function sends a request to connect to a server.</p><p>The function takes the&nbsp;<span data-keyref="Type_ID_Network_Socket"><a target="_blank" href="network_create_socket.htm">Network Socket ID</a></span><i></i> to connect through (see <span class="inline3_func"><a href="network_create_socket.htm">network_create_socket</a></span>) and requires you to give the IP address to connect to (a string, can be IPv4 or IPv6) as well as the port to connect through. If the connection fails a value of less than 0 will be returned.</p><p>The difference between this function and&nbsp;<span class="inline3_func"><a href="network_connect_async.htm">network_connect_async</a></span> is that this function can connect to any server and does nothing to the raw data, meaning that you have to implement the protocols yourself at the server end. Note that this function is asynchronous, generating an <a href="../../../The_Asset_Editors/Object_Properties/Async_Events/Networking.htm">Asynchronous Networking</a> event of the type&nbsp;<span class="inline2">network_type_non_blocking_connect</span>.</p><div data-conref="../../../assets/snippets/Note_Networking_TCP_like.hts"><p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;This function uses a TCP-like socket (i.e. <span class="inline2">network_socket_tcp</span>). It may work with other socket types as well, but this isn't guaranteed.</p></div><p>&nbsp;</p><h4>Syntax:</h4><p class="code"><span data-field="title" data-format="default">network_connect_raw_async</span>(socket, url, port);</p><table><tbody><tr><th>Argument</th><th>Type</th><th>Description</th></tr><tr><td>socket</td><td><span data-keyref="Type_ID_Network_Socket"><a target="_blank" href="network_create_socket.htm">Network Socket ID</a></span></td><td>The id of the socket to use.</td></tr><tr><td>url</td><td><span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span></td><td>The URL or IP to connect to (a string).</td></tr><tr><td>port</td><td><span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span></td><td>The port to connect to.</td></tr></tbody></table><p>&nbsp;</p><h4>Returns:</h4><p class="code"><span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span></p><p>&nbsp;</p><h4>Example:</h4><p class="code">client = network_create_socket(network_socket_tcp);<br>network_connect_raw_async(client, "www.macsweeneygames.com", 6510);</p><p>The above code will create a new TCP socket then attempt to create a "raw" asynchronous&nbsp;connection through that to the given URL on port 6510.</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="Networking.htm">Networking</a></div><div style="float:right">Next: <a href="network_resolve.htm">network_resolve</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>