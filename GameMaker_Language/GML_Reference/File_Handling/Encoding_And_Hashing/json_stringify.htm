<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../../../assets/import/main.css"><script>let str;removeHtml=function(t){return t=(t=(t=(t=t.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(t){return t.match(/(<([^>]+)>)/gi)},setTranslator=function(t,n,a){let e;e=a?t.attr(a):t.html();let l=n[removeHtml(e)];if(null!=l&&l.length){n=retHtml(e);let o=0;n&&n.forEach(function(t,n){var a=l.replace("{"+o+"}",t);l=a===l?l.replace("{}",t):a,o++}),a?t.attr(a,l):t.html(l)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){$(".header").length&&$(".header").append(`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`)},removeExtensionFromHash=function(t){return t.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")},$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../../..",gTopicId="8.2.2.17.6.0_3"</script><script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>json_stringify</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css"><script src="../../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Reference page for json_stringify"><meta name="rh-index-keywords" content="json_stringify"><meta name="search-keywords" content="json_stringify"><meta name="is_pure" content="true"><meta name="brsnext" value="GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="json_stringify"><span>json_stringify</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">json_stringify</span></h1><p>This function converts a single struct or a hierarchy of nested structs and arrays into a valid JSON string.</p><p>You supply the initial value to use (a&nbsp;<span data-keyref="Type_Struct"><a target="_blank" href="../../../GML_Overview/Structs.htm">Struct</a></span>&nbsp;or an&nbsp;<span data-keyref="Type_Array"><a target="_blank" href="../../../GML_Overview/Arrays.htm">Array</a></span>) and then the function will "stringify" it, i.e. convert it into a JSON&nbsp;string (converting&nbsp;<span data-keyref="GameMaker Name">GameMaker</span> arrays into JSON arrays,&nbsp;and&nbsp;<span data-keyref="GameMaker Name">GameMaker</span> structs into JSON objects). You can optionally choose to "prettify" it, meaning the final JSON will be formatted for easy readability.</p><h3>Usage Notes</h3><ul class="colour"><li>The function will&nbsp;<strong>not</strong><em>&nbsp;</em>serialise the data contained <em>inside</em> assets, data structures and other runtime&nbsp;assets into JSON, and will simply store the internal handle reference for the asset (which is of little use as the index will change between runs of the game).<ul><li>Upon <a href="json_parse.htm">parsing</a> the JSON, these will be converted back into runtime references so the assets can be used normally in functions. This includes any asset type that is represented as a <a href="../../../GML_Overview/Data_Types.htm">handle</a>&nbsp;(see the "<strong>Handles</strong>" section on the linked page). This conversion can be disabled when parsing.</li><li>Keep in mind that this will not be useful between game sessions as asset information may have changed, depending on the type of asset. Assets are saved using their names so these references maintain their links as long as the asset name does not change.</li><li>If you want to serialise data structures (specifically lists and maps), use the <span class="inline3_func"><a href="json_encode.htm">json_encode</a></span> function.</li></ul></li><li style="margin-top:22px;margin-bottom:-5px"><span data-keyref="GameMaker Name">GameMaker</span>&nbsp;encodes certain values in the JSON as a string so they can be read back correctly later.&nbsp;See&nbsp;<a href="../../../../Additional_Information/Guide_To_Using_JSON.htm#data_conversions">Data Conversions</a> for an overview of these conversions.</li></ul><div data-conref="../../../../assets/snippets/Note_See_Guide_To_Using_JSON.hts"><p class="note"><span data-conref="../../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;See&nbsp;<a href="../../../../Additional_Information/Guide_To_Using_JSON.htm">Guide To Using JSON</a>&nbsp;for detailed information on how to work with JSON in&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>.</p></div><div data-conref="../../../../assets/snippets/JSON_Filter_Function_Description.hts"><h3>Filter Function&nbsp;<span data-conref="../../../../assets/snippets/Tag_optional.hts"><span class="optional">OPTIONAL</span></span></h3><p>The function optionally takes a&nbsp;<span data-keyref="Type_Function"><a target="_blank" href="../../../GML_Overview/Script_Functions.htm">Function</a></span>, which runs once for each value in the structure, including all nested structs/arrays and all the values inside them.</p><p>It takes two arguments&nbsp;<span class="inline2">(key, value)</span> where <span class="inline2">key</span> is the struct key name (<span data-keyref="Type_String"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">String</a></span>) or array index (<span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span>), and <span class="inline2">value</span> is what's stored in that key/index.</p><p>The filter function must always return a value. It can return a new value, which replaces the key's value in the final converted format returned by&nbsp;<span class="inline3_func"><span data-field="title" data-format="lower-alpha">json_stringify</span></span>. If no new value should be returned for a particular key, the function must return the original <span class="inline2">value</span>.</p><p class="note"><span data-conref="../../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;When overriding a key's value in the filter function (using <a href="../../../GML_Overview/Language_Features/return.htm">return</a>), make sure you check its type first, as the filter function runs for the root structure and any nested structures as well, meaning accidentally overriding them will result in a broken final structure. See&nbsp;<strong>Example 3</strong> at the bottom.</p></div><p>&nbsp;</p><h4>Syntax:</h4><p class="code"><span data-field="title" data-format="default">json_stringify</span>(val, [pretty_print], [filter_func]);</p><table><tbody><tr><th>Argument</th><th>Type</th><th>Description</th></tr><tr><td>val</td><td><span data-keyref="Type_Struct"><a target="_blank" href="../../../GML_Overview/Structs.htm">Struct</a></span>&nbsp;or&nbsp;<span data-keyref="Type_Array"><a target="_blank" href="../../../GML_Overview/Arrays.htm">Array</a></span></td><td>The reference value for a struct or array to convert into a JSON string</td></tr><tr><td>prettify</td><td><span data-keyref="Type_Bool"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Boolean</a></span></td><td><span data-conref="../../../../assets/snippets/Tag_optional.hts"><span class="optional">OPTIONAL</span></span>&nbsp;Whether to prettify the string, i.e. insert indentation and line breaks for readability</td></tr><tr><td>filter_func</td><td><span data-keyref="Type_Function"><a target="_blank" href="../../../GML_Overview/Script_Functions.htm">Function</a></span></td><td><span data-conref="../../../../assets/snippets/Tag_optional.hts"><span class="optional">OPTIONAL</span></span>&nbsp;Filter function that processes each item. Syntax:&nbsp;<span class="inline2">function(key, value) -&gt; new_value</span></td></tr></tbody></table><p>&nbsp;</p><h4>Returns:</h4><p class="code"><span data-keyref="Type_String"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">String</a></span></p><p>&nbsp;</p><h4>Example 1:</h4><p class="code">var _contents&nbsp;=<br>{<br>&nbsp; &nbsp; version : "1.0.0",<br>&nbsp;&nbsp; &nbsp;data:<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; coins : 4,<br>&nbsp; &nbsp; &nbsp; &nbsp; mana : 15,<br>&nbsp; &nbsp; &nbsp; &nbsp; playername : "Gurpreet",<br>&nbsp; &nbsp; &nbsp; &nbsp; items :<br>&nbsp; &nbsp; &nbsp; &nbsp; [<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ITEM.SWORD,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ITEM.BOW,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ITEM.GUITAR<br>&nbsp; &nbsp; &nbsp; &nbsp; ]<br>&nbsp;&nbsp; &nbsp;}<br>};<br><br>var _json_string = json_stringify(_contents);</p><p>The above code will convert&nbsp;the <span class="inline2">_contents</span> struct into a JSON string and stores the string in a variable. The returned string would look like this:</p><p class="code">{ "data": { "items": [ 0.0, 1.0, 2.0 ], "coins": 4.0, "mana": 15.0, "playername": "Gurpreet" }, "version": "1.0.0" }</p><p>&nbsp;</p><h4>Example 2: Pretty Print</h4><p class="code">var _contents =&nbsp;<br>{<br>&nbsp; &nbsp; version: "1.0.0",<br>&nbsp; &nbsp; data:<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; coins : 5,<br>&nbsp; &nbsp; &nbsp; &nbsp; mana : 0,<br>&nbsp; &nbsp; &nbsp; &nbsp; playername : "Bart",<br>&nbsp; &nbsp; &nbsp; &nbsp; items :<br>&nbsp; &nbsp; &nbsp; &nbsp; [<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ITEM.SWORD,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ITEM.BOW,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ITEM.PIANO<br>&nbsp; &nbsp; &nbsp; &nbsp; ]<br>&nbsp; &nbsp; }<br>}<br>var _json_string = json_stringify(_contents, true);</p><p>The above code converts the <span class="inline2">_contents</span> struct into a JSON string and stores it in a variable. With the <span class="inline2">pretty_print</span> parameter set to <span class="inline2">true</span>, the struct's contents are <em>pretty printed</em> to the string, i.e. indentation and line breaks are inserted to make the resulting string look "pretty" and more readable. The string then looks like this:&nbsp;</p><p class="code">{<br>&nbsp; "data":{<br>&nbsp; &nbsp; "mana":0.0,<br>&nbsp; &nbsp; "playername":"Bart",<br>&nbsp; &nbsp; "items":[<br>&nbsp; &nbsp; &nbsp; 0,<br>&nbsp; &nbsp; &nbsp; 1,<br>&nbsp; &nbsp; &nbsp; 2<br>&nbsp; &nbsp; ],<br>&nbsp; &nbsp; "coins":5.0<br>&nbsp; },<br>&nbsp; "version":"1.0.0"<br>}</p><p>&nbsp;</p><h4>Example 3: Filter Function</h4><p class="code">var data =<br>{<br>&nbsp; &nbsp; x: 5.2344,<br>&nbsp; &nbsp; y: 10.601,<br>&nbsp; &nbsp; last_clicked: undefined,<br>&nbsp; &nbsp; values : &nbsp;[ 2000.1, 30.56, undefined, { slot : 10, skin : undefined } ]<br>}<br><br>var json = json_stringify(data, true, function(key, value)<br>{<br>&nbsp;&nbsp; &nbsp;if (is_real(value)) return round(value);<br>&nbsp;&nbsp; &nbsp;if (is_undefined(value)) return 0;<br>&nbsp;&nbsp; &nbsp;return value;<br>});<br><br>show_debug_message(json);</p><p>The above code takes a struct and stringifies it to JSON, pretty-printing it, and using a filter function to modify some types of values.</p><p>If the value is a <span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span>, it <a href="../../Maths_And_Numbers/Number_Functions/round.htm">rounds</a> it, if it's <span class="inline2">undefined</span>, it changes it to 0, otherwise it simply returns the same value (meaning it remains unchanged).</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="Encoding_And_Hashing.htm">File Encoding</a></div><div style="float:right">Next: <a href="json_parse.htm">json_parse</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>