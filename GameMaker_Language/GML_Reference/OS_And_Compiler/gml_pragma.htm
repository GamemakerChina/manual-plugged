<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/main.css"><script>let str;removeHtml=function(e){return e=(e=(e=(e=e.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(e){return e.match(/(<([^>]+)>)/gi)},setTranslator=function(e,t,a){let i;i=a?e.attr(a):e.html();let n=t[removeHtml(i)];if(null!=n&&n.length){t=retHtml(i);let o=0;t&&t.forEach(function(e,t){var a=n.replace("{"+o+"}",e);n=a===n?n.replace("{}",e):a,o++}),a?e.attr(a,n):e.html(n)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var e=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(e):($(".topic-header").append(e),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(e){return e.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={'"{}PNGCrush{}" - The "PNGCrush" pragma will use the {}PNGCrush{} program on each texture created. Note that this can add significantly to the time that it takes to compile the game, so you don\'t want it on all the time, although it can make significant savings on final file size. This option only applies to Texture Groups that use the PNG format (see {}Group Settings{}).':'"{}PNGCush{}"-"PNGCush"程序将在创建的每个纹理上使用{}PNGCush{}程序。请注意，这会显着增加编译游戏所需的时间，因此您不希望它一直开着，尽管它可以显着节省最终文件大小。此选项仅适用于使用PNG格式的纹理组(请参阅{}组设置{})。','"{}PNGCrush{}" - The "PNGCrush" pragma will use the {}PNGCrush{} program on each texture created. Note that this can add significantly to the time that it takes to compile the game, so you don\'t want it on all the time, although it can make significant savings on final file size. This option only applies to Texture Groups that use the PNG format (see {}Texture Group Format{}).':'"{}PNGCrush{}" - "PNGCrush" 编译指示将对创建的每个纹理使用 {}PNGCrush{} 程序。请注意，这会显着增加编译游戏所需的时间，因此您不希望它一直打开，尽管它可以显着节省最终文件大小。此选项仅适用于使用 PNG 格式的纹理组 (请参阅 {} 纹理组格式 {})。','"{}Texgroup.Scale{}", "{}[TextureGroupName]{}", "{}[Scale Divisor]{}" - The "Texgroup.Scale" will scale the given texture group on compile. You need to give an additional two arguments here: the "[TexGroupName]", which is the name (a string) of the texture group to scale, and the "[Scale Divisor]" (also a string), which is the divisor you wish to use for the scaling, i.e.: {}{}gml_pragma{}({}"Texgroup.Scale"{}, {}"level1"{}, {}"2"{});{} This will halve all the textures in the "level1" texture group. ':'"{}Texgroup.Scale{}"、"{}[TextureGroupName]{}"、"{}[Scale Divisor]{}" - "Texgroup.Scale" 将在编译时缩放给定的纹理组。您需要在此处提供额外的两个参数："[TexGroupName]"，它是要缩放的纹理组的名称 (字符串)，以及 "[Scale Divisor]"( 也是一个字符串)，它是除数您希望用于缩放，即：{}{}gml_pragma{}({}"Texgroup.Scale"{},{}"level1"{},{}"2"{});{} 这将减半 "level1" 纹理组中的所有纹理。','"{}Texgroup.Scale{}", "{}[TextureGroupName]{}", "{}[Scale Divisor]{}" - The "Texgroup.Scale" will scale the given texture group on compile. You need to give an additional two arguments here: the "[TexGroupName]", which is the name (a string) of the texture group to scale, and the "[Scale Divisor]" (also a string), which is the divisor you wish to use for the scaling, i.e: {}{}gml_pragma{}({}"Texgroup.Scale"{}, {}"level1"{}, {}"2"{});{} This will half all the textures in the "level1" texture group. ':'"{}Texgroup.Scale{}","{}[纹理组名称]{}","{}[比例除数]{}"-"Texgroup.Scale"将在编译时缩放给定的纹理组。您需要在这里给出额外的两个参数："[纹理组名称]"，这是要缩放的纹理组的名称(字符串)，以及"[比例除数]"(也是一个字符串)，这是您希望用于缩放的除数，即： {}{}gml_pragma{}({}"Texgroup.Scale"{}, {}"level1"{}, {}"2"{});{}这将是"级别1"纹理组中所有纹理的一半。','"{}UnityBuild{}", "{}[enable/disable]{}" - If you call the function with this pragma and set the enable/disable argument to {}true{} then on compile it will collapse all the .cpp files in the project into a single file which it then uses to build everything, for example: {}{}gml_pragma{}({}"UnityBuild"{}, {}"true"{});{} The benefit of doing a unity build is that builds are faster but the down side is that it does a {}full{} build each time so even if you change a single part of the code it will build everything again without using any cached files. This has been added specifically for the Xbox One export using the YYC although it can be called for other builds ({}YYC only{}). For more information on unity builds, please see {}here{}. ':'"{}UnityBuild{}","{}[启用/禁用]{}"-如果您使用此Pragma调用函数并将启用/禁用参数设置为{}true{}，那么在编译时，它将折叠项目中所有的cpp文件到一个文件中，然后它使用该文件来构建所有内容，例如： {}{}gml_pragma{}({}"UnityBuild"{}, {}"true"{});{}进行统一构建的好处是构建速度更快，但缺点是它每次都会进行{}完整{}构建，因此即使您更改代码的单个部分，它也会在不使用任何缓存文件的情况下再次构建所有内容。这是专门为使用YYC的Xbox One导出添加的，尽管它可以用于其他版本({}仅限YYC{})。有关统一构建的更多信息，请参阅{}此处{}。','"{}forceinline{}" - When the function is called with the "forceinline" pragma in a {}script function{}, the YYC will compile the project with the function inline, rather than referenced. This will give a further processing boost, but care must be taken when using it as it will also inflate the final executable file size, especially if the in-lined code is large and/or used in multiple different places, as well as greatly increase the compile time. Note that this pragma is {}only valid when building using the YYC{}.':'{}forceinline{}-在{}脚本函数{}中使用"forceinline"程序调用函数时，yyc将使用内嵌函数编译项目，而不是引用。这将进一步提高处理速度，但在使用时必须小心，因为它还会增加最终可执行文件的大小，特别是在内嵌代码较大和/或用于多个不同位置的情况下，以及大大增加编译时间。请注意，{}只有在使用yyc生成{}时，此命令才有效。','"{}global{}", "{}[gml code]{}" - The "global" pragma permits you to call some GML code formatted as a string, at a {}global{} scope, at compile time, before the first room of the game executes. For example: {}{}gml_pragma{}({}"global"{}, {}"Init()"{});{} This will call the script function "Init" before the first room of the game is run. Note that the GML supplied as the second argument {}must be a compile time constant{}, and also note that you cannot use this pragma to create instances or perform any operations that require a room (or anything in a room) to function. ':'"{}global{}","{}[GML代码]{}"-"global"编译指示允许您在编译时，在游戏的第一个房间执行之前，在{}全局{}范围内调用一些格式化为字符串的GML代码。例如： {}{}gml_pragma{}({}"global"{}, {}"Init()"{});{}这将在游戏的第一个房间运行之前调用脚本函数"Init"。请注意，作为第二个参数{}提供的GML必须是编译时常量{}，并且还请注意，您不能使用此命令来创建实例或执行任何需要房间(或房间中的任何内容)才能运行的操作。','"{}global{}", "{}[gml code]{}" - The "global" pragma permits you to call some GML code formatted as a string, at a {}global{} scope, at compile time, before the first room of the game executes. For example: {}{}gml_pragma{}({}"global"{}, {}"Init()"{});{} This will call the script function "Init" before the first room of the game is run. Note that the GML supplied as the second argument {}must be a compile-time constant{}, and also note that you cannot use this pragma to create instances or perform any operations that require a room (or anything in a room) to function. ':'"{}global{}"、"{}[gml code]{}" - "global" 编译指示允许您在编译时、之前在 {}global{} 范围内调用一些格式化为字符串的 GML 代码游戏的第一个房间执行。例如：{}{}gml_pragma{}({}"global"{},{}"Init()"{});{} 这将在游戏的第一个房间运行之前调用脚本函数 "Init" 。请注意，作为第二个参数提供的 GML{} 必须是编译时常量 {}，并且还要注意，您不能使用此编译指示来创建实例或执行任何需要房间 (或房间中的任何内容) 才能运行的操作。',"A string with one of the commands listed above.":"带有上面列出的命令之一的字符串。",'All the parameters to the&nbsp;{}"optimise"{} command must be known at compile-time and therefore {}must{} be constant strings, an error is generated otherwise.':'{}"optimise"{} 命令的所有参数必须在编译时已知，因此 {} 必须 {} 是常量字符串，否则会生成错误。',"As an example, to optimise the following function:&nbsp;":"例如，优化以下函数：",'Compiler optimisations are treated as {}hints{} to the compiler, it is free to ignore those hints. Also, certain optimisations may only target specific compilers, for example the JavaScript transpiler (these optimisations begin with {}"js_"{}).':'编译器优化被视为编译器的 {} 提示 {}，可以随意忽略这些提示。此外，某些优化可能仅针对特定编译器，例如 JavaScript 转译器 (这些优化以 {}"js_"{} 开头)。','Compiler optimisations can be provided with the {}"optimise"{} (or {}"optimize"{}) pragma. Their basic syntax is:&nbsp;':'编译器优化可以通过 {}"optimise"{}( 或 {}"optimize"{}) 编译指示来提供。它们的基本语法是：',Example:"例子","If ON then JavaScript's binary operators {}+{}, {}-{}, {}*{}, etc. are used in preference to using&nbsp;{}GameMaker{}'s type checking functions. In this case you need to make sure that all variables used in the expression are of type {}real{}.":"如果设置为 ON，则优先使用 JavaScript 的二元运算符 {}+{}、{}-{}、{}*{} 等，而不是使用 {}GameMaker{} 的类型检查函数。在这种情况下，您需要确保表达式中使用的所有变量均为 {}real{} 类型。","If ON then increment&nbsp;{}++{} and decrement&nbsp;{}--{} expressions are not checked to see if they operate on values of type int64 (or Long in JavaScript). You need to make sure that no variables are of type {}int64{} when using the&nbsp;{}++{} and {}--{} operators.":"如果为 ON，则不会检查递增 {}++{} 和递减 {}--{} 表达式是否对 int64 类型 (或 JavaScript 中的 Long) 类型的值进行操作。使用 {}++{} 和 {}--{} 运算符时，您需要确保没有任何变量属于 {}int64{} 类型。","If ON then the compiled code will include checks that variables are arrays and do basic error checking on the array, omitted if OFF. These checks are done at each use of the array.{} {}{}NOTE{}{}&nbsp;If OFF then you need to make sure that every variable used as an array is definitely of type array before using it. ":"如果为 ON，则编译的代码将包括检查变量是否为数组并对数组进行基本错误检查，如果为 OFF，则省略。这些检查是在每次使用数组时完成的。{}{}{} 注意 {}{} 如果设置为 OFF，那么您需要在使用前确保用作数组的每个变量都绝对是数组类型。","If ON then the compiled code will include {}checks in the generated JavaScript code to bring it in line with how the VM/YYC runner handles errors{}. These checks will be omitted if OFF.{} {}{}NOTE{}{}&nbsp;This can be safely omitted if your code is not erroring when used, generally something that can be disabled once your code is working error free. ":"如果为 ON，则编译的代码将包含 {} 对生成的 JavaScript 代码进行检查，使其符合 VM/YYC 运行程序处理错误的方式 {}。如果关闭，这些检查将被忽略。{}{}{} 注意 {}{} 如果您的代码在使用时没有出错，则可以安全地忽略此检查，通常，一旦您的代码无错误运行，就可以将其禁用。","If ON then the generated code will include checks on the index on array access (read and write) to catch out of range errors. If OFF you need to make sure to always use an array index that's within the array's length (i.e. from 0 to&nbsp;{}{}array_length{}{}-1).":"如果为 ON，则生成的代码将包括对数组访问 (读和写) 索引的检查，以捕获超出范围的错误。如果设置为 OFF，则需要确保始终使用数组长度范围内的数组索引 (即从 0 到 {}{}array_length{}{}-1)。",'If the compiler doesn\'t understand a {}"specific_optimisation"{} string, it will silently ignore it.':'如果编译器无法理解 {}"special_optimization"{} 字符串，它会默默地忽略它。',"Some of the available commands require an optional argument or arguments. These are explained above for each command.":"一些可用的命令需要一个或多个可选参数。上面为每个命令解释了这些。","The above example code will force the script function where it is used to be in-lined on compile.":"上面的示例代码将强制编译时使用内联的脚本函数。","The following table lists all optimisations that you can use:&nbsp;":"下表列出了您可以使用的所有优化：","The {}gml_pragma{} function affects how the given target compiles your code and should be called with the different commands to further optimise the final compilation of your project. These commands are effectively {}pre-processed{} before the game is compiled and so the function can be placed anywhere in your project and it will still be processed before the game is fully compiled. The available commands are as follows:":"{}gml_pragma{}函数会影响给定目标编译代码的方式，应使用不同的命令调用该函数，以进一步优化项目的最终编译。这些命令在游戏编译之前得到了有效的{}预处理{}，因此该函数可以放置在您项目中的任何位置，并且在游戏完全编译之前仍然会得到处理。可用命令如下：","The&nbsp;{}gml_pragma{} function affects how the given target compiles your code and should be called with the different commands to further optimise the final compilation of your project. These commands are effectively {}pre-processed{} before the game is compiled and so the function can be placed anywhere in your project and it will still be processed before the game is fully compiled. The available commands are as follows:":"{}gml_pragma{} 函数会影响给定目标编译代码的方式，应使用不同的命令进行调用，以进一步优化项目的最终编译。这些命令会在游戏编译之前进行有效的 {} 预处理 {}，因此该函数可以放置在项目中的任何位置，并且在游戏完全编译之前仍然会被处理。可用的命令如下：","Usage Notes":"使用说明","You would then add&nbsp;{}{}gml_pragma{}{}&nbsp;statements as follows:&nbsp;":"然后，您可以添加 {}{}gml_pragma{}{} 语句，如下所示：",'{}"&lt;control&gt;"{}&nbsp;is a string that contains a comma-delimited list of commands that control the optimisation from this point in your code:&nbsp;':'{}"&lt;control&gt;"{} 是一个字符串，其中包含以逗号分隔的命令列表，这些命令从代码中的此时开始控制优化：','{}"&lt;specific_optimisation&gt;"{}&nbsp;is a string containing the specific optimisation to modify.':'{}"&lt;specific_optimisation&gt;"{} 是包含要修改的特定优化的字符串。','{}"optimise"/"optimize", "&lt;specific_optimisation&gt;", "&lt;control&gt;"{} - The "optimise" (or "optimize") pragma provides an optimisation hint to the compiler. For example:&nbsp; {}{}gml_pragma{}({}"optimise"{}, {}"js_array_check"{}, {}"push, off"{});{} This pragma will make the compiler omit type checking code on arrays when it generates JavaScript code.{} {} See the section on {}Compiler Optimisations{} below for a full list of optimisations you can use. ':'{}"optimise"/"optimize"、"&lt;special_optimization&gt;"、"&lt;control&gt;"{}- "optimise"( 或 "optimize") 编译指示向编译器提供优化提示。例如：{}{}gml_pragma{}({}"optimise"{},{}"js_array_check"{},{}"push, off"{});{} 此编译指示将使编译器忽略类型检查代码在生成 JavaScript 代码时对数组进行处理。{}{} 请参阅下面有关 {} 编译器优化 {} 的部分，了解您可以使用的优化的完整列表。',"{}Compiler Optimisations{}{}Compiler Optimisations{}":"{} 编译器优化 {}{} 编译器优化 {}","{}NOTE{}: The first argument to the {}gml_pragma{} function {}must be a compile time string constant{} and not a variable.":"{}注意{}：{}gml_pragma{}函数的第一个参数{}必须{}是编译时字符串常量，而不是变量。","{}off{} or&nbsp;{}false{} - switches off the optimisation":"{}off{} 或 {}false{}- 关闭优化","{}on{} or {}true{} - switches on the optimisation":"{}on{} 或 {}true{}- 开启优化","{}pop{} - pops from the internal stack (for that optimisation) into the current state":"{}pop{}- 从内部堆栈弹出 (用于优化) 到当前状态","{}push{} - pushes onto an internal stack (for that optimisation) the current state of that optimisation":"{}push{}- 将优化的当前状态推送到内部堆栈 (针对该优化)","{}{}NOTE{}{}&nbsp;The first argument to the&nbsp;{}{}gml_pragma{}{} function {}must be a compile-time string constant{} and not a variable.":"{}{} 注意{}{}{}{}gml_pragma{}{} 函数的第一个参数 {} 必须是编译时字符串常量 {} 而不是变量。"},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(e){json_global=e}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../..",gTopicId="8.2.2.21.0_23"</script><script type="text/javascript" src="../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>gml_pragma</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../assets/css/default.css" type="text/css"><script src="../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Reference page for gml_pragma"><meta name="rh-index-keywords" content="gml_pragma"><meta name="search-keywords" content="gml_pragma"><meta name="brsnext" value="GameMaker_Language/GML_Reference/OS_And_Compiler/parameter_count.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/OS_And_Compiler/gml_release_mode.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="gml_pragma"><span>gml_pragma</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">gml_pragma</span></h1><p>The&nbsp;<span data-field="title" data-format="default">gml_pragma</span> function affects how the given target compiles your code and should be called with the different commands to further optimise the final compilation of your project. These commands are effectively <i>pre-processed</i> before the game is compiled and so the function can be placed anywhere in your project and it will still be processed before the game is fully compiled. The available commands are as follows:</p><ul class="colour"><li>"<b>forceinline</b>" - When the function is called with the "forceinline" pragma in a <b>script function</b>, the YYC will compile the project with the function inline, rather than referenced. This will give a further processing boost, but care must be taken when using it as it will also inflate the final executable file size, especially if the in-lined code is large and/or used in multiple different places, as well as greatly increase the compile time. Note that this pragma is <b>only valid when building using the YYC</b>.</li><li>"<b>global</b>", "<b>[gml code]</b>" - The "global" pragma permits you to call some GML code formatted as a string, at a <b>global</b> scope, at compile time, before the first room of the game executes. For example:<p class="code"><span data-field="title" data-format="default">gml_pragma</span>("global", "Init()");</p>This will call the script function "Init" before the first room of the game is run. Note that the GML supplied as the second argument <b>must be a compile-time constant</b>, and also note that you cannot use this pragma to create instances or perform any operations that require a room (or anything in a room) to function.</li><li><strong>"optimise"/"optimize", "&lt;specific_optimisation&gt;", "&lt;control&gt;"</strong> - The "optimise" (or "optimize") pragma provides an optimisation hint to the compiler. For example:&nbsp;<p class="code"><span data-field="title" data-format="default">gml_pragma</span>("optimise", "js_array_check", "push, off");</p>This pragma will make the compiler omit type checking code on arrays when it generates JavaScript code.<br><br>See the section on <strong>Compiler Optimisations</strong> below for a full list of optimisations you can use.</li><li id="pngcrush">"<b>PNGCrush</b>" - The "PNGCrush" pragma will use the <a href="https://pmt.sourceforge.io/pngcrush/" target="_blank">PNGCrush</a> program on each texture created. Note that this can add significantly to the time that it takes to compile the game, so you don't want it on all the time, although it can make significant savings on final file size. This option only applies to Texture Groups that use the PNG format (see <a href="../../../Settings/Texture_Groups.htm#texture_group_format">Texture Group Format</a>).</li><li>"<b>Texgroup.Scale</b>", "<b>[TextureGroupName]</b>", "<b>[Scale Divisor]</b>" - The "Texgroup.Scale" will scale the given texture group on compile. You need to give an additional two arguments here: the "[TexGroupName]", which is the name (a string) of the texture group to scale, and the "[Scale Divisor]" (also a string), which is the divisor you wish to use for the scaling, i.e.:<p class="code"><span data-field="title" data-format="default">gml_pragma</span>("Texgroup.Scale", "level1", "2");</p>This will halve all the textures in the "level1" texture group.</li><li>"<b>UnityBuild</b>", "<b>[enable/disable]</b>" - If you call the function with this pragma and set the enable/disable argument to <span class="inline">true</span> then on compile it will collapse all the .cpp files in the project into a single file which it then uses to build everything, for example:<p class="code"><span data-field="title" data-format="default">gml_pragma</span>("UnityBuild", "true");</p>The benefit of doing a unity build is that builds are faster but the down side is that it does a <i>full</i> build each time so even if you change a single part of the code it will build everything again without using any cached files. This has been added specifically for the Xbox One export using the YYC although it can be called for other builds (<b>YYC only</b>). For more information on unity builds, please see <a href="http://buffered.io/posts/the-magic-of-unity-builds/" target="_blank">here</a>.</li></ul><p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;The first argument to the&nbsp;<span class="inline3_func"><span data-field="title" data-format="default">gml_pragma</span></span> function <b>must be a compile-time string constant</b> and not a variable.</p><p><a class="dropspot" data-open-text="" data-rhwidget="DropSpot" data-target="compiler-optimisations" href="#"><span data-open-text="true" data-skip-index="true">Compiler Optimisations</span><span data-close-text="true">Compiler Optimisations</span></a><undefined data-targetname="compiler-optimisiations"></undefined></p><div class="droptext" data-targetname="compiler-optimisations"><p class="dropspot">Compiler optimisations can be provided with the <span class="inline2">"optimise"</span> (or <span class="inline2">"optimize"</span>) pragma. Their basic syntax is:&nbsp;</p><p class="code"><span data-field="title" data-format="default">gml_pragma</span>("optimise", "&lt;specific_optimisation&gt;", "&lt;control&gt;");</p><p class="dropspot"><span class="inline2">"&lt;specific_optimisation&gt;"</span>&nbsp;is a string containing the specific optimisation to modify.</p><p class="dropspot"><span class="inline2">"&lt;control&gt;"</span>&nbsp;is a string that contains a comma-delimited list of commands that control the optimisation from this point in your code:&nbsp;</p><ul class="dropspotlist"><li><span class="inline2">push</span> - pushes onto an internal stack (for that optimisation) the current state of that optimisation</li><li><span class="inline2">pop</span> - pops from the internal stack (for that optimisation) into the current state</li><li><span class="inline2">on</span> or <span class="inline2">true</span> - switches on the optimisation</li><li><span class="inline2">off</span> or&nbsp;<span class="inline2">false</span> - switches off the optimisation</li></ul><p class="dropspot">The following table lists all optimisations that you can use:&nbsp;</p><ul class="colour"></ul><table border="1" cellpadding="1" cellspacing="1" id="table" style="caption-side:top"><caption>Compiler Optimisations</caption><colgroup><col style="width:50%"><col style="width:50%"></colgroup><tbody><tr><th>Optimisation</th><th>Description</th></tr><tr><td><span class="inline">js_array_check</span></td><td>If ON then the compiled code will include checks that variables are arrays and do basic error checking on the array, omitted if OFF. These checks are done at each use of the array.<br><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;If OFF then you need to make sure that every variable used as an array is definitely of type array before using it.</td></tr><tr><td><span class="inline">js_error_check</span></td><td>If ON then the compiled code will include <span>checks in the generated JavaScript code to bring it in line with how the VM/YYC runner handles errors</span>. These checks will be omitted if OFF.<br><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;This can be safely omitted if your code is not erroring when used, generally something that can be disabled once your code is working error free.</td></tr><tr><td><span class="inline">js_check_index</span></td><td>If ON then the generated code will include checks on the index on array access (read and write) to catch out of range errors. If OFF you need to make sure to always use an array index that's within the array's length (i.e. from 0 to&nbsp;<span class="inline3_func"><a href="../Variable_Functions/array_length.htm">array_length</a></span>-1).</td></tr><tr><td><span class="inline">js_pre_post_no_long</span></td><td>If ON then increment&nbsp;<span class="inline2">++</span> and decrement&nbsp;<span class="inline2">--</span> expressions are not checked to see if they operate on values of type int64 (or Long in JavaScript). You need to make sure that no variables are of type <a href="../Variable_Functions/is_int64.htm">int64</a> when using the&nbsp;<span class="inline2">++</span> and <span class="inline2">--</span> operators.</td></tr><tr><td><span class="inline">js_use_infix_ops</span></td><td>If ON then JavaScript's binary operators <span class="inline2">+</span>, <span class="inline2">-</span>, <span class="inline2">*</span>, etc. are used in preference to using&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>'s type checking functions. In this case you need to make sure that all variables used in the expression are of type <a href="../Variable_Functions/is_real.htm">real</a>.</td></tr></tbody></table><h3>Example</h3><p class="dropspot">As an example, to optimise the following function:&nbsp;</p><p class="code">function multiples_of_two()<br>{<br>&nbsp; &nbsp; var a = [];<br>&nbsp; &nbsp; for (var i = 0; i &lt; 100; i++)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; a[i] = i * 2;<br>&nbsp; &nbsp; }<br>}</p><p class="dropspot">You would then add&nbsp;<span class="inline3_func"><span data-field="title" data-format="default">gml_pragma</span></span>&nbsp;statements as follows:&nbsp;</p><p class="code">function multiples_of_two()<br>{<br>&nbsp; &nbsp; gml_pragma( "optimise", "js_array_check", "push, off");<br>&nbsp; &nbsp; gml_pragma( "optimise", "js_error_check", "push, off");<br>&nbsp; &nbsp; gml_pragma( "optimise", "js_check_index", "push, off");<br>&nbsp; &nbsp; gml_pragma( "optimise", "js_pre_post_no_long", "push, on");<br>&nbsp; &nbsp; gml_pragma( "optimise", "js_use_infix_ops", "push, on");<br>&nbsp; &nbsp; var a = [];<br>&nbsp; &nbsp; for(var i = 0; i &lt; 100; i++)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; a[i] = i * 2;<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; gml_pragma( "optimise", "js_use_infix_ops", "pop" );<br>&nbsp; &nbsp; gml_pragma( "optimise", "js_pre_post_no_long", "pop" );<br>&nbsp; &nbsp; gml_pragma( "optimise", "js_check_index", "pop" );<br>&nbsp; &nbsp; gml_pragma( "optimise", "js_error_check", "pop" );<br>&nbsp; &nbsp; gml_pragma( "optimise", "js_array_check", "pop" );<br>}</p><h3>Usage Notes</h3><ul class="colour"><li>Compiler optimisations are treated as <em>hints</em> to the compiler, it is free to ignore those hints. Also, certain optimisations may only target specific compilers, for example the JavaScript transpiler (these optimisations begin with <span class="inline2">"js_"</span>).</li><li>All the parameters to the&nbsp;<span class="inline3_func">"optimise"</span> command must be known at compile-time and therefore <strong>must</strong> be constant strings, an error is generated otherwise.</li><li>If the compiler doesn't understand a <span class="inline2">"specific_optimisation"</span> string, it will silently ignore it.</li></ul><p>&nbsp;</p><ul class="colour"></ul></div><p>&nbsp;</p><h4>Syntax:</h4><p class="code"><span data-field="title" data-format="default">gml_pragma</span>(command, [optional...]);</p><table><tbody><tr><th>Argument</th><th>Type</th><th>Description</th></tr><tr><td>command</td><td><span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span></td><td>A string with one of the commands listed above.</td></tr><tr><td>[optional]</td><td><span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span></td><td>Some of the available commands require an optional argument or arguments. These are explained above for each command.</td></tr></tbody></table><p>&nbsp;</p><h4>Returns:</h4><p class="code"><span data-keyref="Type_Void">N/A</span></p><p>&nbsp;</p><h4>Example:</h4><p class="code"><span data-field="title" data-format="default">gml_pragma</span>("forceinline");</p><p>The above example code will force the script function where it is used to be in-lined on compile.</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="OS_And_Compiler.htm">OS And Compiler</a></div><div style="float:right">Next: <a href="parameter_count.htm">parameter_count</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>