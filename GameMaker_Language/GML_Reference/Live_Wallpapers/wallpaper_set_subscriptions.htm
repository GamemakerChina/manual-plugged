<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/main.css"><script>let str;removeHtml=function(t){return t=(t=(t=(t=t.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(t){return t.match(/(<([^>]+)>)/gi)},setTranslator=function(t,n,a){let e;e=a?t.attr(a):t.html();let l=n[removeHtml(e)];if(null!=l&&l.length){n=retHtml(e);let o=0;n&&n.forEach(function(t,n){var a=l.replace("{"+o+"}",t);l=a===l?l.replace("{}",t):a,o++}),a?t.attr(a,l):t.html(l)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){$(".header").length&&$(".header").append(`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`)},removeExtensionFromHash=function(t){return t.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")},$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../..",gTopicId="8.2.2.24.0_2"</script><script type="text/javascript" src="../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>wallpaper_set_subscriptions</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" type="text/css" href="../../../assets/css/default.css"><script src="../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Gurpreet S. Matharoo"><meta name="topic-comment" content="Reference page for wallpaper_set_subscriptions"><meta name="rh-index-keywords" content="wallpaper_set_subscriptions"><meta name="search-keywords" content="wallpaper_set_subscriptions"><meta name="template" content="assets/masterpages/Manual_Keyword_Page.htt"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Live_Wallpapers/wallpaper_set_config.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="wallpaper_set_subscriptions"><span>wallpaper_set_subscriptions</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">wallpaper_set_subscriptions</span></h1><p>This function subscribes to the given metric(s) from the Companion app. This is used to get real-time system information, and enable mouse input, which is disabled for Live Wallpapers by default.</p><p class="note"><span data-conref="../../../assets/snippets/Tag_important.hts"><span class="important">IMPORTANT</span></span>&nbsp;<a href="https://help.gamemaker.io/hc/en-us/articles/10070287968285">See this guide</a> for making a basic Live Wallpaper and (optionally) setting up the Companion app on Windows.</p><p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;Graphics drivers must be up-to-date on the target computer for GPU metrics to work correctly.</p><p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;Each call to this function cancels any previously active subscriptions, so only those included in the last call remain active.</p><h2>Arguments</h2><p>You pass an array into this function, containing one or more of the following strings: <span class="inline2">"desktop_mouse"</span>, <span class="inline2">"cpu"</span>, <span class="inline2">"gpu"</span>, <span class="inline2">"battery"</span>, <span class="inline2">"ram"</span>, <span class="inline2">"disk"</span>, <span class="inline2">"network"</span>, <span class="inline2">"audio"</span>.</p><p><span class="inline2">"desktop_mouse"</span>&nbsp;enables mouse input for your Live Wallpaper. The other options allow the&nbsp;<a href="../../../The_Asset_Editors/Object_Properties/Wallpaper_Config_Event.htm#h">Wallpaper Subscription Data</a> event to be triggered, where you receive data on the metrics you chose to subscribe to.</p><h2 id="h">Receiving Metrics</h2><p>Within the&nbsp;<a href="../../../The_Asset_Editors/Object_Properties/Wallpaper_Config_Event.htm#h">Wallpaper Subscription Data</a>&nbsp;event you will receive updates for subscribed metrics, around once every second, except for audio which is ten times a second.</p><p>The event will contain a <span class="inline2">wallpaper_subscription_data</span> variable which is a <a href="../../GML_Overview/Structs.htm">struct</a>, containing the following members:</p><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true" data-skip-index="true">wallpaper_subscription_data Struct</span><span data-close-text="true">wallpaper_subscription_data Struct</span></a></p><div class="droptext" data-targetname="drop-down"><ul class="colour"><li><strong>cpu</strong> (<span data-keyref="Type_Array"><a target="_blank" href="../../GML_Overview/Arrays.htm">Array</a></span>): Array of CPU devices. Each entry in this array is a struct, containing the following members:<ul><li><strong>name</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): The name of the CPU.</li><li><strong>num_logical_cores</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): Number of logical cores.</li><li><strong>num_physical_cores</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): Number of physical cores.</li><li><strong>usage_pct</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): The load percentage of the CPU.</li><li><strong>current_clock_speed_MHz</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): The current clock speed of the CPU in MHz.</li><li><strong>max_clock_speed_MHz</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): The maximum clock speed of the CPU in MHz.</li><li><strong>voltage_V</strong> (Integer&nbsp;<span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): The current voltage of the CPU in volts.</li></ul></li><li><strong>gpu</strong> (<span data-keyref="Type_Array"><a target="_blank" href="../../GML_Overview/Arrays.htm">Array</a></span>): Array of GPU devices. Each entry in this array is a struct, containing the following members:<ul><li><strong>name</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): The name of the GPU.</li><li><strong>usage_pct</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): The load percentage of the GPU.</li><li><strong>clock_speed_MHz</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): The current clock speed of the GPU in MHz.</li><li><strong>fan_speed_pct</strong> or <strong>fan_speed_rpm</strong> (<span data-keyref="Type_Array"><a target="_blank" href="../../GML_Overview/Arrays.htm">Array</a></span>&nbsp;of Integer&nbsp;<span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>s): The target speed of each GPU fan. Expressed as a percentage of the maximum speed on NVIDIA GPUs and in RPM on AMD GPUs (AMD will only return one element in the array).</li><li><strong>power_usage_W</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): The power usage of the GPU in Watt.</li><li><strong>temperature_C</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): The temperature of the GPU in Celsius.</li><li><strong>memory_used_bytes</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): How much of the GPU memory is used up in bytes.</li><li><strong>memory_available_bytes</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): How much of the GPU memory is available in bytes.</li><li><strong>memory_total_bytes</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): The total GPU memory in bytes.</li></ul></li><li><strong>battery</strong> (<span data-keyref="Type_Array"><a target="_blank" href="../../GML_Overview/Arrays.htm">Array</a></span>): Array of battery devices.&nbsp;Each entry in this array is a struct, containing the following members:<ul><li><strong>name</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): The name of the battery.</li><li><strong>is_charging</strong> (<span data-keyref="Type_Bool"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Boolean</a></span>): Indicates if the battery is charging.</li><li><strong>remaining_charge_pct</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): Percentage of the charge left in the battery.</li><li><strong>remaining_time_min</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): The estimated time left of the battery in minutes.</li></ul></li><li><strong>ram</strong> (<span data-keyref="Type_Array"><a target="_blank" href="../../GML_Overview/Arrays.htm">Array</a></span>): Array of RAM devices.&nbsp;Each entry in this array is a struct, containing the following members:<ul><li><strong>name</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): The name of the RAM.</li><li><strong>available_bytes</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): How much of the RAM memory is available in bytes.</li><li><strong>total_bytes</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): The total RAM memory in bytes.</li><li><strong>used_bytes</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): How much of the GPU memory is used up in bytes.</li></ul></li><li><strong>disk</strong> (<span data-keyref="Type_Array"><a target="_blank" href="../../GML_Overview/Arrays.htm">Array</a></span>): Array of disks.&nbsp;Each entry in this array is a struct, containing the following members:<ul><li><strong>name</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): The name of the disk.</li><li><strong>available_bytes</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): How much of the disk memory is available in bytes.</li><li><strong>total_bytes</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): The total disk memory in bytes.</li><li><strong>used_bytes</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): How much of the GPU memory is used up in bytes.</li></ul></li><li><strong>network</strong> (<span data-keyref="Type_Array"><a target="_blank" href="../../GML_Overview/Arrays.htm">Array</a></span>): Array of network devices.&nbsp;Each entry in this array is a struct, containing the following members:<ul><li><strong>bandwidth_bps</strong> (<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>): The bandwidth of the network in bits per second.</li><li><strong>send_bps</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): The current bytes sent per second on the network.</li><li><strong>received_bps</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): The current bytes received per second on the network.</li></ul></li><li><strong>audio</strong> (<span data-keyref="Type_Array"><a target="_blank" href="../../GML_Overview/Arrays.htm">Array</a></span>): Array of audio devices. Each entry in this array is a struct, containing the following members:<ul><li><strong>freq_resolution</strong> (Integer <span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span>): The frequency resolution, is always 10.</li><li><strong>spectrum_amplitude</strong> (<span data-keyref="Type_Array"><a target="_blank" href="../../GML_Overview/Arrays.htm">Array</a></span>): Represents a spectrum analysis of measured sound amplitudes on the system. The frequency will span from 0 Hz up to the Nyquist frequency, i.e half that of the system's sampling rate. If it is, for example, 44.1 kHz (the most common), the frequencies will range from 0 Hz to 22050 Hz. Each bin will always represent a range of <strong>freq_resolution</strong>. E.g. if it is 10, this array will consist of 2205 data points if the sampling rate is 44.1 kHz, and 2400 if it is 48 kHz (also common).</li></ul></li></ul></div><p>If some information could not be retrieved from the system, its corresponding variable will not be present in this structure. That may cause a crash if you try to access a variable that doesn't exist. To prevent that, use&nbsp;<span class="inline3_func"><a href="../Variable_Functions/variable_struct_exists.htm">struct_exists</a></span>&nbsp;to check that a variable exists in a struct, before accessing it.</p><p>&nbsp;</p><p>&nbsp;</p><h4>Syntax:</h4><p class="code"><span data-field="title" data-format="default">wallpaper_set_subscriptions</span>(subscriptions);</p><table><colgroup><col><col><col></colgroup><tbody><tr><th>Argument</th><th>Type</th><th>Description</th></tr><tr><td>subscriptions</td><td><span data-keyref="Type_Array"><a target="_blank" href="../../GML_Overview/Arrays.htm">Array</a></span></td><td>An array containing strings, which are the metrics you want to subscribe to</td></tr></tbody></table><p>&nbsp;</p><h4>Returns:</h4><p class="code"><span data-keyref="Type_Void">N/A</span></p><p>&nbsp;</p><h4>Example:</h4><div data-conref="../../../assets/snippets/Example_wallpaper_set_subscriptions.hts"><p class="code">// Create Event<br>wallpaper_set_subscriptions(["desktop_mouse", "cpu"]);<br><br><br>// Wallpaper Subscription Data Event<br>var _cpus = wallpaper_subscription_data.cpu;<br><br>file = file_text_open_append("sysinfo.txt");<br>file_text_writeln(file);<br>file_text_write_string(file, string(date_current_datetime()));<br>file_text_write_string(file, $"\nCPU count: {array_length(_cpus)}");<br><br>array_foreach(_cpus, function(_cpu, _num)<br>{<br>&nbsp;&nbsp; &nbsp;if (!struct_exists(_cpu, "usage_pct")) return;<br>&nbsp;&nbsp; &nbsp;var _str = $"\nCPU {_num} load: {_cpu.usage_pct}%";<br>&nbsp;&nbsp; &nbsp;file_text_write_string(file, _str);<br>});<br><br>file_text_close(file);</p><p>The first line, run in the Create event, enables mouse input and subscribes to CPU metrics.</p><p>In the Wallpaper Subscription Data event, it gets the devices array for the CPU, and opens a text file to write metrics to.</p><p>In that file, it writes the current datetime, CPU device count (which is the length of the array), and then proceeds to write the load percentage of each CPU device in the array.</p><p>This code generates the following text in the <span class="inline2">sysinfo.txt</span> file, found in the <a href="../File_Handling/File_Directories/working_directory.htm">working directory</a>:</p><p class="code_plain">45245.33<br>CPU count: 1<br>CPU 0 load: 3%<br>45245.33<br>CPU count: 1<br>CPU 0 load: 3%<br>45245.33<br>CPU count: 1<br>CPU 0 load: 3%</p></div><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div>Back:&nbsp;<a href="Live_Wallpapers.htm">Live Wallpapers</a></div><div>Next:&nbsp;<a href="wallpaper_set_config.htm">wallpaper_set_config</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>