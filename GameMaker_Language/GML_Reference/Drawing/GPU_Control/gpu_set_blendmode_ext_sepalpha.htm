<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../../../assets/import/main.css"><script>let str;removeHtml=function(e){return e=(e=(e=(e=e.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(e){return e.match(/(<([^>]+)>)/gi)},setTranslator=function(e,t,o){let n;n=o?e.attr(o):e.html();let l=t[removeHtml(n)];if(null!=l&&l.length){t=retHtml(n);let a=0;t&&t.forEach(function(e,t){var o=l.replace("{"+a+"}",e);l=o===l?l.replace("{}",e):o,a++}),o?e.attr(o,l):e.html(l)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var e=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(e):($(".topic-header").append(e),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(e){return e.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={"Blend Mode Factor Constant":"混合模式系数常量","Destination blend mode factor Alpha (see constants above)":"目标混合模式因子 Alpha(请参见上面的常量)","Destination blend mode factor for RGB&nbsp;(see constants above)":"RGB 的目标混合模式因子 (请参见上面的常量)","Guide To Using Blendmodes":"混合模式使用指南","Note that you can either supply four individual arguments to this function or you can supply an array of arguments (as returned by the function {}{}gpu_get_blendmode_ext_sepalpha(){}{} for example). If supplying an array it should have the following four elements:":"请注意，您可以为此函数提供四个单独的参数，也可以提供一个参数数组(例如，由函数{}{}gpu_get_blendmode_ext_se丈(){}{}返回)。如果提供数组，则应具有以下四个元素：","Source blend mode factor Alpha (see constants above).":"源混合模式因子 Alpha(请参见上面的常量)。","Source blend mode factor for RGB (see constants above).":"RGB 的源混合模式因子 (请参见上面的常量)。","The above code creates a local array and gets the current extended blend mode with separate alpha values. This array is then manipulated and returned to set the blend mode.":"上述代码将创建一个局部数组，并获取具有单独 Alpha 值的当前扩展混合模式。然后操纵该数组并返回以设置混合模式。","The following chart shows the RGBA values for each blend mode, where (Rs, Gs, Bs, As) are considered the source values and (Rd, Gd, Bd, Ad) are the destination values. The eleven constants that are available for use can be either source or destination (or both) when used in this function.":"下图显示了每个混合模式的 RGBA 值，其中(R、G、B、As)被视为源值，(Rd、Gd、Bd、Ad)是目标值。在此函数中使用时，可用的十一个常量可以是源或目标(或两者)。",'This function permits you to set the different component parts that should be factored together to create a custom blend mode, selecting different parts of different blend mode factors for the RGB components and the Alpha component. So the "src" and "dest" argument will use the first 3 blend mode values (RGB) and the "alphasrc" and "alphadest" arguments will take the last part of the blend mode factor. For example, if you have the RGB source as {}bm_zero{}, then (0, 0, 0) will be used. If you then set the Alpha source as bm_one then (1) will be used, giving a final source blend mode of (0, 0, 0, 1).':'通过此函数，您可以设置不同的零部件部件，这些零部件部件应该被系数化在一起以创建自定义混合模式，从而为 RGB 零部件和Alpha零部件选择不同混合模式因子的不同部件。因此，"src"和"dests"参数将使用前3个混合模式值( RGB )，"alphasrc"和"alphadests"参数将采用混合模式因子的最后一部分。例如，如果 RGB 源为{}bm_zero{}，则将使用(0, 0,0 )。如果随后将Alpha源设置为bm_one，则将使用(1 )，最终源混合模式为(0, 0, 0,1 )。',"To help you get the most from blend modes and to help understand how they work and how they affect the final image being drawn to the screen, we recommend that you read the following guide:":"为了帮助您充分利用混合模式，并帮助您了解它们如何工作以及它们如何影响绘制到屏幕的最终图像，建议您阅读以下指南：","When {}GameMaker{} goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.":"{}GameMaker{}在绘制像素时，会显示源颜色(我们要绘制的像素的颜色)和目标颜色(我们要绘制的像素中已有的颜色)，因此在确定像素的新颜色时，会根据所选的混合模式计算源颜色和目标颜色。将颜色的每个分量存储为介于0和1之间的浮点值，并且通过将源颜色的每个分量乘以某个因子，并通过将目标颜色的每个分量乘以某个其他因子，然后将结果与分量相加来计算新颜色。","When {}GameMaker{} goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiplying each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.":"当 {}GameMaker{} 绘制像素时，会存在源颜色 (我们要绘制的像素的颜色) 和目标颜色 (我们要绘制到的像素中已有的颜色)，因此当确定像素的新颜色后，将根据所选的混合模式计算源颜色和目标颜色。颜色的每个分量存储为 0 到 1 之间的浮点值，新颜色的计算方法是将源颜色的每个分量乘以某个因子，将目标颜色的每个分量乘以某个其他因子，然后加上结果逐个组件组合在一起。","[0] = Source blend mode minus the alpha component (default is {}bm_src_alpha{} (As, As, As))":"[0] = 源混合模式减去 Alpha 分量 (默认为 {}bm_src_alpha{}(As、As、As))","[1] = Destination blend mode minus the alpha component (default is {}bm_inv_src_alpha{} (1-As, 1-As, 1-As))":"[1] = 目标混合模式减去 Alpha 分量 (默认为 {}bm_inv_src_alpha{}(1-As，1-As，1-As))","[2] = Source alpha component (default is {}bm_src_alpha{} (As))":"[2] = 源 Alpha 组件 (默认为 {}bm_src_alpha{}(As))","[3] = Destination alpha component (default is {}bm_inv_src_alpha{} (1-As))":"[3] = 目标 Alpha 组件 (默认为 {}bm_inv_src_alpha{}(1-As))","{}IMPORTANT!{} HTML5 without WebGL enabled will {}not{} be able to display use following modes correctly:":"{}重要！{}未启用WebGL的HTML5将无法{}正确显示以下使用模式："},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(e){json_global=e}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../../..",gTopicId="8.2.2.6.2.0_32"</script><script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>gpu_set_blendmode_ext_sepalpha</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css"><script src="../../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Reference for the function gpu_set_blendmode_ext_sepalpha"><meta name="rh-index-keywords" content="gpu_set_blendmode_ext_sepalpha,bm_zero,bm_one,bm_src_colour,bm_inv_src_colour,bm_src_alpha,bm_inv_src_alpha,bm_dest_alpha,bm_inv_dest_alpha,bm_dest_colour,bm_inv_dest_colour,bm_src_alpha_sat,bm_src_color,bm_inv_src_color,bm_dest_color,bm_inv_dest_colour"><meta name="search-keywords" content="gpu_set_blendmode_ext_sepalpha,bm_zero,bm_one,bm_src_colour,bm_inv_src_colour,bm_src_alpha,bm_inv_src_alpha,bm_dest_alpha,bm_inv_dest_alpha,bm_dest_colour,bm_inv_dest_colour,bm_src_alpha_sat,bm_src_color,bm_inv_src_color,bm_dest_color,bm_inv_dest_colour"><meta name="brsnext" value="GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_colourwriteenable.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="gpu_set_blendmode_ext_sepalpha"><span>gpu_set_blendmode_ext_sepalpha</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1>gpu_set_blendmode_ext_sepalpha</h1><p>When <span data-keyref="GameMaker Name">GameMaker</span> goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode.</p><p>Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiplying each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component (or using a different <a href="gpu_set_blendequation.htm">equation</a>).</p><p>This function permits you to set how the different component parts that should be factored together to create a custom blend mode, selecting different blend mode factors for the RGB components and the Alpha component. So the "src" and "dest" argument will use the first 3 blend mode values (RGB) and the "alphasrc" and "alphadest" arguments will take the last part of the blend mode factor. For example, if you have the RGB source as <span class="inline">bm_zero</span>, then (0, 0, 0) will be used. If you then set the Alpha source as <span class="inline">bm_one</span> then (1) will be used, giving a final source blend mode of (0, 0, 0, 1).</p><p>The following chart shows the RGBA values for each blend mode, where (Rs, Gs, Bs, As) are considered the source values and (Rd, Gd, Bd, Ad) are the destination values. The eleven constants that are available for use can be either source or destination (or both) when used in this function.</p><div data-conref="../../../../assets/snippets/Table_Gpu_blend_modes_ext.hts"><table><colgroup><col><col></colgroup><tbody><tr><th colspan="2"><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor"><a target="_blank" href="gpu_get_blendmode_ext.htm">Blend Mode Factor Constant</a></span></th></tr><tr><th>Constant</th><th>Blend factor (Red, Green, Blue, Alpha)</th></tr><tr><td><span class="inline">bm_zero</span></td><td>(0, 0, 0, 0)</td></tr><tr><td><span class="inline">bm_one</span></td><td>(1, 1, 1, 1)</td></tr><tr><td><span class="inline">bm_src_colour</span></td><td>(Rs, Gs, Bs, As)</td></tr><tr><td><span class="inline">bm_inv_src_colour</span></td><td>(1-Rs, 1-Gs, 1-Bs, 1-As)</td></tr><tr><td><span class="inline">bm_src_alpha</span></td><td>(As, As, As, As)</td></tr><tr><td><span class="inline">bm_inv_src_alpha</span></td><td>(1-As, 1-As, 1-As, 1-As)</td></tr><tr><td><span class="inline">bm_dest_alpha</span></td><td>(Ad, Ad, Ad, Ad)</td></tr><tr><td><span class="inline">bm_inv_dest_alpha</span></td><td>(1-Ad, 1-Ad, 1-Ad, 1-Ad)</td></tr><tr><td><span class="inline">bm_dest_colour</span></td><td>(Rd, Gd, Bd, Ad)</td></tr><tr><td><span class="inline">bm_inv_dest_colour</span></td><td>(1-Rd, 1-Gd, 1-Bd, 1-Ad)</td></tr><tr><td><span class="inline">bm_src_alpha_sat</span></td><td>(f, f, f, 1) where f = min(As, 1-Ad)</td></tr></tbody></table></div><p class="note"><b>IMPORTANT!</b> HTML5 without WebGL enabled will <b>not</b> be able to display following modes correctly:</p><ul class="colour" style="padding-left:120px"><li><span class="inline">bm_src_colour</span></li><li><span class="inline">bm_inv_src_colour</span></li><li><span class="inline">bm_dest_colour</span></li><li><span class="inline">bm_inv_dest_colour</span></li><li><span class="inline">bm_src_alpha_sat</span></li></ul><p>&nbsp;</p><p>Note that you can either supply four individual arguments to this function or you can supply an array of arguments (as returned by the function <a href="gpu_get_blendmode_ext_sepalpha.htm"><span class="inline">gpu_get_blendmode_ext_sepalpha()</span></a> for example). If supplying an array it should have the following four elements:</p><ul class="colour"><li>[0] = Source blend mode minus the alpha component (default is <span class="inline">bm_src_alpha</span> (As, As, As))</li><li>[1] = Destination blend mode minus the alpha component (default is <span class="inline">bm_inv_src_alpha</span> (1-As, 1-As, 1-As))</li><li>[2] = Source alpha component (default is <span class="inline">bm_src_alpha</span> (As))</li><li>[3] = Destination alpha component (default is <span class="inline">bm_inv_src_alpha</span> (1-As))</li></ul><p>To help you get the most from blend modes and to help understand how they work and how they affect the final image being drawn to the screen, we recommend that you read the following guide:</p><ul class="colour"><li><a href="../../../../Additional_Information/Guide_To_Using_Blendmodes.htm">Guide To Using Blendmodes</a></li></ul><p>&nbsp;</p><h4>Syntax:</h4><p class="code">gpu_set_blendmode(src, dest, alphasrc, alphadest);</p><table><tbody><tr><th>Argument</th><th>Type</th><th>Description</th></tr><tr><td>src</td><td><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor"><a target="_blank" href="gpu_get_blendmode_ext.htm">Blend Mode Factor Constant</a></span></td><td>Source blend mode factor for RGB (see constants above).</td></tr><tr><td>dest</td><td><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor"><a target="_blank" href="gpu_get_blendmode_ext.htm">Blend Mode Factor Constant</a></span></td><td>Destination blend mode factor for RGB&nbsp;(see constants above)</td></tr><tr><td>alphasrc</td><td><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor"><a target="_blank" href="gpu_get_blendmode_ext.htm">Blend Mode Factor Constant</a></span></td><td>Source blend mode factor Alpha (see constants above).</td></tr><tr><td>alphadest</td><td><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor"><a target="_blank" href="gpu_get_blendmode_ext.htm">Blend Mode Factor Constant</a></span></td><td>Destination blend mode factor Alpha (see constants above)</td></tr></tbody></table><p>&nbsp;</p><h4>Returns:</h4><p class="code"><span data-keyref="Type_Void">N/A</span></p><p>&nbsp;</p><h4>Example:</h4><p class="code">var bm = gpu_get_blendmode_ext_sepalpha();<br>bm[0] = bm_src_alpha;<br>bm[1] = bm_inv_src_alpha;<br>gpu_set_blendmode_ext_sepalpha(bm);</p><p>The above code creates a local array and gets the current extended blend mode with separate alpha values. This array is then manipulated and returned to set the blend mode.</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back:&nbsp;<a href="GPU_Control.htm">GPU Control</a></div><div style="float:right">Next:&nbsp;<a href="gpu_set_blendequation.htm">gpu_set_blendequation</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>