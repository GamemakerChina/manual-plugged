<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../../../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../../../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../../../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../../../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../../../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../../../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../../../../assets/import/main.css"><script>let str;removeHtml=function(e){return e=(e=(e=(e=e.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(e){return e.match(/(<([^>]+)>)/gi)},setTranslator=function(e,t,a){let o;o=a?e.attr(a):e.html();let i=t[removeHtml(o)];if(null!=i&&i.length){t=retHtml(o);let n=0;t&&t.forEach(function(e,t){var a=i.replace("{"+n+"}",e);i=a===i?i.replace("{}",e):a,n++}),a?e.attr(a,i):e.html(i)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var e=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(e):($(".topic-header").append(e),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(e){return e.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={"It is worth noting that creating particles through code can often be a laborious and time-consuming process due to the large number of parameters that can be changed and tweaked. For that reason it is recommended that you search around and get a hold of some type of {}Particle Designer{} (or make one yourself!) to take the drudgery out of particle creation.":"值得注意的是，由于可以更改和调整大量参数，通过代码创建粒子往往是一个费时费力的过程。因此，建议您四处搜索并获取某种类型的{}粒子设计器{}(或者自己制作一个)，以使干燥的粒子不再创建。","Once you have created your particle type you should give it a {}shape{}. This can be one of the 14 built in shapes which are 64x64 pixel sprites with alpha blending, or you can use your own sprites which can be animated, static or use random sub-images. The following functions define the visual base shape of each particle:":"创建粒子类型后，应为其赋予{}形状{}。这可以是14个内置形状之一，这些形状为64 x 64像素带Alpha混合的精灵，也可以使用自己的精灵，这些精灵可以设置动画、静态或使用随机子图像。以下函数定义每个粒子的可视基础形状：","Once you have created your particle type you should give it a {}shape{}. This can be one of the 14 built in shapes which are 64x64 pixel sprites with alpha blending, or you can use your own sprites which can be animated, static, random sub-images or a specific sub-image. The following functions define the visual base shape of each particle:":"创建粒子类型后，应给予{}形状{}。这可以是14个内置的形状之一，这些形状是64 x64像素的精灵，带有alpha混合，或者您可以使用自己的精灵，可以是动画，静态，随机子图像或特定的子图像。以下函数定义每个粒子的视觉基础形状：","Once you have the style and movement of your particles sorted out, you can then set their colour and alpha values, both of which can be set as an absolute value during the whole lifespan of the particle, or as a scale of values that go from one to the other gradually. Note that there is also a special function that permits you to set the blending for particles and their surroundings, and this can be either normal or additive and gives some fantastic effects- The functions governing colour, alpha and blending are:":"一旦对粒子的样式和运动进行了排序，就可以设置其颜色和Alpha值，这两个值可以设置为粒子整个寿命期间的绝对值，也可以设置为逐渐从一个值到另一个值的比例。请注意，还有一个特殊的函数允许您为粒子及其周围环境设置混合，这可以是正常的，也可以是相加的，并提供一些奇妙的效果-控制颜色、Alpha和混合的函数包括：","Particle Types":"粒子类型","Particles are created from particle types, which need to be created and have their index stored in a variable so that all further particle routines can access them correctly. The following functions are used to create, check for, clear and destroy particle types:&nbsp;":"粒子是从粒子类型创建的，需要创建粒子类型并将其索引存储在变量中，以便所有其他粒子例程可以正确访问它们。以下函数用于创建、检查、清除和销毁粒子类型：","Particles are the graphic effects that can be created by the use of particle systems in a game. The particles that you define using these functions can be used in any system that you create and the normal procedure would be to define all your particles once at the start of a game and store their index values in global variables. These global variables can then be used to burst, emit or create particles at any time throughout the game. You can also create, use and then destroy particles as needed if memory is an issue or if you wish many different types but only at specific points in your game. Whatever you choose, particles are a very versatile resource!":"粒子是在游戏中使用粒子系统可以创建的图形效果。使用这些函数定义的粒子可以在创建的任何系统中使用，常规过程是在游戏开始时定义所有粒子一次，并将其索引值存储在全局变量中。这些全局变量随后可用于在整个游戏过程中随时爆发、发射或创建粒子。如果内存有问题，或者您希望有许多不同类型但仅限于游戏中的特定点，则还可以根据需要创建、使用和销毁粒子。无论您选择什么，粒子都是一种非常多函数的资源！","Particles can also have an orientation and motion. As with most particle functions, the speed, direction and orientation are resolved as a random value that is selected from a given range and can be set with the following functions:":"粒子也可以具有方向和运动。与大多数粒子函数一样，速度、方向和方向被解析为从给定范围中选择的随机值，可以使用以下函数进行设置：",'Particles exist on-screen for a limited amount of time and this is called their "lifetime". Particle lifetimes are measured in steps and (like previous functions) this is expressed as a range of values from which the particle will be given a specific lifetime. There are also a couple of interesting functions which can be used to make particles generate {}other{} particles, either each step or when they "die" (ie: Are removed from the screen), but be very careful with these functions as they can quickly create thousands of particles and crash the game! The functions that set lifetime and step or death emitting are as follows:':'粒子在屏幕上存在的时间有限，这被称为它们的"寿命"。粒子寿命按步骤进行测量，并且(像以前的函数一样)这表示为一个值范围，从该值开始粒子将被赋予特定的寿命。还有一些有趣的函数可以用来使粒子产生{}其他{}粒子，无论是每一步还是当它们"死亡"时(即：都从屏幕上移除)，但是对于这些函数要非常小心，因为它们可以快速创建成千上万个粒子并使游戏崩溃！设置寿命和阶跃或死亡发射的函数如下：',"Particles need to be created and have their index stored in a variable so that all further particle routines can access them correctly. The following functions are used to create, check for, clear and destroy particle types:":"需要创建粒子并将其索引存储在变量中，以便所有其他粒子例程都可以正确访问它们。以下函数用于创建、检查、清除和销毁粒子类型：","The following image shows the 14 built in particle types that you can choose from:":"下图显示了可以从中进行选择的14种内置粒子类型：",'{}Once you have chosen the sprite for the particle type (either a default shape or your own) you can indicate the size and scale of it. The size can be specified as a range and all particles will be created with a size chosen from within the given range. The scale is the "base" value for the x and y axis scale of the particle {}before{} any size variations are added and the following functions are used to control these values:':'{}为粒子类型(默认形状或自己的形状)选择sprite后，可以指定其大小和比例。可以将大小指定为范围，并且将使用从给定范围内选择的大小创建所有粒子。在添加{}任何尺寸变化之前，比例是粒子{}的{\\f 2 x }和{\\f 2 y }轴比例的"基本"值，并且使用以下函数来控制这些值：',"{}{}NOTE{}{}&nbsp;Some particle properties have an&nbsp;{}*_incr{} and {}*_wiggle{}&nbsp;parameter; changing these will affect&nbsp;{}existing{} particles of the given particle type. This gives you a limited way to influence existing particles in a particle system.":"{}{}注意{}{}某些粒子属性具有{}*_incr{}和{}*_wiggle{}参数;更改这些将影响给定粒子类型的{}现有{}粒子。这为您提供了影响粒子系统中现有粒子的有限方法。","{}{}TIP{}{}&nbsp;If you prefer a more visual approach to creating particles and don't need the extensive functionality that&nbsp;{}GML Code{}&nbsp;offers,&nbsp;you can also create a&nbsp;{}{}Particle System Asset{}{}&nbsp;using&nbsp;{}The Particle System Editor{}.":"{}{} 提示{}{} 如果您更喜欢使用更直观的方法来创建粒子，并且不需要 {}GML 代码 {} 提供的大量功能，也可以使用 {} 粒子系统编辑器 {} 创建 {6}{7} 粒子系统资源 {8}{9}。","{}{}TIP{}{}&nbsp;If you prefer a more visual approach to creating particles and don't need the extensive functionality that&nbsp;{}GML Code{}&nbsp;offers,&nbsp;you can also create a&nbsp;{}{}Particle System Asset{}{}&nbsp;using&nbsp;{}The Particle System Editor{}. Additionally, you can generate the&nbsp;{}GML Code{}&nbsp;for it using the editor's {}Copy GML to Clipboard{} {}.":"{}{} 提示{}{} 如果您喜欢更直观的方法来创建粒子，并且不需要 {}GML 代码 {} 提供的大量功能，则还可以使用 {10} 粒子系统编辑器 {11} 创建 {}{} 粒子系统资源 {}{}。此外，还可以使用编辑器的 {} 复制 GML 到剪贴板 {}{} 为其生成 {12}GML 代码 {13}。"},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(e){json_global=e}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../../../..",gTopicId="8.2.2.6.10.2"</script><script type="text/javascript" src="../../../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Particle Types</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css"><script src="../../../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Reference section for the Particle Type functions and variables"><meta name="rh-index-keywords" content=""><meta name="search-keywords" content="Particle Types"><meta name="brsnext" value="GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_exists.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_particles_burst.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Particle Types"><span>Particle Types</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">Particle Types</span></h1><p>Particles are the graphic effects that can be created by the use of particle systems in a game. The particles that you define using these functions can be used in any system that you create and the normal procedure would be to define all your particles once at the start of a game and store their index values in global variables. These global variables can then be used to burst, emit or create particles at any time throughout the game. You can also create, use and then destroy particles as needed if memory is an issue or if you wish many different types but only at specific points in your game. Whatever you choose, particles are a very versatile resource!</p><div data-conref="../../../../../assets/snippets/Note_tip_use_particle_system_editor.hts"><p class="note"><span data-conref="../../../../../assets/snippets/Tag_tip.hts"><span class="tip">TIP</span></span>&nbsp;If you prefer a more visual approach to creating particles and don't need the extensive functionality that&nbsp;<span data-keyref="GML_Code">GML Code</span>&nbsp;offers,&nbsp;you can also create a&nbsp;<span data-keyref="Type_Asset_ParticleSystem"><a target="_blank" href="../../../../../The_Asset_Editors/Particle_Systems.htm">Particle System Asset</a></span>&nbsp;using&nbsp;<a href="../../../../../The_Asset_Editors/Particle_Systems.htm">The Particle System Editor</a>. Additionally, you can generate the&nbsp;<span data-keyref="GML_Code">GML Code</span>&nbsp;for it using the editor's <strong>Copy GML to Clipboard</strong> <img class="icon" src="../../../../../assets/Images/Icons/Icon_GML_To_Clipboard.png" title="">.</p></div><p class="note"><span data-conref="../../../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;Some particle properties have an&nbsp;<span class="inline2">*_incr</span> and <span class="inline2">*_wiggle</span>&nbsp;parameter; changing these will affect&nbsp;<em>existing</em> particles of the given particle type. This gives you a limited way to influence existing particles in a particle system.</p><p></p><p>Particles are created from particle types, which need to be created and have their index stored in a variable so that all further particle routines can access them correctly. The following functions are used to create, check for, clear and destroy particle types:&nbsp;</p><ul class="colour"><li><a href="part_type_exists.htm">part_type_exists</a></li><li><a href="part_type_create.htm">part_type_create</a></li><li><a href="part_type_destroy.htm">part_type_destroy</a></li><li><a href="part_type_clear.htm">part_type_clear</a></li></ul><p>&nbsp;</p><p>Once you have created your particle type you should give it a <i>shape</i>. This can be one of the 14 built in shapes which are 64x64 pixel sprites with alpha blending, or you can use your own sprites which can be animated, static, random sub-images or a specific sub-image. The following functions define the visual base shape of each particle:</p><ul class="colour"><li><a href="part_type_shape.htm">part_type_shape</a></li><li><a href="part_type_sprite.htm">part_type_sprite</a></li><li><a href="part_type_subimage.htm">part_type_subimage</a></li></ul><p>&nbsp;</p><p>The following image shows the 14 built in particle types that you can choose from:</p><p><img alt="The different built-in particle sprites" class="center" src="../../../../../assets/Images/Scripting_Reference/GML/Reference/Drawing/Particle_Sprites.png">Once you have chosen the sprite for the particle type (either a default shape or your own) you can indicate the size and scale of it. The size can be specified as a range and all particles will be created with a size chosen from within the given range. The scale is the "base" value for the x and y axis scale of the particle <i>before</i> any size variations are added and the following functions are used to control these values:</p><ul class="colour"><li><a href="part_type_size.htm">part_type_size</a></li><li><a href="part_type_size_x.htm">part_type_size_x</a></li><li><a href="part_type_size_y.htm">part_type_size_y</a></li><li><a href="part_type_scale.htm">part_type_scale</a></li></ul><p>&nbsp;</p><p>Particles can also have an orientation and motion. As with most particle functions, the speed, direction and orientation are resolved as a random value that is selected from a given range and can be set with the following functions:</p><ul class="colour"><li><a href="part_type_speed.htm">part_type_speed</a></li><li><a href="part_type_direction.htm">part_type_direction</a></li><li><a href="part_type_gravity.htm">part_type_gravity</a></li><li><a href="part_type_orientation.htm">part_type_orientation</a></li></ul><p>&nbsp;</p><p>Once you have the style and movement of your particles sorted out, you can then set their colour and alpha values, both of which can be set as an absolute value during the whole lifespan of the particle, or as a scale of values that go from one to the other gradually. Note that there is also a special function that permits you to set the blending for particles and their surroundings, and this can be either normal or additive and gives some fantastic effects- The functions governing colour, alpha and blending are:</p><ul class="colour"><li><a href="part_type_colour_mix.htm">part_type_colour_mix</a></li><li><a href="part_type_colour_rgb.htm">part_type_colour_rgb</a></li><li><a href="part_type_colour_hsv.htm">part_type_colour_hsv</a></li><li><a href="part_type_colour1.htm">part_type_colour1</a></li><li><a href="part_type_colour2.htm">part_type_colour2</a></li><li><a href="part_type_colour3.htm">part_type_colour3</a></li><li><a href="part_type_alpha1.htm">part_type_alpha1</a></li><li><a href="part_type_alpha2.htm">part_type_alpha2</a></li><li><a href="part_type_alpha3.htm">part_type_alpha3</a></li><li><a href="part_type_blend.htm">part_type_blend</a></li></ul><p>&nbsp;</p><p>Particles exist on-screen for a limited amount of time and this is called their "lifetime". Particle lifetimes are measured in steps and (like previous functions) this is expressed as a range of values from which the particle will be given a specific lifetime. There are also a couple of interesting functions which can be used to make particles generate <i>other</i> particles, either each step or when they "die" (ie: Are removed from the screen), but be very careful with these functions as they can quickly create thousands of particles and crash the game! The functions that set lifetime and step or death emitting are as follows:</p><ul class="colour"><li><a href="part_type_life.htm">part_type_life</a></li><li><a href="part_type_step.htm">part_type_step</a></li><li><a href="part_type_death.htm">part_type_death</a></li></ul><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back:&nbsp;<a href="../Particles.htm">Particles</a></div><div style="float:right">Next: <a href="../Particle_Emitters/Particle_Emitters.htm">Particle Emitters</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>