<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../../assets/import/main.css"><script>let str;removeHtml=function(t){return t=(t=(t=(t=t.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(t){return t.match(/(<([^>]+)>)/gi)},setTranslator=function(t,e,a){let s;s=a?t.attr(a):t.html();let o=e[removeHtml(s)];if(null!=o&&o.length){e=retHtml(s);let n=0;e&&e.forEach(function(t,e){var a=o.replace("{"+n+"}",t);o=a===o?o.replace("{}",t):a,n++}),a?t.attr(a,o):t.html(o)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var t=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(t):($(".topic-header").append(t),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(t){return t.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={"First a simple&nbsp;{}vec3{} struct is defined, which stores an&nbsp;{}x{}, {}y{} and {}z{} variable, as well as two static methods&nbsp;{}add{} and {}dot{}. A new struct {}_v1{} is created from this. Next, both {}_v1{}'s and its static struct's variable names are retrieved using&nbsp;{}{}struct_get_names{}{}. The two arrays are then concatenated using a call to&nbsp;{}{}array_concat{}{}. Finally, a debug message shows the contents of this new array, that contains {}all{}&nbsp;of the struct's variable names.":"首先定义一个简单的 {}vec3{} 结构，其中存储 {}x{}、{}y{} 和 {}z{} 变量，以及两个静态方法 {}add{} 和 {}dot{}。 由此创建一个新的结构体 {}_v1{}。 接下来，使用 {}{}struct_get_names{}{} 检索 {14}_v1{15} 及其静态结构的变量名称。 然后，通过调用 {}{}array_concat{}{} 连接两个数组。 最后，调试消息显示这个新数组的内容，其中包含结构体的 {} 所有 {} 变量名称。","The above code first creates a temporary struct variable {}_my_struct{}&nbsp;with two variables in it: {}a{} and {}str{}.&nbsp;Next,&nbsp;{}{}struct_get_names{}{}&nbsp;is called to get an array with the variable names for the given struct. These are displayed. Finally, a for loop is used to loop through all the variable names in the array and to look up the corresponding value in the struct {}by name{} using {}{}struct_get{}{}. For each&nbsp;of these key-value pairs,&nbsp;a debug message is shown using {}{}show_debug_message{}{}.":"上面的代码首先创建一个临时结构变量 {}_my_struct{}，其中包含两个变量：{}a{} 和 {}str{}。 接下来，调用 {}{}struct_get_names{}{} 以获取包含给定结构的变量名称的数组。 这些都被显示出来。 最后，使用 for 循环循环遍历数组中的所有变量名称，并使用 {}{}struct_get{}{} 在结构体中{10}按名称{11}查找相应的值。 对于每个键值对，都会使用 {}{}show_debug_message{}{} 显示调试消息。","The above code will retrieve an array of the variable names for the given struct and then display these along with their values in the debug output.":"上面的代码将检索给定结构的变量名数组，然后在调试输出中显示这些变量名及其值。","The extended example above shows how to include static variable names by retrieving a struct's static struct and appending those variable names to the array&nbsp;of variable names.":"上面的扩展示例显示了如何通过检索结构的静态结构并将这些变量名追加到变量名数组来包含静态变量名。","The struct reference to check.":"要检查的结构引用。","This function returns an array with the variable names from a struct.":"此函数返回一个数组，其中包含结构中的变量名。","With this function you can retrieve an array populated with the variable names from a struct. You pass in the struct reference to check, and each entry in the array will be a {}string{} of the variable names that the struct contains.":"使用此函数，您可以从结构中检索用变量名填充的数组。您传入struct引用以进行检查，并且数组中的每个条目都将是该struct包含的变量名称的{}字符串{}。","You pass in the struct reference to check, and each entry in the array will be a&nbsp;{}{}String{}{}&nbsp;of the variable names that the struct contains.":"传入要检查的结构体引用，数组中的每个条目都将是该结构体包含的变量名的 {}{}String{}。","{}{}Array{}{} (each entry is a {}{}String{}{})":"{}{}Array{}{}(每个条目都是{}{}字符串{}{})","{}{}NOTE{}{}&nbsp;In case the struct gets static variables from a chain or hierarchy of static structs you'll need to traverse the chain&nbsp;of static structs to get the names of {}all{} static variables.":"{}{} 注意 {}{} 如果结构从静态结构的链或层次结构中获取静态变量，则需要遍历静态结构的链以获取 {} 所有 {} 静态变量的名称。","{}{}NOTE{}{}&nbsp;This function doesn't&nbsp;return the {}static{} variables&nbsp;of the struct. These belong to its&nbsp;{}Static Struct{}, that you can get using&nbsp;{}{}static_get{}{}.":"{}{} 注意 {}{} 此函数不返回结构的 {} 静态 {} 变量。 这些属于其 {} 静态结构 {}，您可以使用 {}{}static_get{}{} 获取。"},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(t){json_global=t}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../..",gTopicId="8.2.2.1.0_19"</script><script type="text/javascript" src="../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>struct_get_names</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../assets/css/default.css" type="text/css"><script src="../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Page explaining the function variable_struct_get_names"><meta name="rh-index-keywords" content="variable_struct_get_names,struct_get_names"><meta name="search-keywords" content="variable_struct_get_names,struct_get_names"><meta name="is_pure" content="true"><meta name="brsnext" value="GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_names_count.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_remove.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="struct_get_names"><span>struct_get_names</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">struct_get_names</span></h1><p>This function returns an array with the variable names from a struct.</p><p>You pass in the struct reference to check, and each entry in the array will be a&nbsp;<span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>&nbsp;of the variable names that the struct contains.</p><p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;This function doesn't&nbsp;return the <em>static</em> variables&nbsp;of the struct. These belong to its&nbsp;<a href="../../GML_Overview/Structs/Static_Structs.htm">Static Struct</a>, that you can get using&nbsp;<span class="inline3_func"><a href="static_get.htm">static_get</a></span>.</p><p>&nbsp;</p><h4>Syntax:</h4><p class="code"><span data-field="title" data-format="default">struct_get_names</span>(struct);</p><table><tbody><tr><th>Argument</th><th>Type</th><th>Description</th></tr><tr><td>struct</td><td><span data-keyref="Type_Struct"><a target="_blank" href="../../GML_Overview/Structs.htm">Struct</a></span></td><td>The struct reference to check.</td></tr></tbody></table><p>&nbsp;</p><h4>Returns:</h4><p class="code"><span data-keyref="Type_Array"><a target="_blank" href="../../GML_Overview/Arrays.htm">Array</a></span> (each entry is a <span data-keyref="Type_String"><a target="_blank" href="../../GML_Overview/Data_Types.htm">String</a></span>)</p><p>&nbsp;</p><h4>Example 1: Basic Use</h4><p class="code">var _my_struct = {a: 7, str: "a string"};<br><br>var _arr_names = <span data-field="title" data-format="default">struct_get_names</span>(_my_struct);<br>show_debug_message("Variables for struct: " + string(_arr_names));<br><br>var _str = "", _len =&nbsp;array_length(_arr_names);<br>for (var i = 0; i &lt; _len; i++;)<br>{<br>&nbsp; &nbsp; _str = _arr_names[i] + ":" + string(struct_get(_my_struct, _arr_names[i]));<br>&nbsp;&nbsp;&nbsp;&nbsp;show_debug_message(_str);<br>}</p><p>The above code first creates a temporary struct variable <span class="inline2">_my_struct</span>&nbsp;with two variables in it: <span class="inline2">a</span> and <span class="inline2">str</span>.&nbsp;Next,&nbsp;<span class="inline3_func"><span data-field="title" data-format="default">struct_get_names</span></span>&nbsp;is called to get an array with the variable names for the given struct. These are displayed. Finally, a for loop is used to loop through all the variable names in the array and to look up the corresponding value in the struct <em>by name</em> using <span class="inline3_func"><a href="variable_struct_get.htm">struct_get</a></span>. For each&nbsp;of these key-value pairs,&nbsp;a debug message is shown using <span class="inline3_func"><a href="../Debugging/show_debug_message.htm">show_debug_message</a></span>.</p><p>&nbsp;</p><h4>Example 2: Including Static Variables</h4><p class="code">function vec3(_x, _y, _z) constructor<br>{<br>&nbsp;&nbsp; &nbsp;x = _x;<br>&nbsp;&nbsp; &nbsp;y = _y;<br>&nbsp;&nbsp; &nbsp;z = _z;<br>&nbsp;&nbsp; &nbsp;<br>&nbsp;&nbsp; &nbsp;static add = function(_vec2)<br>&nbsp;&nbsp; &nbsp;{<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;x += _vec2.x;<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;y += _vec2.y;<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;z += _vec2.z;<br>&nbsp;&nbsp; &nbsp;};<br>&nbsp;&nbsp; &nbsp;static dot = function(_vec2)<br>&nbsp;&nbsp; &nbsp;{<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;return dot_product_3d(x, y, z, _vec2.x, _vec2.y, _vec2.z);<br>&nbsp;&nbsp; &nbsp;};<br>};<br>var _v1 = new vec3(100, 20, 0);<br><br>var _arr_names = struct_get_names(_v1), _arr_names_static = struct_get_names(static_get(_v1));<br>var _arr_names_all = array_concat(_arr_names, _arr_names_static);<br>show_debug_message($"Variable names for struct (including static): {_arr_names_all}");</p><p>The extended example above shows how to include static variable names by retrieving a struct's static struct and appending those variable names to the array&nbsp;of variable names.</p><p>First a simple&nbsp;<span class="inline2">vec3</span> struct is defined, which stores an&nbsp;<span class="inline2">x</span>, <span class="inline2">y</span> and <span class="inline2">z</span> variable, as well as two static methods&nbsp;<span class="inline2">add</span> and <span class="inline2">dot</span>. A new struct <span class="inline2">_v1</span> is created from this. Next, both <span class="inline2">_v1</span>'s and its static struct's variable names are retrieved using&nbsp;<span class="inline3_func"><span data-field="title" data-format="default">struct_get_names</span></span>. The two arrays are then concatenated using a call to&nbsp;<span class="inline3_func"><a href="array_concat.htm">array_concat</a></span>. Finally, a debug message shows the contents of this new array, that contains <em>all</em>&nbsp;of the struct's variable names.</p><p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;In case the struct gets static variables from a chain or hierarchy of static structs you'll need to traverse the chain&nbsp;of static structs to get the names of <em>all</em> static variables.</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="Variable_Functions.htm">Variable Functions</a></div><div style="float:right">Next:&nbsp;<a href="variable_struct_names_count.htm">struct_names_count</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>