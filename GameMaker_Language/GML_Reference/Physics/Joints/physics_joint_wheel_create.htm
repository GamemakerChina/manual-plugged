<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../../../../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../../../../assets/import/layer/layer.js"></script><script type="text/javascript" src="../../../../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../../../../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../../../../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../../../../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../../../../assets/import/main.css"><script>let str;removeHtml=function(t){return t=(t=(t=(t=t.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(t){return t.match(/(<([^>]+)>)/gi)},setTranslator=function(t,e,o){let a;a=o?t.attr(o):t.html();let i=e[removeHtml(a)];if(null!=i&&i.length){e=retHtml(a);let n=0;e&&e.forEach(function(t,e){var o=i.replace("{"+n+"}",t);i=o===i?i.replace("{}",t):o,n++}),o?t.attr(o,i):t.html(i)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var t=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(t):($(".topic-header").append(t),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(t){return t.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={'A wheel joint simply combines a piston and a revolute joint, like a wheel mounted on the shock absorber of a car. You specify the anchor point for the joint well as the two physics enabled instances to joint, and the first instance will act as the "body" for the joint, while the second will be the "wheel", and be permitted to move freely around the joint axis. You can also set an axis vector, which is the imaginary line along which the joint will act as a "spring" permitting the wheel to bounce up and down along it as it encounters obstacles (much like the piston joint). The following image illustrates this:':'车轮关节简单地将活塞和旋转关节结合在一起，就像安装在汽车减震器上的车轮一样。指定关节的锚点以及要关节的两个启用了物理的实例，第一个实例将作为关节的"实体"，而第二个实例将作为"车轮"，并允许围绕关节轴自由移动。你也可以设置一个轴向量，这是一条假想的线，关节将沿着这条线充当"弹簧"，允许车轮在遇到障碍物时沿着它上下反弹(很像活塞关节)。下图说明了这一点：','As with all the joints, if you set the "col" value to {}true{} then the two instances can interact and collide with each other but {}only{} if they have collision events, however if it is set to {}false{}, they will not collide no matter what.':'与所有关节一样，如果将 "col" 值设置为 {}true{}，则两个实例可以相互作用并发生碰撞，但是如果它们发生碰撞事件，则{}只能{}发生碰撞，但是如果设置为 {}false{}，则无论发生什么情况，它们都不会发生碰撞。',"Sets the maximum motor torque used to achieve the desired motor speed (in Newtons per meter)":"设置用于实现所需马达转速的最大马达转矩(单位：牛顿/米)","The above code creates and defines two new fixtures. These are then bound to the calling instance and a new instance that is created before having a wheel joint applied to connect them, after which the fixtures are deleted from memory.":"上述代码创建并定义了两个新的装置。然后，这些装置将绑定到调用实例和创建的新实例，然后应用控制盘关节来连接它们，之后，装置将从内存中删除。","The first instance to connect with the joint":"与关节连接的第一个实例","The second instance to connect with the joint":"与关节连接的第二个实例","The x component of the wheel axis vector":"车轮轴向量的 X 分量","The x coordinate where the joint is anchored, within the game world":"游戏世界中关节定位的 X 坐标","The y component of the wheel axis vector":"车轮轴向量的 Y 分量","The y coordinate where the joint is anchored, within the game world":"游戏世界中关节定位的 Y 坐标","This damping ratio for the joint":"关节的阻尼比","This is the oscillation frequency for the joint, in hertz":"这是关节的振荡频率，单位为赫兹","This is the speed at which the motor should rotate":"这是马达应该旋转的速度","Whether the motor should be active (true) or not (false)":"马达是否应该启动 (true) 或不启动 (false)","Whether the two instances can collide (true) or not (false)":"这两个实例是否可以碰撞 (true) 或不碰撞 (false)","{}If you choose to enable a motor, then the second instance will rotate around the anchor position, and you can set the maximum motor torque used to achieve the desired motor speed (N/m) as well as the speed at which the motor should turn. Since the wheel joint also has an axis along which it may move, you can set the oscillation frequency (in Hz) as well as the damping ratio for the joint - you may need to play with these values to fine tune them and it is recommended that you start off with smaller values and increment them until you get the effect that you desire.":"{}如果选择启用马达，则第二个实例将围绕固定位置旋转，您可以设置用于实现所需马达速度 (N/m) 的最大马达扭矩以及马达应该转动的速度。由于车轮关节还有一个可以沿其移动的轴，因此可以设置振荡频率 (以 Hz 为单位) 以及关节的阻尼比-您可能需要使用这些值来微调它们，建议您从较小的值开始并递增它们，直到获得所需的效果。"},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(t){json_global=t}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../../..",gTopicId="8.2.2.13.4.0_8"</script><script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>physics_joint_wheel_create</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css"><script src="../../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Reference page for physics_joint_wheel_create"><meta name="rh-index-keywords" content="physics_joint_wheel_create"><meta name="search-keywords" content="physics_joint_wheel_create"><meta name="is_pure" content="true"><meta name="brsnext" value="GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_weld_create.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_rope_create.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="physics_joint_wheel_create"><span>physics_joint_wheel_create</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1>physics_joint_wheel_create</h1><p>A wheel joint simply combines a piston and a revolute joint, like a wheel mounted on the shock absorber of a car. You specify the anchor point for the joint well as the two physics enabled instances to joint, and the first instance will act as the "body" for the joint, while the second will be the "wheel", and be permitted to move freely around the joint axis. You can also set an axis vector, which is the imaginary line along which the joint will act as a "spring" permitting the wheel to bounce up and down along it as it encounters obstacles (much like the piston joint). The following image illustrates this:</p><p><img alt="Wheel joint illustration" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Physics/wheel_joint_image.png">If you choose to enable a motor, then the second instance will rotate around the anchor position, and you can set the maximum motor torque used to achieve the desired motor speed (N/m) as well as the speed at which the motor should turn. Since the wheel joint also has an axis along which it may move, you can set the oscillation frequency (in Hz) as well as the damping ratio for the joint - you may need to play with these values to fine tune them and it is recommended that you start off with smaller values and increment them until you get the effect that you desire.</p><p>As with all the joints, if you set the "col" value to <span class="inline">true</span> then the two instances can interact and collide with each other but <i>only</i> if they have collision events, however if it is set to <span class="inline">false</span>, they will not collide no matter what.</p><p>&nbsp;</p><h4>Syntax:</h4><p class="code">physics_joint_wheel_create(inst1, inst2, anchor_x, anchor_y, axis_x, axis_y, enableMotor, max_motor_torque, motor_speed, freq_hz, damping_ratio, col)</p><table><tbody><tr><th>Argument</th><th>Type</th><th>Description</th></tr><tr><td>inst1</td><td><span data-keyref="Type_ID_Instance"><a target="_blank" href="../../Asset_Management/Instances/Instance_Variables/id.htm">Object Instance</a></span></td><td>The first instance to connect with the joint</td></tr><tr><td>inst2</td><td><span data-keyref="Type_ID_Instance"><a target="_blank" href="../../Asset_Management/Instances/Instance_Variables/id.htm">Object Instance</a></span></td><td>The second instance to connect with the joint</td></tr><tr><td>anchor_x</td><td><span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span></td><td>The x coordinate where the joint is anchored, within the game world</td></tr><tr><td>anchor_y</td><td><span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span></td><td>The y coordinate where the joint is anchored, within the game world</td></tr><tr><td>axis_x</td><td><span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span></td><td>The x component of the wheel axis vector</td></tr><tr><td>axis_y</td><td><span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span></td><td>The y component of the wheel axis vector</td></tr><tr><td>enableMotor</td><td><span data-keyref="Type_Bool"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Boolean</a></span></td><td>Whether the motor should be active (true) or not (false)</td></tr><tr><td>max_motor_torque</td><td><span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span></td><td>Sets the maximum motor torque used to achieve the desired motor speed (in Newtons per meter)</td></tr><tr><td>motor_speed</td><td><span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span></td><td>This is the speed at which the motor should rotate</td></tr><tr><td>freq_hz</td><td><span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span></td><td>This is the oscillation frequency for the joint, in hertz</td></tr><tr><td>damping_ratio</td><td><span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span></td><td>This damping ratio for the joint</td></tr><tr><td>col</td><td><span data-keyref="Type_Constant_Colour"><a target="_blank" href="../../Drawing/Colour_And_Alpha/Colour_And_Alpha.htm">Colour</a></span></td><td>Whether the two instances can collide (true) or not (false)</td></tr></tbody></table><p>&nbsp;</p><h4>Returns:</h4><p class="code"><span data-keyref="Type_ID_Physics_Joint"><a target="_blank" href="Joints.htm">Physics Joint ID</a></span></p><p>&nbsp;</p><h4>Example:</h4><p class="code">var mainFixture = physics_fixture_create();<br>physics_fixture_set_box_shape(mainFixture, 128, 32);<br>var wheelFixture = physics_fixture_create();<br>physics_fixture_set_circle_shape(wheelFixture, 32);<br>var o_id = instance_create_layer(x+25, y + 100, "Instances", obj_Wheel);<br>physics_fixture_bind(mainFixture, id);<br>physics_fixture_bind(wheelFixture, o_id);<br>physics_joint_wheel_create(id, o_id, o_id.x, o_id.y, 0, 1, true, 10, 1, 15, 6, false);<br>physics_fixture_delete(mainFixture);<br>physics_fixture_delete(wheelFixture);</p><p>The above code creates and defines two new fixtures. These are then bound to the calling instance and a new instance that is created before having a wheel joint applied to connect them, after which the fixtures are deleted from memory.</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="Joints.htm">Joints</a></div><div style="float:right">Next:&nbsp;<a href="physics_joint_weld_create.htm">physics_joint_weld_create</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>