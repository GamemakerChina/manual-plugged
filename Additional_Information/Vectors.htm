<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../assets/import/layer/layer.js"></script><script type="text/javascript" src="../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../assets/import/main.css"><script>let str;removeHtml=function(t){return t=(t=(t=(t=t.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(t){return t.match(/(<([^>]+)>)/gi)},setTranslator=function(t,e,o){let n;n=o?t.attr(o):t.html();let i=e[removeHtml(n)];if(null!=i&&i.length){e=retHtml(n);let a=0;e&&e.forEach(function(t,e){var o=i.replace("{"+a+"}",t);i=o===i?i.replace("{}",t):o,a++}),o?t.attr(o,i):t.html(i)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){var t=`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`;$(".header").length?$(".header").append(t):($(".topic-header").append(t),$(".topic-header button").css("position","relative").css("top","44px"))},removeExtensionFromHash=function(t){return t.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")};let json_global,json_file={'At some point when creating a game of any complexity you will probably have to deal with {}vectors{}. They are used in physics, in AI, in trigonometry and many other situations, but what is a vector? Well, to put it simply, a vector is a {}directed quantity{}. Let\'s start by looking at a 1 dimensional vector -&nbsp;which is just the same as a single number -&nbsp;by drawing a numbered line with an arrow starting at zero and ending at 5. This is the vector "a" which is equal to 5 and if we draw another arrow starting at the 5 and ending at the 8 we have vector "b" which is equal to 3:':"在创造一款复杂的游戏时，你可能需要处理{}向量{}。它们被用在物理学、AI、三角函数和许多其他情况中，但什么是向量呢?简单地说，向量是一个{}有方向的量{}。让我们从一个一维向量开始，它和一个数字是一样的，画一条从0开始，到5结束的有箭头的线。这是向量a，它等于5。如果，我们再画一个箭头，从5开始，到8结束，我们得到向量b，等于3","Great! We have now normalised the components of the vector! But of what practical use is that in the context of {}GameMaker{}? Okay, let's give you a practical example...":"太棒了!我们现在已经归一化了向量的分量!但这在{}GameMaker{}上下文中有什么实际用途呢?好吧，让我给你一个实际的例子…","Let's do the same for vector b now:":"现在让我们对向量 b 做同样的事情:","Notice something? Those two vectors are the same! This is yet another demonstration that a vector has no position, only direction and length, and we can draw those vectors relative to each other around a local [0,0] axis:":"注意些什么吗?这两个向量是一样的!这是向量没有位置，只有方向和长度的另一个证明，我们可以围绕局部[0,0]轴画出这些向量之间的相对关系:",'Now, that gives us the exact length of the vector "a", so let\'s use that to normalise the two vector components {}vx{} and {}vy{}:':"现在，我们得到了向量“a”的确切长度，所以让我们用它来归一化两个向量分量{}vx{}和{}vy{}:","Ordinarily, vectors can be used in many situations but sometimes you want to constrain their value (like when dealing with angles) which is why we {}normalise {}them. This is essentially a mathematical trick that is used to convert a vector of length {}n{} to a vector of length 1, meaning that the vector components get {}normalised {}to be between 0 and 1. These vectors are also called {}unit vectors{}:":"通常，向量可以在很多情况下使用，但有时你想约束它们的值(比如处理角度时)，这就是为什么我们{}归一化{}它们。这本质上是一种数学技巧，用于将长度为{}n{}的向量转换为长度为1的向量，这意味着向量分量将{}归一化{}在0到1之间。这些向量也被称为{}单位向量{}:","Say you have a game where the player has to shoot at an enemy and you need to know how much the bullet object has to move along the x and y axis each step to hit it:":"假设你在一款游戏中，玩家必须向敌人射击，你需要知道子弹物体在每一步中需要沿x轴和y轴移动多少距离才能击中它:","So, to hit the target we need to add 3 to the bullets x coordinate and 4 to its y coordinate every step.":"所以，为了击中目标，每一步我们需要在子弹的x坐标上增加3，在y坐标上增加4。",'So, what about 2 dimensional vectors? Well, we can think of them as consisting not just of "left" and "right, but "up" and "down" too:':"那么，二维向量呢?嗯，我们可以认为它们不仅包括“左”和“右”，还包括“上”和“下”:",Vectors:"向量","We then use these values to calculate the length of the vector:":"然后我们使用这些值来计算向量的长度:","{}A good example of a vector used in {}GameMaker{} is the physics&nbsp;{}gravity{}&nbsp;property in the room editor. The gravity is calculated as a vector around a [0,0] position. So, if you define gravity as [x0, y10], the gravity would be&nbsp;{}down{}&nbsp;with a force of 10.":"{}{1}GameMaker{2}中使用向量的一个很好的例子是room编辑器中的物理 {}gravity{} 属性。重力被计算为一个围绕[0,0]位置的向量。所以，如果你定义重力为[x0, y10]，重力将是{}向下{}，力为10。","{}First we take the coordinates of the vector and get the components:":"首先，我们取向量的坐标并得到分量:","{}For this you would use the player and enemy coordinates to get the vector components and the length, then you would normalise them to get a value between 0 and 1 which you would finally multiply by the speed you wish the bullet to travel at each step. These final two values you would then store and add onto the starting x and y coordinates each step. Sound complicated? It's not, look (values have been rounded to one decimal place for simplicity):":"{}为此，你可以使用玩家和敌人坐标来获得向量组件和长度，然后将其归一化，得到0到1之间的值，最后乘以你希望子弹在每一步中移动的速度。最后这两个值将存储并添加到每一步的起始x和y坐标上。听起来很复杂?它不是，看(为了简单起见，值被四舍五入到小数点后一位):","{}For this you would use the player and enemy coordinates to get the vector components and the length, then you would normalise them to get a value between 0 and 1 which you would finally multiply by the speed you wish the bullet to travel at each step. These final two values you would then store and add onto the starting x and y coordinates each step. Sounds complicated? It's not, look (values have been rounded to one decimal place for simplicity):":"{}为此，你可以使用玩家和敌人坐标来获得向量组件和长度，然后将其归一化，得到0到1之间的值，最后乘以你希望子弹在每一步中移动的速度。最后这两个值将存储并添加到每一步的起始x和y坐标上。听起来很复杂?它不是，看(为了简单起见，值被四舍五入到小数点后一位):",'{}Now, those are not actually vectors yet as we still have to reduce them down using their start and end coordinates. Looking at vector "a"&nbsp;we can see it has a start coordinate of [2,2] and an end coordinate of [4,3] and so to get the vector from this we need to reduce it down by subtracting the end coordinates from the start coordinates like this:':"{}现在，它们实际上还不是向量，因为我们仍然需要使用它们的开始和结束坐标来减去它们。 查看向量“a”，我们可以看到它的起始坐标为 [2,2]，结束坐标为 [4,3]，所以为了得到这个向量，我们需要通过从起始坐标减去结束坐标来减少它，就像这样:",'{}This means that a 2D vector is defined by two values, an "x" and a "y" position relative to the local [0,0] axis. And what about 3D vectors? Well, they have the added dimension of "depth" to contend with and would be calculated as positions "x", "y" and "z" around a local axis something like this:':"{}这意味着2D向量由两个值定义，相对于局部[0,0]轴的“x”和“y”位置。那么三维向量呢?嗯，它们有一个额外的“深度”维度，可以用“x”、“y”和“z”位置围绕局部轴进行计算，就像这样:","{}To calculate a normalised vector, we must first have the original vector components, then use them to get the length of the vector. We then divide each of the vector components by this length to get the normalised vector components&nbsp;which form the normalised vector in which the {}sum of the squares of all coordinates is equal to 1{}. Here's how:":"{}要计算一个归一化的向量，我们必须首先有原始的向量分量，然后用它们来得到向量的长度。然后，我们将每个向量分量除以这个长度，得到归一化的向量分量，它们形成了归一化的向量，其中所有坐标的平方和的{}之和等于1{}。方法如下:","{}Vectors{}":"{}向量{}",'{}You should realise that it doesn\'t matter where a vector starts, all that matters is how long it is and what direction it goes in. So vector "b" starts at 5, is 3 units long and points to the "right", making it identical to a vector starting at 0 and going to 3. Now, you can also add these vectors together, by putting the two vectors "a" and "b" end to end to get the vector "c" which is equal to 8. What about negative numbers? Well, if, in the above image, a vector that points to the "right" corresponds to a positive number, you can see that a vector pointing to the "left" would correspond to a negative number, making a one-dimensional vector nothing more than a signed (+/-) number. This explains the essential concept of a vector: only {}length{} and {}direction{} ("left" or "right" in this case) count, not position.':"{}你应该意识到，一个向量从哪里开始并不重要，重要的是它有多长，朝什么方向走。所以向量b从5开始，长3个单位，指向右边，这和从0开始到3的向量是一样的。现在，你也可以把这些向量相加，通过把a和b两个向量首尾相连得到向量c等于8。那么负数呢?好吧，如果在上面的图像中，一个指向“右”的向量对应一个正数，你可以看到一个指向“左”的向量对应一个负数，使得一个一维向量仅仅是一个带符号(+/-)的数。这解释了向量的基本概念:只计算{}长度{}和{}方向{}(在本例中为“左”或“右”)，而不计算位置。"},get_json_global=$.ajax({url:"/global.json",type:"GET",dataType:"json",async:!1,success:function(t){json_global=t}});$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json_file)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="..",gTopicId="7.0_5"</script><script type="text/javascript" src="../template/scripts/rh.min.js"></script><script type="text/javascript" src="../template/scripts/common.min.js"></script><script type="text/javascript" src="../template/scripts/topic.min.js"></script><script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Vectors</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../assets/css/default.css" type="text/css"><script src="../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Page that explains how vectors work"><meta name="rh-index-keywords" content="Vectors"><meta name="search-keywords" content="Vectors,vector maths"><meta name="brsnext" value="Additional_Information/Guide_To_Using_Buffers.htm"><meta name="brsprev" value="Additional_Information/Type_Tables.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Vectors"><span>Vectors</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">Vectors</span></h1><p>At some point when creating a game of any complexity you will probably have to deal with <strong>vectors</strong>. They are used in physics, in AI, in trigonometry and many other situations, but what is a vector? Well, to put it simply, a vector is a <em>directed quantity</em>. Let's start by looking at a 1 dimensional vector -&nbsp;which is just the same as a single number -&nbsp;by drawing a numbered line with an arrow starting at zero and ending at 5. This is the vector "a" which is equal to 5 and if we draw another arrow starting at the 5 and ending at the 8 we have vector "b" which is equal to 3:</p><p><img alt="1D Vector Example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_1D.png">You should realise that it doesn't matter where a vector starts, all that matters is how long it is and what direction it goes in. So vector "b" starts at 5, is 3 units long and points to the "right", making it identical to a vector starting at 0 and going to 3. Now, you can also add these vectors together, by putting the two vectors "a" and "b" end to end to get the vector "c" which is equal to 8. What about negative numbers? Well, if, in the above image, a vector that points to the "right" corresponds to a positive number, you can see that a vector pointing to the "left" would correspond to a negative number, making a one-dimensional vector nothing more than a signed (+/-) number. This explains the essential concept of a vector: only <em>length</em> and <em>direction</em> ("left" or "right" in this case) count, not position.</p><p>So, what about 2 dimensional vectors? Well, we can think of them as consisting not just of "left" and "right, but "up" and "down" too:</p><p><img alt="Various 2D Vectors" class="center" height="310" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_Various.png" width="406">Now, those are not actually vectors yet as we still have to reduce them down using their start and end coordinates. Looking at vector "a"&nbsp;we can see it has a start coordinate of [2,2] and an end coordinate of [4,3] and so to get the vector from this we need to reduce it down by subtracting the end coordinates from the start coordinates like this:</p><p class="code">a = [(x2-x1), (y2-y1)] = [(4-2), (3-2)] = [2,1]</p><p>Let's do the same for vector b now:</p><p class="code">b = [(-1.2 -(-3.2)) ,(2.1 - 1.1)] = [2 ,1]</p><p>Notice something? Those two vectors are the same! This is yet another demonstration that a vector has no position, only direction and length, and we can draw those vectors relative to each other around a local [0,0] axis:</p><p><img alt="2D Vectors aroun [0, 0]" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_2D.png">This means that a 2D vector is defined by two values, an "x" and a "y" position relative to the local [0,0] axis. And what about 3D vectors? Well, they have the added dimension of "depth" to contend with and would be calculated as positions "x", "y" and "z" around a local axis something like this:</p><p><img alt="3D Vectors" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_3D.png">A good example of a vector used in <span data-keyref="GameMaker Name">GameMaker</span> is the physics&nbsp;<strong>gravity</strong>&nbsp;property in the room editor. The gravity is calculated as a vector around a [0,0] position. So, if you define gravity as [x0, y10], the gravity would be&nbsp;<em>down</em>&nbsp;with a force of 10.</p><p>Ordinarily, vectors can be used in many situations but sometimes you want to constrain their value (like when dealing with angles) which is why we <strong>normalise</strong> them. This is essentially a mathematical trick that is used to convert a vector of length <em>n</em> to a vector of length 1, meaning that the vector components get <em>normalised</em> to be between 0 and 1. These vectors are also called <strong>unit vectors</strong>:</p><p><img alt="Unit Vector example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_Normalised_1D.png">To calculate a normalised vector, we must first have the original vector components, then use them to get the length of the vector. We then divide each of the vector components by this length to get the normalised vector components&nbsp;which form the normalised vector in which the <strong>sum of the squares of all coordinates is equal to 1</strong>. Here's how:</p><p><img alt="Vector Normalisation" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_Normalised_1.png">First we take the coordinates of the vector and get the components:</p><p class="code">vx = (x2 - x1); // = (7 - 1) = 6<br>vy = (y2 - y1); // = (4 - 1) = 3</p><p>We then use these values to calculate the length of the vector:</p><p class="code">len = sqrt(sqr(vx) + sqr(vy));&nbsp;// = sqrt(36 + 9) = sqrt(45) = 6.708203932499369</p><p>Now, that gives us the exact length of the vector "a", so let's use that to normalise the two vector components <span class="inline">vx</span> and <span class="inline">vy</span>:</p><p class="code">vx = (vx/len); //&nbsp;= (6 / 6.708203932499369) = 0.8944271909999159<br>vy = (vy/len); // = (3 / 6.708203932499369) = 0.4472135954999579</p><p>Great! We have now normalised the components of the vector! But of what practical use is that in the context of <span data-keyref="GameMaker Name">GameMaker</span>? Okay, let's give you a practical example...</p><p>Say you have a game where the player has to shoot at an enemy and you need to know how much the bullet object has to move along the x and y axis each step to hit it:</p><p><img alt="Vector Game Example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Vector_Image_Normalised_2.png">For this you would use the player and enemy coordinates to get the vector components and the length, then you would normalise them to get a value between 0 and 1 which you would finally multiply by the speed you wish the bullet to travel at each step. These final two values you would then store and add onto the starting x and y coordinates each step. Sounds complicated? It's not, look (values have been rounded to one decimal place for simplicity):</p><p class="code">px = 100;<br>py = 425;<br>ex = 356;<br>ey = 83;<br>bullet_speed = 5;<br><br>vx = (ex - px); // = 256<br>vy = (ey - py); // = -342<br><br>len = sqrt(sqr(vx) + sqr(vy)); // = sqrt(65536 + 116964) = 427.2<br><br>vx = vx / len; //&nbsp;= 0.6<br>vy = vy / len; // = 0.8<br><br>speed_x = vx * bullet_speed; //&nbsp;= 3<br>speed_y = vy * bullet_speed; // = 4</p><p>So, to hit the target we need to add 3 to the bullets x coordinate and 4 to its y coordinate every step.</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="Additional_Information.htm">Additional Information</a></div><div style="float:right">Next:&nbsp;<a href="Guide_To_Using_Buffers.htm">Guide To Using Buffers</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>