<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../assets/import/jquery-3.6.1.min.js"></script><script type="text/javascript" src="../assets/import/layer/layer.js"></script><script type="text/javascript" src="../assets/import/pangu.min.js"></script><link rel="stylesheet" type="text/css" href="../assets/import/layer/layui_btn.css"><link rel="stylesheet" type="text/css" href="../assets/import/layer/layui_col.css"><link rel="stylesheet" type="text/css" href="../assets/import/layer/theme/default/layer.css"><link rel="stylesheet" type="text/css" href="../assets/import/main.css"><script>let str;removeHtml=function(t){return t=(t=(t=(t=t.replace(/(<([^>]+)>)/gi,"{}")).replace(/\r\n/g,"\n")).replace(/\n/g,"")).replace(/ {2,}/g," ")},retHtml=function(t){return t.match(/(<([^>]+)>)/gi)},setTranslator=function(t,n,a){let e;e=a?t.attr(a):t.html();let l=n[removeHtml(e)];if(null!=l&&l.length){n=retHtml(e);let o=0;n&&n.forEach(function(t,n){var a=l.replace("{"+o+"}",t);l=a===l?l.replace("{}",t):a,o++}),a?t.attr(a,l):t.html(l)}},noTranslationState=function(){return"true"==window.localStorage.getItem("noTranslationState")},noTranslationStateToggle=function(){window.localStorage.setItem("noTranslationState",!noTranslationState())},addNoTranslationStateButton=function(){$(".header").length&&$(".header").append(`
		
		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>打开编辑器</button>

		<button style="
			float: right;
			font-size: 16px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>切换翻译</button>
		`)},removeExtensionFromHash=function(t){return t.replaceAll("#t=","").replaceAll("%2F","/").replaceAll(".htm","")},$(function(){if(addNoTranslationStateButton(),noTranslationState())return!1;$("div.footer a,h4,caption").each(function(){setTranslator($(this),json_global)}),$("p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption").each(function(){setTranslator($(this),json)}),$("th,.warning,.important,.optional").each(function(){setTranslator($(this),json_global)}),$(".header").length&&(window.setInterval(function(){$("#toc-panel a:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)}),$(".GlossDefinitionText:not('isTranslate')").each(function(){$(this).addClass("isTranslate"),setTranslator($(this),json_global)})},250),console.log("成功啦!现在正在疯狂翻译菜单中!")),$(".tooltip").each(function(){setTranslator($(this),json_global,"title")})}),document.addEventListener("DOMContentLoaded",()=>{pangu.autoSpacingPage()})</script><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="..",gTopicId="7.0_11"</script><script type="text/javascript" src="../template/scripts/rh.min.js"></script><script type="text/javascript" src="../template/scripts/common.min.js"></script><script type="text/javascript" src="../template/scripts/topic.min.js"></script><script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><link rel="stylesheet" type="text/css" href="../assets/css/default.css"><script src="../../assets/scripts/main_script.js"></script><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><meta name="generator" content="Adobe RoboHelp 2022"><title>Guide To Using JSON</title><meta name="topic-status" content="Draft"><link rel="stylesheet" type="text/css" href="../assets/css/default.css"><meta name="rh-authors" content="Bart Teunis"><meta name="topic-comment" content="This page is a guide on how to work with JSON in GameMaker"><meta name="template" content="../assets/masterpages/Manual_Page.htt"><meta name="search-keywords" content="json"><meta name="rh-index-keywords" content="Guide To Using JSON"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Guide To Using JSON"><span>Guide To Using JSON</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><div></div><div><h1><span data-field="title" data-format="default">Guide To Using JSON</span></h1><p>This page describes how to work with JSON in&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>.</p><div class="minitoc" data-minitoc-targetid="drop-down" style=""><p class="minitoc-caption" href="#" style="">Contents</p><ol class="minitoc-list" style=""><li><a href="#json" class="minitoc-list-item">JSON</a></li><li><a href="#json_in_gamemaker" class="minitoc-list-item">JSON in&nbsp;<span id="">GameMaker</span></a></li><ol><li><a href="#which_functions_to_use" class="minitoc-list-item">Which Functions to Use</a></li><li><a href="#data_conversions" class="minitoc-list-item">Data Conversions</a></li><li><a href="#filter_function" class="minitoc-list-item">Filter Function</a></li></ol><li><a href="#writing_json" class="minitoc-list-item">Writing JSON</a></li><ol><li><a href="#prettify" class="minitoc-list-item">Prettify</a></li><li><a href="#usage_notes" class="minitoc-list-item">Usage Notes</a></li></ol><li><a href="#reading_json" class="minitoc-list-item">Reading JSON</a></li><ol><li><a href="#usage_notes1" class="minitoc-list-item">Usage Notes</a></li></ol><li><a href="#serialisation" class="minitoc-list-item">Serialisation</a></li></ol></div><h2 id="json">JSON</h2><div><p>JSON (JavaScript Object Notation) is a lightweight data-interchange format which is easy to read and write, for both people and machines. It is built on two basic structures:</p><ul class="colour"><li>A collection of name/value pairs, known as a "map", "dictionary" or "object" in programming languages. It is represented in&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>&nbsp;by a&nbsp;<span data-keyref="Type_Struct"><a target="_blank" href="../GameMaker_Language/GML_Overview/Structs.htm">Struct</a></span>&nbsp;or a&nbsp;<span data-keyref="Type_ID_DS_Map"><a target="_blank" href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_create.htm">DS Map</a></span>.</li><li>An ordered list of values, known as a "list",&nbsp;"array" or "sequence" in other programming languages. It is represented in&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>&nbsp;by an&nbsp;<span data-keyref="Type_Array"><a target="_blank" href="../GameMaker_Language/GML_Overview/Arrays.htm">Array</a></span>&nbsp;or a&nbsp;<span data-keyref="Type_ID_DS_List"><a target="_blank" href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_create.htm">DS List</a></span>.</li></ul><p class="note"><span data-conref="../assets/snippets/Tag_important.hts"><span class="important">IMPORTANT</span></span>&nbsp;JSON is <em>agnostic</em> about numbers. In any programming language, there can be a variety of number types of various capacities and complements, fixed or floating, binary or decimal. That can make interchange between different programming languages difficult. JSON instead offers only the representation of numbers that humans use: a sequence of digits. All programming languages know how to make sense of digit sequences even if they disagree on internal representations. For more information see the <a href="https://ecma-international.org/publications-and-standards/standards/ecma-404/">ECMA JSON Standard</a>.</p></div><h2 id="json_in_gamemaker">JSON in&nbsp;<span data-keyref="GameMaker Name" id="">GameMaker</span></h2><p><span data-keyref="GameMaker Name">GameMaker</span>&nbsp;has built-in support for reading and writing&nbsp;JSON through two sets of functions:&nbsp;</p><ul class="colour"><li><span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span>&nbsp;and&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span>&nbsp;which you use to convert a JSON string to a collection of <a href="../GameMaker_Language/GML_Overview/Structs.htm">Structs</a>&nbsp;and&nbsp;<a href="../GameMaker_Language/GML_Overview/Arrays.htm">Arrays</a>&nbsp;and back.</li><li><span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span>&nbsp;and&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm">json_decode</a></span>&nbsp;which you use to convert a JSON string to a collection of <a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">DS Maps</a>&nbsp;and <a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm">DS Lists</a>&nbsp;and back. Encoding requires you to <em>mark</em>&nbsp;<a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm#func_ref_json" title="DS map marking functions">DS map keys</a> and <a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm##func_ref_json" title="DS list marking functions">DS list items</a> as such (so it is clear which map keys and list items should become nested JSON objects and arrays).</li></ul><h3 id="which_functions_to_use">Which Functions to Use</h3><ul class="colour"><li><span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span>&nbsp;and&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span>&nbsp;are the main functions to use when working with JSON. If you're not using any&nbsp;<a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">Data Structures</a>&nbsp;or when you start a new project, these are the functions to use.</li><li>Use&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span>&nbsp;and&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm">json_decode</a></span>&nbsp;when working with&nbsp;<a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">Data Structures</a>. The item passed to&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span>&nbsp;(the "root") must always be a&nbsp;<span data-keyref="Type_ID_DS_Map"><a target="_blank" href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_create.htm">DS Map</a></span>. Similarly,&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm">json_decode</a></span>&nbsp;always returns a DS map, no matter the data type that you pass it (anything you pass to the function that's not a DS map is wrapped in one).</li><li>Use&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span>&nbsp;on a&nbsp;<span data-keyref="Type_ID_DS_Map"><a target="_blank" href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_create.htm">DS Map</a></span>&nbsp;that contains nested&nbsp;<a href="../GameMaker_Language/GML_Overview/Structs.htm#struct">structs</a>&nbsp;and&nbsp;<a href="../GameMaker_Language/GML_Overview/Arrays.htm">Arrays</a>. The structs and arrays will also be converted to JSON, i.e.&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span> allows you to convert a mixed hierarchy.</li></ul><p>This guide focuses on the functions&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span>&nbsp;and&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span>.</p><h3 id="data_conversions">Data Conversions</h3><p>The JSON standard has a limited number of values that it supports: an object, an array, a string, a number and the values&nbsp;<span class="inline2">true</span>, <span class="inline2">false</span>&nbsp;and&nbsp;<span class="inline2">null</span>.&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>&nbsp;uses more&nbsp;<a href="../GameMaker_Language/GML_Overview/Data_Types.htm">Data Types</a>&nbsp;than this and in order to store these&nbsp;in a way they can be read back later, it converts them to a string representation. Both the&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span>&nbsp;/&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span>&nbsp;and&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm">json_decode</a></span>&nbsp;/&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span>&nbsp;perform these conversions.</p><p class="note"><span data-conref="../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;You can disable the automatic string conversion when parsing&nbsp;JSON by setting the&nbsp;<span class="inline2">inhibit_string_convert</span> argument of&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span>&nbsp;to <span class="inline2">true</span>.</p><p>The following table lists the conversions that take place when converting between&nbsp;JSON&nbsp;data and&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>:&nbsp;</p><table style="caption-side:top"><caption>JSON Data Conversions</caption><colgroup><col style="width:33.33%"><col style="width:33.33%"><col style="width:33.33%"></colgroup><tbody><tr><th>JSON Type</th><th>GM Type/Value</th><th>Notes</th></tr><tr><td><span class="inline2">true</span> / <span class="inline2">false</span></td><td><span class="inline2">true</span> / <span class="inline2">false</span></td><td>&nbsp;</td></tr><tr><td>real / number</td><td><span data-keyref="Type_Real"><a target="_blank" href="../GameMaker_Language/GML_Overview/Data_Types.htm">Real</a></span></td><td>&nbsp;</td></tr><tr><td><span class="inline2">"@i64@hex_value$i64@"</span></td><td>int64</td><td><span data-keyref="GameMaker Name">GameMaker</span> will write it as:<br>- an <i>int</i> if it's in the valid range for an int32.<br>- a <i>double</i> if it can do so without losing precision.<br>- a <i>string</i> with an identifier <span class="inline2">"@i64@"</span> before it and <span class="inline2">"$i64$"</span> after it&nbsp;if neither of those cases is applicable<span>.</span><br><br>When you read the&nbsp;JSON&nbsp;again,&nbsp;<span data-keyref="GameMaker Name">GameMaker</span> will pick up these identifiers and convert the value back into an int64 (unless conversion is disabled).<br><br><span data-conref="../assets/snippets/Tag_warning.hts"><span class="warning">WARNING</span></span> If the JSON is intended for a server or some other non-<span data-keyref="GameMaker Name">GameMaker</span> target, these values will not be appropriate and so should be avoided.</td></tr><tr><td>null</td><td><span class="inline2">undefined</span><br><span class="inline2">pointer_null</span></td><td><span class="inline2">undefined</span> and <span class="inline2">pointer_null</span> are written as JSON <span class="inline2">null</span>. JSON <span class="inline2">null</span> is always read back as <span class="inline2">undefined</span>&nbsp;when&nbsp;<a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">parsing</a>&nbsp;or&nbsp;<a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm">decoding</a>.</td></tr><tr><td>string</td><td><span data-keyref="Type_String"><a target="_blank" href="../GameMaker_Language/GML_Overview/Data_Types.htm">String</a></span></td><td>&nbsp;</td></tr><tr><td><span class="inline2">"@@infinity$$"</span>, <span class="inline2">@@-infinity$$</span></td><td><span class="inline2">infinity</span>, <span class="inline2">-infinity</span></td><td><span class="inline2">infinity</span> is written as a string</td></tr><tr><td><span class="inline2">"@@nan$$"</span></td><td><span class="inline2">NaN</span></td><td><span class="inline2">NaN</span> is written as a string</td></tr><tr><td>object</td><td><span data-keyref="Type_Struct"><a target="_blank" href="../GameMaker_Language/GML_Overview/Structs.htm">Struct</a></span>&nbsp;(or&nbsp;<span data-keyref="Type_ID_DS_Map"><a target="_blank" href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_create.htm">DS Map</a></span>)</td><td>&nbsp;</td></tr><tr><td>array</td><td><span data-keyref="Type_Array"><a target="_blank" href="../GameMaker_Language/GML_Overview/Arrays.htm">Array</a></span>&nbsp;(or&nbsp;<span data-keyref="Type_ID_DS_List"><a target="_blank" href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_create.htm">DS List</a></span>)</td><td>&nbsp;</td></tr><tr><td><span class="inline2">"ref &lt;type&gt; &lt;id&gt;"</span></td><td><span data-keyref="Type_Handle"><a target="_blank" href="../GameMaker_Language/GML_Overview/Data_Types.htm">Handle</a></span></td><td>Handles are stored in their string representation&nbsp;<span data-conref="../assets/snippets/Handle_Format.hts"><span class="inline2">"ref&nbsp;&lt;type&gt;&nbsp;&lt;id&gt;"</span></span>&nbsp;when writing JSON and are converted back to runtime values when reading back the JSON.<br><br>The exception is when using&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span>: nested&nbsp;<a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">DS Maps</a>&nbsp;and&nbsp;<a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm">DS Lists</a>&nbsp;that you've <a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm#func_ref_json">marked</a> <a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm#func_ref_json">as such</a> will be written as JSON objects and arrays respectively.<br><br><span data-conref="../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span> Relying on this behaviour will generally be of little use as the index will change between runs of the game.</td></tr></tbody></table><h3 id="filter_function">Filter Function</h3><p>If you want full control over how the contents of the JSON are read or written, you can optionally provide a filter function that runs for each element to&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span>&nbsp;and&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span>. See the function pages for more information.</p><h2 id="writing_json">Writing JSON</h2><p>Writing JSON is done with <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span>. For example, the following struct:&nbsp;</p><p class="code">my_struct =<br>{<br>&nbsp; &nbsp; test: "this",<br>&nbsp; &nbsp; val: ["that", "another thing", {"value": "a nested struct"}]<br>};</p><p>Can be converted to a&nbsp;JSON string using <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span>:&nbsp;</p><p class="code">struct_json = json_stringify(my_struct);</p><p>And then be written to a file using either the text file functions:&nbsp;</p><p class="code">var _file = file_text_open_write("struct_as_json.json");<br>file_text_write_string(_file, struct_json);<br>file_text_close(_file);</p><p>Or the buffer functions:&nbsp;</p><p class="code">var _buff = buffer_create(<span>16384</span><span>,<span>&nbsp;</span></span><span>buffer_fixed, 1</span>);<br>buffer_write(buffer_text, struct_json);<br>buffer_save("struct_as_json.json");<br>buffer_delete(_buff);</p><p>You can also send the JSON string over a network or store it somewhere else (e.g. in a text field in a database).</p><p>The following text is the output:&nbsp;</p><p class="code">{"test":"this","val":["that","another thing",{"value":"a nested struct"}]}</p><p>By default,&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span>&nbsp;writes the JSON&nbsp;<em>linearised</em>. In this case everything is placed on the same line, with no space in between and no indentation added. This format is useful when every byte counts, though it is not particularly readable.</p><h3 id="prettify">Prettify</h3><p>The <span class="inline2">prettify</span> parameter can be set to <span class="inline2">true</span> to add indentation to the generated JSON string to make it look "pretty", i.e. more human-readable.</p><p>The following code:&nbsp;</p><p class="code">struct_json = json_stringify(my_struct, true);</p><p>outputs the following JSON:&nbsp;</p><p class="code">{<br>&nbsp; "test":"this",<br>&nbsp; "val":[<br>&nbsp; &nbsp; "that",<br>&nbsp; &nbsp; "another thing",<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; "value":"a nested struct"<br>&nbsp; &nbsp; }<br>&nbsp; ]<br>}</p><p>Compared to the linearised output, the JSON above shows at a glance how the data is constructed.</p><h3 id="usage_notes">Usage Notes</h3><ul class="colour"><li>Care should be taken when writing a&nbsp;JSON string to an INI file, as the INI specification can cause issues when using quotes and escape characters. See&nbsp;<a href="../GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_write_string.htm"><span class="inline2">ini_write_string()</span></a> for more information.</li><li>Circular references in DS maps, such as references back to the main map itself (forming an infinite loop) or references to maps within the main map forming such infinite loops, will be serialised only on the first level where they're encountered, and converted to <span class="inline2">null</span>&nbsp;for deeper references. In the case of structs&nbsp;such references are immediately converted to <span class="inline2">null</span>&nbsp;upon stringifying.</li></ul><h2 id="reading_json">Reading JSON</h2><p>To read data from a previously created JSON string, you turn it into a struct using&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span>:&nbsp;</p><p class="code">my_struct = json_parse(struct_json);</p><p>By default, string values in the JSON will be checked to see if they contain special values. If so, these values are converted to the internal&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>&nbsp;value. For example:&nbsp;</p><p class="code">json = json_stringify({ "infinity": infinity, "NaN": NaN});<br>show_debug_message(json);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //&nbsp;{"NaN":"@@nan$$","infinity":"@@infinity$$"}<br>data_with_strings_converted = json_parse(json);<br>show_debug_message(data_with_strings_converted);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// { NaN : NaN, infinity : inf }<br>data_with_strings_unchanged = json_parse(json, , true);<br>show_debug_message(data_with_strings_converted);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//&nbsp;{ NaN : "@@nan$$", infinity : "@@infinity$$" }</p><h3 id="usage_notes1">Usage Notes</h3><ul class="colour"><li>The&nbsp;maximum nesting limit of the JSON string to be parsed or decoded is&nbsp;<span data-keyref="Const_JSON_Max_Nesting_Limit">128</span>.</li><li>While trailing commas are not part of the JSON standard, <span data-keyref="GameMaker Name">GameMaker</span>&nbsp;parses JSON&nbsp;strings that contain them. For example: <span class="inline2">{"name": "Level 1", "Description": "The first level", }</span>.</li></ul><h2 id="serialisation">Serialisation</h2><p><a href="https://en.wikipedia.org/wiki/Serialization" title="Serialisation">Serialisation</a> is described as follows:&nbsp;</p><blockquote>In computing, serialization (or serialisation) is the process of translating a data structure or object state into a format that can be stored (e.g. files in secondary storage devices, data buffers in primary storage devices) or transmitted (e.g. data streams over computer networks) and reconstructed later (possibly in a different computer environment).</blockquote><p>In&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>, a struct is such a data structure. It can have both variables and functions as its members. When you stringify&nbsp;a struct's contents with <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span>, only the struct's variables are written, not its functions.</p><p class="note"><span data-conref="../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;You can only serialise&nbsp;<a href="../GameMaker_Language/GML_Overview/Structs.htm" title="structs">structs</a>&nbsp;this way in&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>, not&nbsp;<a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">Data Structures</a>&nbsp;or <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instances.htm">Instances</a>.</p><p>By manually setting the&nbsp;<a href="../GameMaker_Language/GML_Overview/Structs/Static_Structs.htm">Static Struct</a> of the structs that&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span>&nbsp;returns with&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Variable_Functions/static_set.htm">static_set</a></span>&nbsp;you can restore those structs to their original state.</p><p>As an example, suppose you have a constructor <span class="inline2">Vector</span>:&nbsp;</p><p class="code">function Vector(_x=0, _y=0, _z=0) constructor<br>{<br>&nbsp; &nbsp; x = _x;<br>&nbsp; &nbsp; y = _y;<br>&nbsp; &nbsp; z = _z;<br>&nbsp; &nbsp;&nbsp;<br>&nbsp; &nbsp; static add = function(_v2)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; x += _v2.x;<br>&nbsp; &nbsp; &nbsp; &nbsp; y += _v2.y;<br>&nbsp; &nbsp; &nbsp; &nbsp; z += _v2.z;<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; return self;<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; static sum = function(_v1, _v2)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; // Note: call using Vector.sum(v1, v2)<br>&nbsp; &nbsp; &nbsp; &nbsp; return new Vector(_v1.x + _v2.x, _v1.y + _v2.y, _v1.z + _v2.z);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; static dot = function(_v1, _v2)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;// Note: call using Vector.sum(v1, v2)<br>&nbsp; &nbsp; &nbsp; &nbsp; return dot_product_3d(_v1.x, _v1.y, _v1.z, _v2.x, _v2.y, _v2.z);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; // Other<br>}</p><p>You then create a few of these vectors:&nbsp;</p><p class="code">v1 = new Vector();<br>v2 = new Vector(100, 100);<br>v3 = new Vector(200, 20, 50);<br>v1.add(v2);<br>v4 = Vector.sum(v2, v3);</p><p>These four vectors can be stored in an array and converted to JSON using&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span>:</p><p class="code">json = json_stringify([v1, v2, v3, v4]);</p><p>This JSON string can be saved or sent somewhere else.</p><p>At you point you might want to restore these vectors in another instance of the game, not just their values (<span class="inline2">x</span>, <span class="inline2">y</span> and <span class="inline2">z</span>) but also their behaviour (<span class="inline3_func">add</span>, <span class="inline3_func">sum</span>, <span class="inline3_func">dot</span>, ...).</p><p>To get the information back into structs you parse the JSON string using&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span> and then assign the individual array elements to the variable names used earlier:&nbsp;</p><p class="code">vectors = json_parse(json);<br>v1 = vectors[0];<br>v2 = vectors[1];<br>v3 = vectors[2];<br>v4 = vectors[3];</p><p>The structs have now been read back from the JSON string, but they are entirely new structs that don't belong to a constructor anymore. The structs were&nbsp;<span class="inline2">Vector</span> structs in the original instance of the game, but aren't anymore. At least, not "officially", as you'll see with a call to the function <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Variable_Functions/instanceof.htm">instanceof</a></span>:&nbsp;</p><p class="code">instanceof(v1, Vector);&nbsp; // false<br>instanceof(v2, Vector);&nbsp; // false<br>instanceof(v3, Vector);&nbsp; // false<br>instanceof(v4, Vector);&nbsp; // false</p><p>To tell&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>&nbsp;that&nbsp;each of these structs should, once again, belong to the <span class="inline2">Vector</span> constructor, you can use the function&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Variable_Functions/static_set.htm">static_set</a></span>:&nbsp;</p><p class="code">var _static_vec =&nbsp;static_get(Vector);<br>static_set(v1, _static_vec);<br>static_set(v2, _static_vec);<br>static_set(v3, _static_vec);<br>static_set(v4, _static_vec);</p><p>By using&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Variable_Functions/static_set.htm">static_set</a></span>&nbsp;on the structs you first detach them from the static as a simple "data" struct and reattach them to the static chain as "child" structs of the&nbsp;static struct of&nbsp;<span class="inline2">Vector</span>. Since you can access all static members of the hierarchy of static structs (or constructors) a struct belongs to, this way you give the structs access to <span class="inline2">Vector</span>'s&nbsp;<a href="../GameMaker_Language/GML_Overview/Structs/Static_Structs.htm#h">Static Chain</a>, restoring their behaviour.</p><p>From here on, <span class="inline2">v1</span>&nbsp;to <span class="inline2">v4</span>&nbsp;<em>are</em>&nbsp;instances of&nbsp;<span class="inline2">Vector</span>!</p><p class="code">instanceof(v1, Vector);&nbsp; // true!<br>instanceof(v2, Vector);&nbsp; // true!<br>instanceof(v3, Vector);&nbsp; // true!<br>instanceof(v4, Vector);&nbsp; // true!</p><p>And you can use them like any other <span class="inline2">Vector</span>&nbsp;struct:&nbsp;</p><p class="code">v1.add(v2).add(v3);<br>v5 = Vector.sum(v1, v1);</p><p class="note"><span data-conref="../assets/snippets/Tag_important.hts"><span class="important">IMPORTANT</span></span>&nbsp;In order for this to work, the functions must be defined as static so they belong to the <em>constructor</em>, rather than to the struct <em>instance</em>. If you don't declare the functions as static, each struct instance should receive a copy of the function through execution of the constructor. However, setting the static struct with&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Variable_Functions/static_set.htm">static_set</a></span> doesn't call the constructor, rather it moves the struct to a different place in the&nbsp;<a href="../GameMaker_Language/GML_Overview/Structs/Static_Structs.htm#h">Static Chain</a>&nbsp;which enables it to access a different static struct's functions (see&nbsp;<a href="../GameMaker_Language/GML_Overview/Structs/Static_Structs.htm#h2">How the Dot Operator Looks Up a Variable Name</a>).</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div>Back:&nbsp;<a href="Additional_Information.htm">Additional Information</a></div><div>Next:&nbsp;<a href="Project_Format.htm">Project Format</a></div></div></div><h5><span data-conref="../assets/snippets/Copyright_Notice_AutoUpdate.hts">© Copyright <span data-keyref="Company Name">YoYo Games</span>&nbsp;<span data-keyref="Company Structure Suffix">Ltd.</span>&nbsp;<span data-field="date" data-format="YYYY">2024</span> All Rights Reserved</span></h5></div></div></body></html>