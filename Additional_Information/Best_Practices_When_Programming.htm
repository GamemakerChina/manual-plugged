<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" src="../assets/import/jquery-3.6.1.min.js"></script>
<script type="text/javascript" src="../assets/import/layer/layer.js"></script>
<script type="text/javascript" src="../assets/import/pangu.min.js"></script>
<link rel="stylesheet" type="text/css" href="../assets/import/layer/layer.css">
<link rel="stylesheet" type="text/css" href="../assets/import/layer/layui_btn.css">
<link rel="stylesheet" type="text/css" href="../assets/import/layer/layui_col.css">
<link rel="stylesheet" type="text/css" href="../assets/import/main.css">


<script>

	removeHtml=function(str){
		str=str.replace(/(<([^>]+)>)/ig, "{}");
		str=str.replace(/\r\n/g, '\n');
		str=str.replace(/\n/g, '');
		str=str.replace(/ {2,}/g, ' ');
		return str
	}
	retHtml=function(str){
		var regex = /(<([^>]+)>)/ig
		return str.match(regex);
	}
	setTranslator=function(ele,json,attr){
		if(!attr){
			var html=ele.html()
		}else{
			var html=ele.attr(attr)
		}
		var key=removeHtml(html)
		var val=json[key]
		if(val!=undefined && val.length){
			var f=retHtml(html)
			var i=0
			if(f)f.forEach(function(v,k){
				var tmp=val.replace("{"+i+"}",v)
				if(tmp===val){
					val=val.replace("{}",v)
				}else{
					val=tmp
				}
				i++
			})
			if(!attr){
				ele.html(val)
			}else{
				ele.attr(attr,val)
			}
		}
	}

	noTranslationState=function(){
		return (window.localStorage.getItem("noTranslationState")=="true")
	}

	noTranslationStateToggle=function(){
		window.localStorage.setItem("noTranslationState",!noTranslationState())
	}

	addNoTranslationStateButton=function(){

		//html
		var html=`
		
		<button style="
			float: right;
			font-size: 20px;
			padding: 4px 12px;
		"
		onclick="
		window.location.replace('gmmt://'+document.location.hash)
		"
		>F</button>

		<button style="
			float: right;
			font-size: 20px;
			padding: 4px 12px;
		"
		onclick="
		noTranslationStateToggle();
		location.reload();
    	event.stopPropagation();
		"
		>T</button>
		`

		//意味着触发这段代码的地方处于主页
		if($(".header").length){
		$(".header").append(html)
		}else{
		//否则就是页内
		$(".topic-header").append(html)
		$(".topic-header button").css("position","relative").css("top","44px")
		}
	}

	var json_global={
    "&nbsp;Type&nbsp;":"类型(Type)",
    "<span data-open-text=\"true\" data-skip-index=\"true\" class=\"rh-hide\" hidden=\"\">Quick Start Guide</span><span data-close-text=\"true\">Quick Start Guide</span>":"<span data-open-text=\"true\" data-skip-index=\"true\" class=\"rh-hide\" hidden=\"\">快速入门指南</span><span data-close-text=\"true\">快速入门指南</span>",
    "A Remote Worker is a special program that GameMaker Studio 2 will use on certain platforms to create your game executables without actually running the GameMaker Studio 2 IDE on that platform":"Remote Worker是一个特殊的程序，GameMaker Studio 2将使用它在特定平台上创建游戏可执行文件，而无需在该平台上实际运行GameMaker Studio 2 IDE",
    "A bitmap is the term used to describe any static image that is comprised of coloured pixels that are stored as bits (unlike vector images which are stored using mathematical algorithms). PNG, JPG and BMP are example of bitmap images, while SWF would be an example of a vector image.":"位图是用于描述任何静态图像的术语，该静态图像由以位存储的彩色像素组成（与使用数学算法存储的矢量图像不同）。 PNG，JPG和BMP是位图图像的示例，而SWF将是矢量图像的示例。",
    "A boolean is a type of variable that can return true or false based on its value, and can be used in conditions and expressions. The constants \u0027false\u0027 or \u0027true\u0027 can be applied to a boolean, which are the equivalent of the real values 0 and 1.":"布尔值是一种变量类型，可根据其值返回true或false，可用于条件和表达式中。常量\u0027false\u0027或\u0027true\u0027可以应用于布尔值，这相当于实值0和1。",
    "A byte is a unit of data that is eight binary digits long, and each of the digits that comprise a byte are called bits, ie: a byte is 8 bits, and a bit can be a 1 or a 0.":"字节是八位二进制数字长的数据单位，组成一个字节的每个数字都称为位，即：字节是8位，位可以是1或0。",
    "A callback is simply a function that runs and then triggers another function (or code block) when it has finished doing whatever it was assigned to do. For example, the funtion sprite_add() will trigger a callback in the asynchronous Image Loaded event when the sprite has been loaded.":"回调仅是一个函数，该函数先运行，然后在完成分配的工作后触发另一个函数（或代码块）。例如，功能sprite_add()将在加载精灵后在异步Image Loaded事件中触发回调。",
    "A constant is a term used to describe a named value that does not change throughout the execution of the program. GameMaker Studio 2 has a number of built-in constants - for example os_windows - but you can also create your own constant values for use in your projects (called Macros) and extensions.":"常量是一个术语，用于描述在程序执行期间不会更改的命名值。 GameMaker Studio 2具有许多内置常量（例如os_windows），但您也可以创建自己的常量值以用于项目（称为宏）和扩展。",
    "A font is a collection of graphical glyphs used to represent text in a language. Fonts can be different weights, sizes, and styles and are used to display any written content in a project.":"字体是用于表示语言文本的图形字形的集合。字体可以具有不同的粗细，大小和样式，并用于显示项目中的任何书面内容。",
    "A framework is a base foundation of code that may be altered and/or built upon by the user. A framework might include different software libraries, APIs, compilers and much more. In simpler terms, a framework provides a favorable environment for a certain type and level of programming for a project. In GameMaker Studio 2 you can, for example, create your own framework projects (via Local Asset Packages) that contain scripts and objects for general controls, stat management, networking, or anything else you commonly use in your projects, and then import these into new projects right at the beginning to give you the basic grounding to conntinue without having to reprogram these systems every time.":"框架是可由用户更改和/或构建的代码的基础。一个框架可能包括不同的软件库，API，编译器等等。简单来说，框架为项目的某种类型和级别的编程提供了良好的环境。例如，在GameMaker Studio 2中，您可以创建自己的框架项目（通过本地资源包），其中包含用于常规控件，统计信息管理，联网或项目中常用的其他内容的脚本和对象，然后将其导入新项目一开始就为您提供了基本的基础，而不必每次都对这些系统进行重新编程。",
    "A glyph is a particular visual appearance of a character. It is the appearance of a character using a given font.":"字形是字符的一种特殊的视觉外观。它是使用给定字体的字符的外观。",
    "A keyframe (also called a parameter key) is a point on the timeline in the dope sheet where a change in a parameter value is defined.":"一个关键帧(也称为参数键)是在时间轴上的一个点，在这个点上定义了一个参数值的变化。",
    "A package of files that are used to execute a program. In GameMaker Studio this can be a single file - like an installer for windows - or multiple files - like the HTML5 output.":"用于执行程序的文件包。在GameMaker Studio中，它可以是单个文件（例如Windows的安装程序），也可以是多个文件（例如HTML5输出）。",
    "A parameter key (also called a keyframe) is a point on the timeline in the dope sheet where a change in a parameter value is defined.":"参数键(也称为关键帧)是操作表中时间轴上定义参数值更改的点。",
    "A port number is a way to identify a specific process to which an Internet or other network message is to be forwarded when it arrives at a server.":"端口号是一种识别Internet或其他网络消息到达服务器时要转发到其上的特定进程的方法。",
    "A position on the timeline in the dope sheet where an asset has been placed. An asset key can be made to last multiple frames.":"在序列帧动画中时间轴上放置资源的位置。资源关键帧可以使用多个帧。",
    "A previous version of the GameMaker software (often called Legacy GameMaker) that is no longer available nor supported. ":"GameMaker软件的早期版本（通常称为Legacy GameMaker）不再可用或受支持。",
    "A pure function has no effect on the game, and does not create or change anything. It only returns a value. Given the same set of arguments, it always returns the same value.":"一个纯函数不会对游戏产生任何影响，也不会创造或改变任何内容。它只返回一个值。给定相同的参数集，它总是返回相同的值。",
    "A shader is a collection of small programs that run directly on the GPU to create graphics and graphical effects. These are very fast to run and free up the CPU to do other things.":"着色器是直接在GPU上运行以创建图形和图形效果的小程序的集合。这些都是非常快速的运行，可以释放CPU来做其他事情。",
    "A single data value that can either be 1 or 0 (true or false). Bits are combined in blocks of 8 to create a byte.":"单个数据值，可以是1或0（是或否）。将位组合为8个块以创建一个字节。",
    "A special, unexpected and anomalous condition encountered during the execution of a program is known as an exception. It can also be termed as an error or a condition which alters the way of the program or the microprocessor to a different path. An example of an exception can be the case when a program tries to access a variable, but the variable does not exist. Exceptions must be handled and eradicated in the program code to avoid any fatal error, a process called debugging.":"在程序执行过程中遇到的特殊、意外和异常情况称为异常。它也可以被称为一个错误或条件，改变了程序或微处理器的方式到一个不同的路径。异常的一个例子是，程序试图访问一个变量，但该变量不存在。必须在程序代码中处理和根除异常，以避免任何致命错误，这个过程称为调试。",
    "A spline is basically a smooth curve used to join points. Mathematically speaking it is deifned as a sufficiently smooth polynomial function that is piecewise-defined, and possesses a high degree of smoothness at the places where the polynomial pieces connect.":"样条基本上是用于连接点的平滑曲线。从数学上讲，它被定义为一个足够光滑的多项式函数，它是分段定义的，并且在多项式片段连接的地方具有高度的平滑。",
    "A sprite is a bitmap graphic that is designed to be part of a larger scene. It can either be a static image or an animated graphic.":"精灵是一种位图图形，被设计成更大场景的一部分。它可以是静态图像，也可以是动画图形。",
    "A swatch is simply a small square sample of a colour or a material used to illustrate how it will look.":"一个调色板就是一个小的正方形样本，其颜色或材料用于说明其外观。",
    "A texture page (also called a texture atlas) is a collection of images (sprites, tilesets, font characters, etc...) that are grouped together in an optimal way so that they take up the least amount of texture memory when your game is run.":"纹理页面（也称为纹理图集）是以最佳方式组合在一起的图像（精灵，图块集，字体字符等）的集合，以便在您的游戏时占用最少的纹理内存运行。",
    "A tile set is a collection of square or rectangular graphical assets laid out on a grid as a single image. Each item in the grid can then be placed multiple times in a room to create a larger scene called the \u0027tile map\u0027.":"图块图块集是作为单个图像布局在网格上的正方形或矩形图形资源的集合。网格中的每一项都可以在一个房间中放置多次，从而创建一个更大的场景，称为“图块地图”。",
    "A timeline in GameMaker Studio 2 is a linear collection of events that will be run in consecutive order. Each event can be given code or actions to perform a task and when the timeline is run, these tasks will be performed as each event in the tmeline is reached.":"在GameMaker Studio 2中，时间线是一系列事件的线性集合，它们将以连续的顺序运行。可以为每个事件提供执行任务的代码或操作，当运行时间线时，将在到达时间线中的每个事件时执行这些任务。",
    "A track in the sequences track panel that holds a single asset, either a sprite, a sound, an instance, or a sequence.":"序列轨道面板中的轨道包含单个资源，即精灵，声音，实例或序列。",
    "A track that has been assigned to an asset track in the track panel and that changes a single parameter for the asset track it\u0027s linked to, like the position, or the image index.":"在轨道面板中分配给资源轨道的轨道，并改变其链接到的资源轨道的单个参数，如位置或图像索引。",
    "A truth table is a mathematical table used in logic - specifically in connection with boolean algebra and boolean functions - which sets out the functional values of logical expressions on each of their functional arguments, that is, for each combination of values taken by their logical variables.":"真值表是在逻辑中使用的数学表-特别是与布尔代数和布尔函数结合使用的表-列出逻辑表达式在每个函数自变量上的函数值，即针对其逻辑变量取值的每种组合。",
    "A value that is considered \"false\" when used as a boolean, for example in an if() condition.":"当用作布尔值时被认为是“false”的值，例如在if()条件中。",
    "A value that is considered \"true\" when used as a boolean, for example in an if() condition.":"当用作布尔值时被认为是“true”的值，例如在if()条件中。",
    "A variable is a named value within a program which can be modified, stored and displayed whenever required. For example, if we have an integer variable with a name XYZ and it stores a value 10, we can then do things like A = XYZ + 10, which will set the value of the variable A to 20, since XYZ is 10 and we are adding 10 to it. You can also change variable values using operators, so doing XYZ = XYZ + 100 would modify the value of our XYZ variable to be equal to 110. Variables can also be used to store identifiers and references to different assets.":"变量是程序中的命名值，可以在需要时对其进行修改，存储和显示。例如，如果我们有一个名为XYZ的整数变量，并且它存储的值为10，则可以执行A = XYZ + 10之类的操作，这将把变量A的值设置为20，因为XYZ为10，我们正在添加10。您还可以使用运算符更改变量值，因此XYZ = XYZ + 100会将XYZ变量的值修改为等于110。变量也可以用于存储标识符和对不同资源的引用。",
    "A vector is a mathematical construct that has a size, called the magnitude, and a direction. In GameMaker, a vector is usually used to show the distance and direction something moved in. A vector can also be used to define images and certain image formats like SWF use vector maths to define the images they contain.":"向量是一种数学结构，它有大小和方向。在GameMaker中，矢量通常用来显示物体移动的距离和方向。矢量还可以用来定义图像，SWF等特定图像格式使用矢量数学来定义它们所包含的图像。",
    "A version number is a unique set of numbers assigned to a specific release of a software program, game or asset, normally with the format MAJOR.MINOR.MAINTENANCE, eg: v2.3.56. Typically, as updates and entirely new editions of a game or asset are released, the version number will increase.":"版本号是分配给软件程序，游戏或资源的特定版本的唯一编号集，通常以MAJOR.MINOR.MAINTENANCE(主要更新.小更新.维护)格式表示，例如：v2.3.56。通常，随着游戏或资源的更新和全新版本的发布，版本号会增加。",
    "A vertex is the name given to a single point of a polygon that contains various characteristics that define it\u0027s position, its colour and its texture. In computer graphics, this usually means a corner of a triangle that is used to create a primitive, and a combination of such primitives is what makes the graphics on the screen.":"顶点是一个多边形的单点的名称，它包含了定义它的位置、颜色和纹理的各种特征。在计算机图形学中，这通常指用于创建原语的三角形的一个角，而这些原语的组合构成了屏幕上的图形。",
    "A&nbsp;weak reference is a reference that does not protect the referenced object from collection by a garbage collector, and so can be used to check if a struct is still \"alive\" (referenced) or not somewhere in the game.":"弱引用是一种不保护被引用对象不被垃圾收集器收集的引用，因此可以用来检查一个结构是否仍然“活”(被引用)或在游戏中的某个地方。",
    "Accessors":"访问器",
    "Action Syntax:":"动作语法：",
    "Additional IDE Tools":"附加 IDE 工具",
    "Additional Information":"额外的信息",
    "Addressing Variables In Other Instances":"在其他实例中处理变量",
    "Alignment":"对齐",
    "An absolute value is one where the sign of the value is ignored, essentially converting all values into positive ones or zero. So - for example - an absolute value for -10 would be 10.":"绝对值是指忽略该值的符号的值，实际上将所有值都转换为正值或零。因此例如-10的绝对值为10。",
    "An algorithm is basically a set of instructions or rules designed to solve a definite problem. The problem can be simple like adding two numbers or a complex one, such as converting a video file from one format to another or compressing audio into a smaller file size..":"算法基本上是一组旨在解决确定问题的指令或规则。问题可能很简单，例如将两个数字相加或将其复杂化，例如将视频文件从一种格式转换为另一种格式，或者将音频压缩为较小的文件大小。",
    "An argument&nbsp;(also known as a parameter) is a value that is passed into a function. For example, the GameMaker Language function \u0027sqr(num)\u0027 is a function that will give you the square of a number that you provide as the argument, eg: \u0027a = sqr(4);\u0027 Here the argument is 4, and the function will return 16, which is stored in the variable \u0027a\u0027.":"也称为参数(parameter argument)是传递给函数的值。例如，GameMaker语言函数\u0027sqr(num)\u0027是将给您提供作为参数的数字平方的函数，例如：\u0027a=sqr(4);\u0027这里的参数是4，函数将返回16，该值存储在变量“ a”中。",
    "An assignment is simply the term used when we set (assign) a value to a variable.":"赋值只是我们为变量设置（赋值）时使用的术语。",
    "An explicit value written in code, e.g. when you write \"A TEXT STRING\" you are using a string literal, as opposed to returning a string through a variable or function. Similarly, [0, 1, 2] is an array literal.":"在代码中写入的显式值，例如，当您编写“A TEXT STRING”时，您使用的是字符串字面量，而不是通过变量或函数返回字符串。类似地，[0,1,2]是数组字面值。",
    "An expression is a combination of one or more constants, variables, operators, and/or functions that are interpreted according to particular rules of precedence and association to return another value. A simple expression would be (5 + 5), which returns 10.":"表达式是一个或多个常量，变量，运算符和/或函数的组合，这些常量根据特定的优先级和关联规则进行解释以返回另一个值。一个简单的表达式是（5 + 5），它返回10。",
    "An iteration is a single pass through a set of operations in your project code. One form of iteration in computer programming is via loops. A loop will repeat a certain segment of code until a condition is met and it can proceed further. Each time the computer runs a loop, it is known as an iteration. In simple terms, iteration is the process of repeating a particular snippet of code over and over again to perform a certain action.":"迭代是对项目代码中的一组操作的一次遍历。计算机编程中一种迭代形式是通过循环。循环将重复一段代码，直到满足条件为止，然后循环可以继续进行。每次计算机运行一个循环，就称为迭代。简单来说，迭代是一遍又一遍地重复执行特定代码段以执行特定操作的过程。",
    "An operand is a term used to denote the values which can be manipulated using different operators. In the expression A + B + C, A, B and C are the operands.":"是用来表示可以使用不同运算符操作的值的术语。在表达式A + B + C中，A, B和C是运算对象。",
    "An operator is a term used to denote something which can manipulate different operands. In the expression A + B - C, + and - are the operators. Examples of different operators are + (addition), - (subtrtaction), = (equals), != (not equal) and &gt;= (greater than or equal to), but there are many more.":"运算符是用来表示可以操作不同运算东西的东西的术语。在表达式A + B - C中，+和-是运算符。不同的运算符示例有+(加法)、-(减法)、=(等于)、!=(不等于)和>=(大于或等于)，但是还有更多。",
    "Android Extensions":"Android 扩展",
    "Angles And Distance":"角度和距离",
    "Animated Tiles":"动画图块",
    "Animation":"动画",
    "Animation Curve Editor Preferences":"动画曲线编辑器首选项",
    "Animation Curves":"动画曲线",
    "Another name for a texture page, which is simply a collection of images required by one or more sprites in your game, organised in an optimal way to use as little texture memory as possible.":"纹理页面的另一个名称，它只是游戏中一个或多个精灵所需的图像集合，以一种最佳方式进行组织，以使用尽可能少的纹理内存。",
    "Any":"任何",
    "Argument":"参数",
    "Arguments:":"参数：",
    "Array":"数组(Array)",
    "Array Functions":"数组函数",
    "Arrays":"数组",
    "Asset Browser":"资源浏览器",
    "Asset Browser Preferences":"资源浏览器首选项",
    "Asset Management":"资源管理",
    "Asset Type Constant":"资源类型常量",
    "Assets And Tags":"资源和标签",
    "Async Events":"异步事件",
    "Asynchronous Functions":"异步函数",
    "Attachments":"附件",
    "Attempt Connection Constant":"尝试连接常量",
    "Audio":"音频",
    "Audio Buffers":"音频缓冲区",
    "Audio Effects":"音效",
    "Audio Emitter ID":"音频发射器 ID",
    "Audio Emitters":"音频发射器",
    "Audio Groups":"音频组",
    "Audio LFO Types/Shapes":"音频 LFO 类型/形状",
    "Audio Listeners":"音频监听器",
    "Audio Loop Points":"音频循环点",
    "Audio Playback":"音频播放",
    "Audio Playback Ended":"音频播放结束",
    "Audio Properties Overview":"音频属性概述",
    "Audio Recording":"录音",
    "Audio Synchronisation":"音频同步",
    "AudioBus Struct":"AudioBus 结构",
    "AudioEffect Struct":"AudioEffect 结构",
    "AudioEffectType Enum":"AudioEffectType 枚举",
    "AudioLFOType Enum":"AudioLFOType 枚举",
    "Auto Tiles":"自动图块",
    "Autocapitalization Type":"自动大写类型",
    "Background":"背景",
    "Background Layers":"背景图层",
    "Base Types":"基本类型",
    "Basic Code Structure":"基本代码结构",
    "Basic Forms":"基本绘制",
    "Best Practices When Programming":"编程时的最佳实践",
    "Bezier interpolation involves estimating a new value by connecting two adjacent known values with a mathematically generated spline curve which can be edited using \"handles\" attached to each point. You can then get the interpolated value by checking any point along the line.":"贝塞尔插值是通过将两个相邻的已知值与数学生成的样条曲线连接起来来估计一个新值，该样条曲线可以使用附加在每个点上的“句柄”进行编辑。然后你可以通过检查直线上的任意一点来得到插值值。",
    "Binary Files":"二进制文件",
    "Bit rate is measured in Kilobits-per-sec(kbps or k) and is the number of bits encoded per second or the number of bits transmitted or received per second. The higher the bit rate and sampling rate, the higher the audio quality but the more processing power and bandwidth it needs. Lower bit rates create a smaller file size and use less processing and bandwidth, but with a drop in audio quality. For good quality music usually a bit rate of 64–128kbps (96kbps+ recommended) is preferred.":"比特率以每秒千位数（kbps或k）为单位，是每秒编码的位数或每秒发送或接收的位数。比特率和采样率越高，音频质量越高，但所需的处理能力和带宽也就越高。较低的比特率可创建较小的文件大小，并使用较少的处理和带宽，但会降低音频质量。为了获得高质量的音乐，通常首选64–128kbps（建议96kbps +）的比特率。",
    "Bitwise Operators":"位运算和二进制",
    "Blend factor (Red, Green, Blue, Alpha)":"混合因子(红色、绿色、蓝色、透明度)",
    "Blue Lowest Bit":"蓝色最低位",
    "Bones":"骨骼",
    "Bookmarks":"书签",
    "Bool":"布尔值(Bool)",
    "Boolean":"布尔型",
    "Broadcast Messages":"广播消息",
    "Brush Builder":"笔刷生成器",
    "Buffer Data Type Constant":"缓冲区数据类型常量",
    "Buffers":"缓冲区",
    "Build tools are external applications that GameMaker Studio 2 requires to generate executable packages for the different target platforms.":"生成工具是GameMaker Studio 2生成用于不同目标平台的可执行程序包所需的外部应用程序。",
    "Building via Command Line":"通过命令行构建",
    "Built-In Time Sources":"内置时间源",
    "CPU overhead measures the amount of work a computer\u0027s central processing unit can perform and the percentage of that capacity that\u0027s used by individual computing tasks.":"CPU开销衡量的是计算机中央处理器可以执行的工作量以及单个计算任务所使用的容量百分比。",
    "Cameras And Display":"相机及显示",
    "Cameras And View Ports":"相机和视口",
    "Clipping Masks":"剪切蒙版",
    "Cloning A Repository":"克隆一个仓库",
    "Cloud":"云",
    "Cloud Saving":"<del>云存储</del> (过时)",
    "Code":"代码",
    "Code Snippets":"代码片段",
    "Collision Compatibility Mode":"碰撞兼容模式",
    "Collisions":"碰撞",
    "Color &amp; Alpha":"颜色 &amp; 透明度",
    "Colour":"颜色",
    "Colour And Alpha":"颜色和 Alpha",
    "Command Line Parameters":"命令行参数",
    "Commenting Code":"代码注释",
    "Compatibility Functions":"兼容性函数",
    "Compatibility Scripts":"兼容性脚本",
    "Compiler Batch Files / Scripts":"编译器批处理文件/脚本",
    "Compiler Errors":"编译器错误",
    "Compiling":"编译",
    "Compiling Preferences":"编译首选项",
    "Compiling is when GameMaker takes your code and collects it together in such a way as to create an executable package that will run on a device as a game.":"编译是指GameMaker接受您的代码并将其收集在一起的方式，以创建可执行的程序包，该程序包将作为游戏在设备上运行。",
    "Compression is the use of mathematical algorithms to reduce the size of a file. This is used in particular for audio and image files, where formats like JPG (image) and MP3 (audio) are compressed formats. Compression usually results is much smaller file sizes, but with some data loss which may or may not be noticable depending on the type and strength of the compression used. Uncompressed formats would be BMP (image) or WAV (audio), which have larger file sizes, but no data loss.":"压缩是使用数学算法来减小文件的大小。这特别适用于音频和图像文件，其中JPG（图像）和MP3（音频）等格式是压缩格式。压缩通常会使得文件大小更小，但会导致一些数据丢失，这可能会或可能不会很明显，这取决于所使用压缩的类型和强度。未压缩的格式为BMP（图像）或WAV（音频），它们具有较大的文件大小，但不会丢失数据。",
    "Conditionals, conditional statements, and conditional expressions are features of general programming language, and they help the code make a choice whrere the result is either true or false. These can perform different actions depending on the need of the programmer, and multiple conditionals can be combined into a single condition, as long as the final value of the condition is either true or false. Examples of conditional statements are \u0027if\u0027 and \u0027while\u0027.":"条件，条件语句和条件表达式是通用编程语言的功能，它们可以帮助代码在结果为真或假的情况下做出选择。它们可以根据程序员的需要执行不同的操作，并且可以将多个条件组合为一个条件，只要条件的最终值为true或false。条件语句的示例是 if”和“ while”。",
    "Configurations":"配置",
    "Confirm Dialogs":"确认对话框",
    "Conflicts":"冲突",
    "Connection":"连接",
    "Constant":"常量",
    "Constants":"常量",
    "Content":"内容",
    "Corner ID":"角ID",
    "Create Event":"创建事件",
    "Create a Multiplayer Game":"创建一个多人游戏",
    "Creating A Marketplace Asset":"创建市场资源",
    "Creating A Publisher Account":"创建发布者账户",
    "Creating A Tutorial":"创建教程",
    "Creating An Extension":"创建扩展",
    "Creating Sound Effects":"创建声音效果",
    "Creating Sprites":"创建精灵",
    "Creating Tile Sets":"创建 Tilesets",
    "Cursor":"光标",
    "DEPRECATED":"已删除",
    "DS Grids":"网格 Grid",
    "DS Lists":"列表 List",
    "DS Maps":"映射 Map",
    "DS Priority Queues":"优先队列 Priority Queues",
    "DS Queues":"队列 Queues",
    "DS Stacks":"堆栈 Stacks",
    "Data Structures":"数据结构",
    "Data Type":"数据类型",
    "Data Type Constant":"数据类型常量",
    "Data Types":"数据类型",
    "Date And Time":"日期和时间",
    "Deactivating Instances":"停用实例",
    "Debugging":"调试",
    "Decimal Value":"十进制值",
    "Default (old to new)":"默认(从旧到新)",
    "Defining Inputs":"定义输入",
    "Description":"描述",
    "Device Input":"设备输入",
    "Dialog":"对话框",
    "Direction":"方向",
    "Disabled":"禁用",
    "Domain Name System - This system associates domain names (e.g. gamemaker.io) to other info, such as IP addresses. DNS records are returned from a DNS lookup.":"域名系统——该系统将域名(如gamemaker.io)与其他信息(如IP地址)相关联。DNS记录从DNS查找返回。",
    "Double Tap Event":"双击事件",
    "Downsampling is the process of reducing samples in audio and, more generally, in signals. For audio it means that samples are thrown away and less samples remain, leading to a loss of information. The sample frequency of the audio is lowered as well as the quality of the audio. This change distorts the audio.":"降采样是在音频和信号中减少样本的过程。对于音频来说，这意味着样本被丢弃，剩下的样本更少，导致信息丢失。音频的采样频率和音频的质量都降低了。这个改变会使音频失真。",
    "Drag End Event":"拖动结束事件",
    "Drag Start Event":"拖动开始事件",
    "Dragging Event":"正在拖动事件",
    "Draw Events":"绘制事件",
    "Drawing":"绘制",
    "Drawing And Miscellaneous":"绘制和其他",
    "Dynamic Textures":"动态纹理",
    "Editing Code":"编辑代码",
    "Effects (in-game only)":"特效(仅限于游戏中)",
    "Emitter Properties":"发射器属性",
    "Enabled":"启用",
    "Encoding And Hashing":"编码和哈希",
    "Encoding transforms data into another format using a scheme that is publicly available so that it can easily be reversed. This is not the same as encryption, as it does not require a key to decode it. Encoding is generally used to either change the data into a format for eaiser use by a different system (like sending data to a server), or for making data unreadable to the human eye.":"编码使用公开可用的方案将数据转换为另一种格式，以便可以轻松地将其反转。这与加密不同，因为它不需要密钥对其进行解码。编码通常用于将数据更改为易于由其他系统使用的格式（例如，将数据发送到服务器），或用于使人眼无法读取的数据。",
    "Error":"错误(Error)",
    "Error Reporting":"错误报告",
    "Escape Sequence":"转义字符串",
    "Evaluation Order":"运算顺序",
    "Event Order":"事件顺序",
    "Example":"示例",
    "Example 1:":"示例1：",
    "Example 1: Basic Movement":"例1：基本运动",
    "Example 1: Basic Use":"示例1：基本使用",
    "Example 1: Check if any of the given values is present in an array":"示例1：检查数组中是否存在任何给定值",
    "Example 1: Copying an entire buffer\u0027s contents":"示例 1：复制整个缓冲区的内容",
    "Example 1: Deleting the first 5 elements":"示例1：删除前5个元素",
    "Example 1: Inserting a single value":"示例1：插入单个值",
    "Example 1: Particle Type Info":"示例1：粒子类型信息",
    "Example 1: Playing a basic sound (similar to audio_play_sound)":"示例 1：播放基本声音 (类似于 audio_play_sound)",
    "Example 1: Replace an object ID with another object ID":"示例 1：用另一个对象 ID 替换对象 ID",
    "Example 1: Showing the output&nbsp;":"示例1：显示输出",
    "Example 2:":"示例2：",
    "Example 2: Check if all values are present in an array":"示例2：检查数组中是否存在所有值",
    "Example 2: Copying from a buffer, starting at an offset":"示例 2：从偏移量开始从缓冲区复制",
    "Example 2: Deleting the last 3 elements":"示例2：删除最后3个元素",
    "Example 2: Inserting multiple values":"示例2：插入多个值",
    "Example 2: Listing Emitter Names":"示例2：列出发射器名称",
    "Example 2: Negative Length":"示例2：负长度",
    "Example 2: Playing a sound on an emitter (similar to audio_play_sound_on)":"示例 2：在发射器上播放声音 (类似于 audio_play_sound_on)",
    "Example 2: Pretty Print":"示例2：美化输出",
    "Example 2: Queue using array_shift and array_push":"示例2：使用 array_shift 和 array_push 的队列",
    "Example 2: Replace the first instance of an object ID with an instance ID":"示例 2：将对象 ID 的第一个实例替换为实例 ID",
    "Example 2: Reserved Strings":"示例2：保留字符串",
    "Example 2: Showing Instances Collided With":"例2：显示与之碰撞的实例",
    "Example 2: array of arrays":"示例2：数组的数组",
    "Example 2:&nbsp;Animated Sprite That Starts Playing at Sub-image":"示例2：在子图像处开始播放的动画精灵",
    "Example 2:&nbsp;Finding the top-left corner position of a tile":"示例2：查找拼贴的左上角位置",
    "Example 3: Deleting a range":"示例3：删除范围",
    "Example 3: Playing a sound at a given position in 3D audio space (similar to audio_play_sound_at)":"示例 3：在 3D 音频空间中的给定位置播放声音 (类似于 audio_play_sound_at)",
    "Example 3: Rotate an Array":"示例3：旋转数组",
    "Example:":"例子:",
    "Example: Particle System Following an Instance":"示例：跟随实例的粒子系统",
    "Example: Sprite View for an Instance\u0027s Sprite":"示例：一个实例的精灵的精灵视图",
    "Expressions And Operators":"表达式和运算符",
    "Extended Blend Mode":"扩展混合模式",
    "Extended Example":"拓展示例",
    "Extended Example 1":"扩展示例1",
    "Extended Example 2":"扩展示例2",
    "Extended Example:":"扩展示例：",
    "Extension Editor Preferences":"扩展编辑器首选项",
    "Extensions":"扩展",
    "External Call Type Constants":"外部调用类型常量",
    "External Data Type Constants":"外部数据类型常量",
    "External Merge/Diff Tools":"外部合并/差异工具",
    "FX Types &amp; Parameters":"滤镜效果类型和参数",
    "Feather Data Types":"语法检查数据类型",
    "Feather Features":"语法检查功能",
    "Feather Preferences":"语法检查首选项",
    "File Directories":"文件目录",
    "File Handling":"文件处理",
    "File System":"文件系统",
    "File Watcher":"文件监视器",
    "Filter and Effect Functions":"过滤器和效果函数",
    "Filters":"滤镜",
    "Filters and Effects":"滤镜和效果",
    "Fixtures":"装置",
    "Flick Event":"轻击事件",
    "Floating point numbers are numbers that contain decimal points. For example, the numbers 5.5, 0.001, and -2,345.6789 are floating point numbers. Numbers that do not have decimal places are called integers (e.g. 2, 56, 1400).":"浮点数是包含浮点小数的数字。例如，数字5.5、0.001和-2,345.6789是浮点数。没有小数位的数字称为整数。",
    "Font Editor Preferences":"字体编辑器首选项",
    "Fonts":"字体",
    "For sprites, the bounding-box is the name given to the edges of the area that collisions will initially be detected in, and it doesn\u0027t have to be the same size as the sprite it\u0027s being applied to. For sequences, the bounding box is the outer edge of the total space that one or more assets occupy in the canvas.":"对于精灵来说，边界框是用于最初检测碰撞区域边缘的名称，它不必与它所应用的精灵大小相同。对于序列，边界框是画布中一个或多个资源占用的总空间的外缘。",
    "Forces":"力",
    "Formats":"格式",
    "Function":"函数(Function)",
    "Function Return":"函数返回",
    "Function Returns:&nbsp;":"函数返回:",
    "Function Syntax:":"函数语法:",
    "Functions":"函数",
    "GML Code":"GML 代码",
    "GML Code Overview":"GML 代码概述",
    "GML Code Preferences":"GML 代码首选项",
    "GML Code Reference":"GML 代码参考",
    "GML Name":"GML 名称",
    "GML Visual":"GML 可视化",
    "GML Visual Preferences":"GML 可视化首选项",
    "GML Visual\u200B\u200B\u200B\u200B\u200B\u200B\u200B Overview":"GML 可视化概述",
    "GML Visual\u200B\u200B\u200B\u200B\u200B\u200B\u200B Reference":"GML 可视化参考",
    "GPU Control":"GPU 控制",
    "GX.games Environments":"GX.games 环境",
    "Gain":"增益",
    "Gain Calculation":"增益计算",
    "Game":"游戏",
    "Game Input":"游戏输入",
    "Game Options":"游戏设置",
    "Game Settings":"游戏设置",
    "GameMaker Changelog":"GameMaker更新日志",
    "GameMaker Help Center":"GameMaker 帮助中心",
    "GameMaker IDE":"GameMaker IDE",
    "GameMaker Language":"GameMaker 语言",
    "GameMaker Manual Index":"GameMaker手册索引",
    "GameMaker Runner":"GameMaker Runner",
    "GameMaker&nbsp;website":"GameMaker 网站",
    "Gamepad Input":"游戏手柄输入",
    "Garbage Collection":"垃圾回收",
    "General":"通用",
    "General Game Control":"通用游戏控制",
    "General Layer Functions":"常规图层函数",
    "General Preferences":"常规首选项",
    "Generating Object Events":"生成对象事件",
    "Gesture Events":"手势事件",
    "Gesture Input":"手势输入",
    "Gizmo are directly manipulable, self contained, visual screen idioms - essentially anything that is visual and can be interacted with or manpulated by the user to generate an effect or a specific result. ":"Gizmo(小工具)是直接可操作的，独立的，可视的屏幕习语——本质上是任何可视的，可以与用户交互或由用户操作以产生效果或特定结果的东西。",
    "Global Pinch In /Pinch Out Event":"全局捏入/捏出事件",
    "Global Variables":"全局变量",
    "Go To":"转到",
    "Gravity":"重力",
    "Guide To Primitives And Vertex Building":"图元和顶点构建指南",
    "Guide To Using Blendmodes":"混合模式使用指南",
    "Guide To Using Buffers":"缓冲区使用指南",
    "Guide To Using Particles":"粒子使用指南",
    "Guide To Using Shaders":"着色器使用指南",
    "HTML5 Code Injection":"HTML5 代码注入",
    "Hashing is the method of creating a string or value that relates to a single source - usually a file - and ONLY that source. For example., in GameMaker you can generate a hash for a save file, then, before accessing it later, generate another hash for it and check the original hash and the new hash to determine if the file has been tampered with.":"哈希(散列)是一种创建与单个源（通常是文件）相关且仅与该源相关的字符串或值的方法。例如，在GameMaker中，您可以为保存文件生成一个哈希，然后在稍后对其进行访问之前，为其生成另一个哈希，并检查原始哈希和新哈希以确定文件是否已被篡改。",
    "Help":"帮助",
    "How to Disable Extensions?":"如何禁用扩展？",
    "IDE Error Reporting":"IDE 错误报告",
    "IDE Input And Navigation":"IDE 输入和导航",
    "IDE Parameters":"IDE 参数",
    "IDE Preferences":"IDE 首选项",
    "IMPORTANT":"重要",
    "Identifier":"标识符",
    "Image Editor":"图像编辑器",
    "Image Editor Preferences":"图像编辑器首选项",
    "Image Loaded":"图像已加载",
    "Images":"图像",
    "In App Purchases":"应用内购买",
    "In GameMaker, a method is the name given to a user-defined function that has been bound to an instance, so that the instance variable is the name of the funtion and what you use to call it.":"在GameMaker中，方法是绑定到实例的用户定义函数的名称，因此实例变量就是函数的名称和调用它的方法。",
    "In GameMaker, the The VM (Virtual Machine) is a compiling method that uses a generic runner for each platform and then uses that to interpret the code for your game.":"在GameMaker中，VM（虚拟机）是一种编译方法，该方法对每个平台使用通用运行程序，然后使用该运行程序解释游戏代码。",
    "In GameMaker, when we talk about an object, instance or room using \u0027physics\u0027 we mean it is using the built-in physics simulation functions, based on the Box2D physics library.":"在GameMaker中，当我们谈论一个使用“物理”的对象、实例或房间时，我们指的是它使用了基于Box2D物理库的内置物理模拟功能。",
    "In computer programming, the term hard-coded is used to describe code that is considered fixed and not likely to change. Hardcoded features are built into hardware or software in such a way that they cannot be modified later on. For example, if you are making a game and \u0027hard-code\u0027 the player health to 10, then you would be using the value 10 throughout the game code rather than using a variable.":"在计算机编程中，术语“硬编码”用于描述被认为是固定的并且不太可能更改的代码。硬编码功能以无法稍后修改的方式内置于硬件或软件中。例如，如果您要制作游戏并将玩家的健康状况“硬编码”为10，那么您将在整个游戏代码中使用值10，而不是使用变量。",
    "In computing, a server is a computer program or a device that provides functionality for other programs or devices, called \u0027clients\u0027.":"在计算中，服务器是为其他程序或设备提供功能的计算机程序或设备，称为“客户端”。",
    "In games, the HUD stands for the Heads-Up Display. This is the method by which information is visually relayed to the player as part of a game\u0027s user interface, so things like the health bar, status icons, score, etc... all form part of the HUD, and normally HUD elements do not require user interaction.":"在游戏中，HUD代表抬头显示器。这是一种将信息作为游戏用户界面的一部分可视地传递给玩家的方法，因此，诸如健康栏，状态图标，得分等之类的内容都构成了HUD的一部分，而通常HUD元素并不需要用户交互。",
    "In programming, a statement is a single line of code written legally in a programming language that expresses an action to be carried out. A statement might have internal components of its own, including expressions, operators and functions. An example of a statement is A = B + 5. A GameMaker Studio 2 program is nothing but a sequence of one or more statements that together perform a task (like move the player). ":"在编程中，语句是用编程语言合法编写的单行代码，表示要执行的操作。语句可能具有自己的内部组件，包括表达式，运算符和函数。语句的一个示例是A = B +5。GameMakerStudio 2程序不过是一系列一起执行任务（如移动玩家）的一个或多个语句的序列。",
    "In-Game":"游戏内",
    "Included Files":"包含文件",
    "Index":"索引",
    "Ini Files":"ini 文件",
    "Injection Path":"注入路径",
    "Input":"输入",
    "Input Type":"输入类型",
    "Installation Guide":"安装指南",
    "Instance Keywords":"实例关键字",
    "Instance Variables":"实例变量",
    "Instances":"实例",
    "Introduction To &lt;span data-keyref=\"GameMaker Name\"&gt;GameMaker&lt;/span&gt;":"导言 &lt; span data-keyref = “ GameMaker Name”&gt; GameMaker &lt;/span &gt;",
    "Introduction To <span data-keyref=\"GameMaker Name\">GameMaker</span>":"<span data-keyref=\"GameMaker Name\">GameMaker</span>导言",
    "Introduction To GameMaker":"GameMaker 简介",
    "Introduction To {}GameMaker{}":"介绍{}GameMaker{}",
    "Inverse Sawtooth":"反锯齿波",
    "JSDoc Script Comments":"JSDoc 脚本注释",
    "JSON stands for JavaScript Object Notatio, and is a lightweight format for storing data. JSON is often used when data is sent from a server to a web page and is considered \u0027self-describing\u0027 and easy to understand and follow when viewed.":"JSON代表JavaScript Object Notatio，并且是用于存储数据的轻量级格式。 JSON通常在将数据从服务器发送到网页时使用，并且被认为是“自我描述”的，易于查看和遵循。",
    "Joints":"关节",
    "Key":"键",
    "Keyboard Input":"键盘输入",
    "Keyboard Shortcuts":"键盘快捷键",
    "Keyboard Type":"键盘类型",
    "Keyword":"关键字",
    "Keywords are special words that are reserved by a programming language or a program as they have a special meaning. These keywords are reserved to perform certain tasks, and they can be either commands or parameters. Each programming language has a set of reserved keywords (also known as reserved names) which cannot be used as variable names, and the GameMaker Language is no exception, where words like return, while, if and break are all reserved kewords used in the programming language.":"关键字是编程语言或程序保留的特殊字，因为它们有特殊的意义。这些关键字被保留以执行某些任务，它们可以是命令或参数。每种编程语言都有一组不能用作变量名的保留关键字(也称为保留名称)，GameMaker语言也不例外，如return、while、if和break等词都是编程语言中使用的保留kewords。",
    "Language":"语文",
    "Language Features":"语言特点",
    "Language Preferences":"语言首选项",
    "Layer Properties":"图层属性",
    "Layer Types And Properties":"图层类型和属性",
    "Level":"等级",
    "Licencing &amp; Logging In":"许可及登录",
    "Licencing &amp; Versions":"许可 &amp; 版本",
    "Life":"生命周期",
    "Lighting":"光照",
    "Linear interpolation involves estimating a new value by connecting two adjacent known values with a straight line. You can then get the interpolated value by checking any point along the line. In graphics, linear interpolation refers to a basic method of smoothing pixel edges.":"线性插值是通过用一条直线连接两个相邻的已知值来估计一个新值。然后你可以通过检查直线上的任意一点来得到插值值。在图形学中，线性插值是指平滑像素边缘的一种基本方法。",
    "Listener Mask":"监听掩码",
    "Listing A Service":"列出服务",
    "Listing An Asset":"资源清单",
    "Live Wallpapers":"动态壁纸",
    "Local Asset Packages":"本地资源包",
    "Local Variables":"局部变量",
    "Machine code is code that is directly executed by a CPU without the need for interpretation by an interpreter. It is the lowest level of code and contains the instructions that the processor executes.It is specific to a processor architecture. As a consequence, it is optimized. It can also be generated from source code in a higher level programming language by a compiler.In GameMaker the YoYo Compiler can be used to generate an executable containing optimized machine code for a variety of platforms.":"机器代码是CPU直接执行的代码，不需要解释器解释。它是最低级别的代码，包含处理器执行的指令。它是特定于处理器架构的。因此，它是优化的。它也可以由编译器从高级编程语言的源代码生成。在GameMaker中，YoYo编译器可用于生成包含针对各种平台的优化机器代码的可执行文件。",
    "Making A Game Using <span data-keyref=\"GameMaker Name\">GameMaker</span>":"使用 <span data-keyref=\"GameMaker Name\">GameMaker</span> 制作游戏",
    "Marketplace Preferences":"市场首选项",
    "Marketplace Style Guide":"市场风格指南",
    "Match Making":"配对",
    "Maths And Numbers":"数学与数字",
    "Matrix Array":"矩阵数列",
    "Matrix Functions":"矩阵函数",
    "Member":"成员",
    "Menus":"菜单",
    "Message":"信息",
    "Method Variables":"方法变量",
    "Milliseconds":"毫秒",
    "Mipmapping":"纹理映射",
    "Motion Planning":"运动规划",
    "Mouse Input":"鼠标输入",
    "Movement":"运动",
    "Movement And Collisions":"运动与碰撞",
    "Movement And Controls":"移动及控制",
    "Multicast is network communication where multiple receivers are addressed instead of a single receiver in a single transmission.":"组播是一种网络通信，在这种通信中，多个接收者被寻址，而不是单个传输中的单个接收者。",
    "Names":"名称",
    "Networking":"网络",
    "Nine Slice":"九宫格",
    "Non-Bitmap Sprites":"非位图精灵",
    "Notes":"笔记",
    "Number Functions":"数字函数",
    "OPTIONAL":"可选",
    "OS And Compiler":"操作系统和编译器",
    "Object Editor Preferences":"对象编辑器首选项",
    "Object Events":"对象事件",
    "Object Variables":"对象变量",
    "Objects":"对象",
    "Objects And Instances":"对象和实例",
    "Obsolete Functions":"过时的函数",
    "Offset":"偏移量",
    "Operating System":"操作系统",
    "Operation":"类型",
    "Option":"选项",
    "Orientation":"定位",
    "Other Events":"其他事件",
    "Our Knowledge Base":"我们的知识库",
    "Our Social Links":"我们的联系方式",
    "Output Windows":"输出窗口",
    "Overview":"概述",
    "Parameters":"参数",
    "Parent Objects":"父对象",
    "Particle Draw Order":"粒子绘制顺序",
    "Particle Emitter Inf{}o{} Struct":"粒子发射器信息{}{}结构",
    "Particle Emitter Mode Constant":"粒子发射器模式常量",
    "Particle Emitters":"粒子发射器",
    "Particle System Info Struct":"粒子系统信息结构",
    "Particle Systems":"粒子系统",
    "Particle Type Info Struct":"粒子类型信息结构",
    "Particle Types":"粒子类型",
    "Particles":"粒子",
    "Path Manipulation":"路径操控",
    "Path Variables":"路径变量",
    "Paths":"路径",
    "Peers":"端",
    "Physics":"物理",
    "Physics Joint Constants":"物理关节常量",
    "Physics Objects":"物理对象",
    "Physics Variables":"物理变量",
    "Pinch End Event":"捏停止事件",
    "Pinch Start Event":"捏开始事件",
    "Pitch":"音高",
    "Platform":"平台",
    "Platform Preferences":"平台首选项",
    "Player Preferences":"玩家首选项",
    "Plugin Preferences":"插件首选项",
    "Pointer":"指针(Pointer)",
    "Position":"位置",
    "Power Saving":"节能",
    "Preferences &amp; Features":"偏好及功能",
    "Prefix":"前缀",
    "Primitives&nbsp;And Vertex Formats":"基元和顶点格式",
    "Project Format":"项目格式",
    "Project Image Generator":"项目图像生成器",
    "ProjectTool":"项目工具",
    "Purchasing An Asset":"购买资源",
    "Push Notifications":"推送通知",
    "Quick Start Guide":"快速入门指南",
    "Rating And Flagging Assets":"评级和资源标志",
    "Read Only":"只读",
    "Real":"实数(Real)",
    "Recent Windows":"最近窗口",
    "Red Lowest Bit":"红色最低位",
    "Redefine Keys Preferences":"重定义快捷键首选项",
    "Reference":"参考文献",
    "Release Notes":"发行说明",
    "Replacement key":"替换键",
    "Repository Options":"仓库选项",
    "Required SDKs":"所需的 SDK",
    "Resources":"资源",
    "Return Type":"返回类型",
    "Return Value (examples)":"返回值(示例)",
    "Returns":"返回",
    "Returns:":"返回:",
    "Reversed (new to old)":"反转(从新到旧)",
    "Reverting Files":"回滚文件",
    "Rollback Constraints":"回滚约束",
    "Rollback Errors":"回滚错误",
    "Rollback Events":"回滚事件",
    "Rollback Functions":"回滚函数",
    "Rollback Multiplayer":"回滚多人游戏",
    "Rollback System":"回滚系统",
    "Rollback Variables":"回滚变量",
    "Room Editor Preferences":"房间编辑器首选项",
    "Room Inheritance":"房间继承",
    "Room Properties":"房间属性",
    "Rooms":"房间",
    "Rotate End Event":"旋转结束事件",
    "Rotate Start Event":"旋转开始事件",
    "Rotating Event":"正在旋转事件",
    "Runner &amp; Compiler":"运行器和编译器",
    "Runner Errors":"运行器错误",
    "Runtime Feeds Preferences":"运行时源首选项",
    "Runtime Functions":"运行时函数",
    "Runtime Parameters":"运行时参数",
    "SCM stands for Source Control Management, which is a program (or suite of programs) responsible for maintining versions of the source code for a project. SCM permits you to store a running history of code changes, as well as review and undo any changes made to the source code, among other things.":"SCM代表源代码控制管理，它是负责维护项目源代码版本的一个程序(或一组程序)。SCM允许您存储代码更改的运行历史，以及检查和撤销对源代码所做的任何更改，以及其他事情。",
    "SDK stands for \u0027Software Development Kit\u0027. This usually refers to a collection of software and/or packages used for developing applications for a specific device or operating system.":"SDK代表“软件开发包\u0027Software Development Kit\u0027”。这通常是指用于为特定设备或操作系统开发应用程序的软件和/或软件包的集合。",
    "SDL Name":"SDL 名称",
    "Sample rate is the number of samples of audio carried per second, measured in Hz or kHz (one kHz being 1000 Hz). The higher the sample rate, the more a sound will approximate the original analog waveform, but the larger the file size will be. In general sound effects are fine with a lower sample rate than music.":"采样率是每秒携带的音频样本的数量，以赫兹或kHz测量(1khz等于1000hz)。采样率越高，声音将越接近原始模拟波形，但文件大小将越大。一般来说，声音效果在采样率较低的情况下比音乐效果好。",
    "Save / Load":"保存 / 加载",
    "Saving Data":"保存数据",
    "Sawtooth":"锯齿波",
    "Scale":"比例",
    "Scope":"范围",
    "Script Functions And Variables":"脚本函数和变量",
    "Script Functions vs. Methods":"脚本函数与方法",
    "Scripts":"脚本",
    "Secondary Particles":"二次粒子",
    "Sequence Direction Constant":"序列方向常量",
    "Sequence Events, Moments and Broadcast Messages":"事件、时刻和广播消息的序列",
    "Sequence Layers":"序列图层",
    "Sequences":"序列",
    "Sequences Preferences":"序列首选项",
    "Setting":"设置",
    "Setting Up The Git Plugin":"设置 Git 插件",
    "Shader Corner ID":"着色器角ID",
    "Shader Language":"着色器语言",
    "Shader Uniforms":"着色器 Uniforms 常量",
    "Shaders":"着色器",
    "Shaders.htm":"着色器",
    "Shape / Sprite":"形状/精灵",
    "Short for \u0027Graphical User Interface\u0027, which is a user interface that includes graphical elements, such as windows, icons and buttons. In GameMaker you have a specific set of object events (Draw GUI Events) that can draw to this layer specifically designed for things like score, lives, inventories, etc...":"“图形用户界面”（Graphical User Interface）的缩写，它是一个包含图形元素（例如窗口，图标和按钮）的用户界面。在GameMaker中，您有一组特定的对象事件（绘制GUI事件），可以将其吸引到专门为得分，生命，存货等事物设计的这一层。",
    "Short for \u0027Rich Site Summary\u0027, and is a standardized system for the distribution of content from an online publisher to Internet users.":"是“丰富网站摘要\u0027Rich Site Summary\u0027”的缩写，是一个用于将内容从在线出版商分发给互联网用户的标准化系统。",
    "Short for \u0027Universal Resource Locator\u0027, and is basically the address of something on the internet.":"“通用资源定位器”的缩写，基本上是互联网上某物的地址。统一资源定位符 (Uniform Resource Locator, URL)",
    "Similar to human languages, programming languages have their own set of rules on how statements can be conveyed, and this set of rules is known as the syntax. While a number of programming languages share many features, functions, and capabilities, they generally differ in syntax. Without the proper use of syntax, one cannot write an executable program, and wrong syntax will lead to errors when compiling.":"与人类语言类似，编程语言在如何传达语句方面也有自己的一套规则，这套规则称为语法。尽管许多编程语言共享许多功能，特性和功能，但是它们通常在语法上有所不同。如果没有正确使用语法，则无法编写可执行程序，并且错误的语法将导致编译时出错。",
    "Sine":"正弦波",
    "Size":"大小",
    "Skeletal Animation":"骨骼动画",
    "Skins":"皮肤",
    "Slots":"插槽",
    "Smooth interpolation involves estimating a new value by connecting two adjacent known values with a mathematically generated spline curve . You can then get the interpolated value by checking any point along the line.":"平滑插值包括通过将两个相邻的已知值与数学上生成的样条曲线连接来估计新值。然后，您可以通过检查直线上的任意点来获得内插值。",
    "Social":"社交",
    "Soft Body Particles":"柔体粒子",
    "Sound Effects":"音效",
    "Sound Mixer":"混音器",
    "Sounds":"声音",
    "Source Control":"源码控制",
    "Source Examples":"示例代码",
    "Source code is the fundamental component of a computer program that is required for the program to run.":"源代码是计算机程序运行所必需的基本组件。",
    "Specifier Examples{}*{}":"说明符示例{}*{}",
    "Speed":"速度",
    "Spline Editor":"样条线编辑器",
    "Sprite Editor Preferences":"精灵编辑器首选项",
    "Sprite Information":"精灵信息",
    "Sprite Instance Variables":"精灵实例变量",
    "Sprite Layers":"精灵图层",
    "Sprite Manipulation":"精灵操作",
    "Sprites":"精灵",
    "Sprites And Tiles":"精灵和 Tiles",
    "Square":"方波",
    "Standard Workflow":"标准工作流程",
    "Start Screen Preferences":"开始屏幕首选项",
    "Static Struct":"静态结构",
    "Static Variables":"静态变量",
    "Stats And Leaderboards":"统计数据和排行榜",
    "Status Value":"状态值",
    "Step Event":"步事件",
    "String":"字符串(String)",
    "String Escape Characters":"字符串转义字符",
    "Strings":"字符串",
    "Strip Images":"条带图像",
    "Struct":"结构(Struct)",
    "Struct Forbidden Variables":"结构禁止的变量",
    "Struct Member":"结构成员",
    "Structs &amp; Constructors":"结构与构造函数",
    "Submission Guidelines":"提交指引",
    "Summary":"总结",
    "Surfaces":"表面",
    "Syntax":"语法",
    "Syntax Errors (Feather Messages)":"语法错误(语法检查信息)",
    "Syntax:":"语法:",
    "System":"系统",
    "TIP":"提示",
    "Tag Type":"标签类型",
    "Tap Event":"点击事件",
    "Target":"目标",
    "Target Platform":"目标平台",
    "Template Info":"模板信息",
    "Texel (or texture element) is the fundamental unit of texture space, much like a pixel is the fundamental element of picture space. Textures are represented by arrays of Texels, just as pictures are represented by arrays of pixels. When texturing a 3D surface (a process known as texture mapping) the renderer maps texels to appropriate pixels in the output picture.":"Texel（或纹理元素）是纹理空间的基本单位，就像像素是图片空间的基本元素一样。纹理由纹素阵列表示，就像图片由像素阵列表示一样。对3D表面进行纹理化（一种称为纹理贴图的过程）时，渲染器将纹理像素映射到输出图片中的适当像素。",
    "Text":"文本",
    "Text Editor Preferences":"文本编辑器首选项",
    "Text Files":"文本文件",
    "Text Rendering (Regular)":"文本呈现(常规)",
    "Text Rendering (SDF Enabled)":"文本呈现(启用 SDF)",
    "Text in Sequences":"序列文本",
    "Texture Groups":"纹理组",
    "Texture Pages":"纹理页",
    "Textures":"纹理",
    "The Animation Curve Library":"动画曲线库",
    "The Asset Browser":"资源浏览器",
    "The Asset Editors":"资源编辑器",
    "The Build Menu":"构建菜单",
    "The Debug Overlay":"The Debug Overlay (调试覆盖视图)",
    "The Debugger":"调试器",
    "The Device Manager":"设备管理器",
    "The Dope Sheet is the visual representation of the sequence timeline, and where you can add, remove and edit the different asset keys and parameter keys that affect how the different tracks in the sequence will behave over time.":"关键帧清单“摄影表”是序列时间轴的直观表示，您可以在其中添加，删除和编辑不同的资源键和参数键，这些键会影响序列中不同音轨随时间的行为。",
    "The Edit Menu":"编辑菜单",
    "The End User Licence Agreement (EULA) is a legal document that outlines the licence for a product that you are getting.":"最终用户许可协议（EULA）是一份法律文件，概述了您所获得产品的许可。",
    "The File Menu":"文件菜单",
    "The File System":"文件系统",
    "The Font Editor":"字体编辑器",
    "The Game Window":"游戏窗口",
    "The Help Menu":"帮助菜单",
    "The IDE, or Integrated Development Environment, is a software application that provides comprehensive facilities to computer programmers for software development. In this case, the entire frontend of GameMaker Studio 2 is considered the IDE, and includes sections to create graphics, add sounds, and add code to make your games.":"IDE，或集成开发环境，是一个软件应用程序，为计算机程序员提供软件开发的全面设施。在这种情况下，GameMaker Studio 2的整个前端都被认为是 IDE，包括创建图形、添加声音和添加代码以制作游戏的部分。",
    "The Inspector":"检查器",
    "The Layouts Menu":"布局菜单",
    "The Marketplace":"<del>市场(重制中)",
    "The Marketplace Menu":"市场菜单",
    "The Micro Web Server":"微型 Web 服务器",
    "The Nine Slice Struct":"九宫格结构",
    "The Output Window":"输出窗口",
    "The Path Editor":"路径编辑器",
    "The Physics World":"物理世界",
    "The Profiler":"探查器",
    "The Room Manager":"房间管理器",
    "The Sequence Canvas":"序列画布",
    "The Sequence Object Struct":"序列对象结构",
    "The Start Page":"起始页",
    "The Tools Menu":"工具菜单",
    "The Track Panel":"轨道面板",
    "The Windows Menu":"窗口菜单",
    "The acronym \u0027API\u0027 stands for Application Programming Interface, and this refers to sets of rules, routines, and protocols used to build software applications. APIs help in communication with third party programs or services, which can be used to build different software. Companies such as Facebook and Twitter actively use APIs to help developers gain easier access to their services, and in GameMaker Studio 2 you\u0027ll see the API scronym used when talking about extensions - for example, the Google Play Services API or the Amazon Game On API.":"\"API”代表应用程序编程接口(Application Programming Interface)的首字母缩，是指用于构建软件应用程序的规则，例程和协议集。 API帮助与第三方程序或服务进行通信，这些程序或服务可用于构建不同的软件。诸如Facebook和Twitter之类的公司积极使用API\u200B\u200B来帮助开发人员更轻松地访问其服务，在GameMaker Studio 2中，您会看到谈论扩展时使用的API缩写-例如Google Play Services API或Amazon Game On API。",
    "The application surface is a special built-in surface that GameMaker Studio 2 will draw everything to in the Draw Events of a game (a surface is essentially an area of memory reserved for graphics). This surface is then drawn to the display buffer at the end of each game frame, displaying its contents to the player.":"应用程序表面是一种特殊的内置表面，GameMaker Studio 2将在游戏的“绘制事件”中将所有内容绘制到该表面（表面实际上是为图形保留的内存区域）。然后这个表面被绘制到每个游戏帧末尾的显示缓冲区，向玩家显示它的内容。",
    "The architecture of a processor chip (CPU) is a description of its basic components and of its basic operations. Each processor family has its own architecture, like ARM or x64.":"处理器芯片(CPU)的体系结构是对其基本组件和基本操作的描述。每个处理器家族都有自己的架构，比如 ARM 或 x64。",
    "The area of the sequence editor that shows you all the different tracks in a sequence - asset tracks, parameter tracks, track groups and clip mask groups.":"序列编辑器的区域，显示你在一个序列中所有不同的轨道-资源轨道，参数轨道，轨道组和剪切蒙版组。",
    "The backend is the part of a program that is performed in the background and is opaque to the user, usually without the need for any user interaction. For example, the server side of things when doing network programming over the internet, or the data processing that goes on behind the scenes in an RPG game. This is essentially the oppositre of the frontend.":"后端是程序的一部分，该程序在后台执行，并且对用户不透明，通常不需要任何用户交互。例如，在Internet上进行网络编程时的服务器端事物，或RPG游戏中幕后进行的数据处理。这本质上是前端的对立面。",
    "The bit depth refers to the number of bits in each sample of an audio file. Lower bit depth gives poorer quality sound but much smaller file size. Lower bit depths are usually used for small sound effects and patforms where memory may be an issue (like HTML5).":"比特深度是指音频文件的每个样本中的比特数。较低的位深度会产生较差的声音质量，但文件大小会小得多。低位深度通常用于可能会引起内存问题的小型声音效果和样式，例如HTML5。",
    "The cache is a collection of files that are generated by GameMaker once and then stored and re-used over multiple runs of a project. Note that this cache can sometimes become \u0027stale\u0027, meaning it must be cleared to force GameMaker to rebuild it from scratch, ensuring that no stale files corrupt your final game exectable.":"缓存是GameMaker临时生成的文件的集合，然后存储并在项目的多个运行中重复使用。请注意，此缓存有时可能会变成“陈旧的”，这意味着必须清除它以强制GameMaker从头开始重建它，以确保没有陈旧的文件破坏您的最终可执行游戏。",
    "The constants below can only be used&nbsp;with the&nbsp;DualSense gamepad on a PS4 or PS5":"以下常量只能与 PS4 或 PS5 上的 DualSense 游戏手柄一起使用",
    "The current \u0027play\u0027 position within the timeline in the Sequences dope sheet or the Sprite editor frame view. In sequences (and sprites), this will move as the animation is previewed, and you can place it on specific frames to see and edit the keys and keyframes at that position.":"序列文件或精灵编辑器帧视图中时间轴内的当前“播放”位置。在序列(和精灵)中，这将随着动画预览而移动，你可以将其放置在特定的帧上以查看和编辑该位置的键和关键帧。",
    "The deadzone is the distance you have to move an analog stick before the game recognizes it\u0027s being moved. A low deadzone will make any slight movement of the analog stick move your player or aim or whatever. A high deadzone value means that the analog stick needs a much greater movement before the game will detect it and move whatever is being controlled.":"盲区是指在游戏识别到你移动模拟杆之前你必须移动的距离。一个低盲区会使任何模拟杆的轻微移动移动你的玩家或目标或任何东西。高盲区值意味着模拟棒需要一个更大的移动，在游戏将检测它和移动任何被控制。",
    "The display buffer is the \u0027canvas\u0027 where everything is finally drawn. Some events target this directly (like the Pre Draw event), while others will first draw to the application surface and then draw that to the display buffer.":"显示缓冲区是最终绘制所有内容的“画布”。一些事件直接针对此事件（例如Pre Draw事件），而另一些事件将首先绘制到应用程序表面，然后将其绘制到显示缓冲区。",
    "The frontend is the part of a program that is \u0027front facing\u0027, ie: the part that the end user interacts with. For example, in GameMaker Studio 2 the interface where you do the programming and add assets, etc... is the frontend of the program, as it is where you interact with the program and input values and files and other things. This is essentially the oppositre of the backend.":"前端是程序的面向用户的部分，即：最终用户与之交互的部分。例如，在GameMaker Studio 2中，您可以在其中进行编程和添加资源等的界面是程序的前端，因为它是您与程序进行交互并输入值和文件等内容的界面。这本质上是后端的对立面。",
    "The garbage collector is an automated tool that is part of the game code and is used to remove certain things (like arrays and structs) from memory when they are no longer referenced in your code, without the need for you to explicitly remove them.":"垃圾回收是游戏代码中的一部分，是一种自动化工具，用于在代码中不再引用某些东西（如数组和结构）时从内存中删除它们，而无需您明确删除它们。",
    "The runtime in GameMaker is the collection of compiler assets that is required by the program to create a final executable package for a given target platform. These are installed seperately from the IDE, and can be changed and updated at any time.":"GameMaker Studio 2中的运行时是程序为给定目标平台创建最终可执行包所需的编译器资源的集合。它们是从IDE中独立安装的，并且可以在任何时候进行更改和更新。",
    "The tile map is the name given to a collection of tiles taken from a tile set and used to create levels in a game.":"图块地图是从图块图块集中获取的图块集合的名称，用于在游戏中创建关卡。",
    "The&nbsp;Keyframe Struct":"关键帧结构",
    "The&nbsp;Keyframe&nbsp;Data Struct":"关键帧数据结构",
    "The&nbsp;Sequence Instance Struct":"序列实例结构",
    "The&nbsp;Start Page":"起始页",
    "The&nbsp;Track Struct":"轨道结构",
    "This is a special compiler for creating executable packages that use native code instead of interepreted code and a runner (wich is what the GameMaker VM compile uses). Compiled code is faster to run, but takes more time to compile the executable.":"这是一个特殊的编译器，用于创建使用本机代码而不是解释性代码和运行程序的可执行程序包（由GameMaker VM编译使用）。编译后的代码运行速度更快，但是编译可执行文件需要更多时间。",
    "This is a technique used to smooth otherwise jagged lines or textures by blending the color of an edge with the color of the pixels around it. The result should be a more pleasing and realistic appearance, depending on the intensity of the effect.":"这是一种通过将边缘的颜色与周围像素的颜色混合来平滑锯齿状线条或纹理的技术。根据效果的强度，结果应该是更令人愉悦和逼真的外观。",
    "This is a type of non-linear interpolation based on mathematical splines. It is used to estimate a new value by connecting two adjacent known values using \u0027smooth\u0027 curves (splines), and a new value can be derived from any point along the line.":"这是一种基于数学样条的非线性插值。它通过使用“平滑”曲线（样条线）连接两个相邻的已知值来估计新值，并且可以从沿线的任何点导出新值。(catmull-rom interpolation卡特莫尔罗插值)",
    "This is an anacronym for Alpha, Red, Green, Blue, and is used to refer to the colour components specified as a hexadecimal value, eg: #FF53E270, where each set of two digits represents a single component. Breaking down the ARGB example above gives us the following component values: Alpha(FF), Red(53), Green(E2) and Blue(70). ":"这是Alpha，Red，Green，Blue的缩写，用于指代指定为十六进制值的颜色分量，例如：＃FF53E270，其中每两位数字代表一个分量。分解上面的ARGB示例可以得到以下分量值：Alpha（FF），Red（53），Green（E2）和Blue（70）。",
    "This stands for Hue, Saturation and Value and is a way of expressing a colour usually using values from 0 to 255. The hue is the colour hue value, the saturation is amount of the colour to be used, and the value is the brightness of the colour. ":"它代表“色相”，“饱和度”和“明度”，是一种通常使用0到255之间的值表示颜色的方式。色相是色相值，饱和度是要使用的颜色量，而明度是颜色明暗。",
    "Tile Map Layers":"贴图层",
    "Tile Set Editor Preferences":"图块集编辑器首选项",
    "Tile Sets":"图块集",
    "Tilesets":"图块",
    "Time Source Expiry Types":"时间源过期类型",
    "Time Source States":"时间源状态",
    "Time Source Units":"时间源单位",
    "Time Sources":"时间源",
    "Timeline Preferences":"时间线首选项",
    "Timelines":"时间线",
    "Triangle":"三角波",
    "Type":"类型",
    "Type Tables":"类型表",
    "Typographic error.":"印刷错误。",
    "UWP And Xbox Live":"<del>UWP 和 Xbox Live</del> (过时)",
    "Unavailable return key":"无法使用返回键",
    "Undefined":"未定义(Undefined)",
    "Unicode Escape Sequence":"Unicode 转义序列",
    "Updating Guide":"更新指引",
    "Users And Accounts":"用户及账户",
    "Using Animation Curves":"使用动画曲线",
    "Using The Dope Sheet":"使用关键帧表",
    "V-sync or vertical synchronisation is used to synchronise your game update speed to the refresh rate of the monitor. This can reduce screen tearing - which is when your screen displays portions of multiple frames in one go - but can also cause performance issues or problems on monitors with high refresh-rates.":"垂直同步用于将游戏更新速度与监视器的刷新率同步。这样可以减少屏幕撕裂（即屏幕一次显示多帧的一部分）的情况，但也会导致性能问题或刷新率较高的显示器出现问题。",
    "VRAM is the amount of memory available for video, ie: the memory space that can store textures and images.":"VRAM是视频可用的内存量，即：可以存储纹理和图像的内存空间。",
    "Value":"值",
    "Variable":"变量",
    "Variable Functions":"变量函数",
    "Variable Name":"变量名",
    "Variables And Variable Scope":"变量和变量范围",
    "Vectors":"向量",
    "Version &amp; Account Details":"版本和账户详细信息",
    "Version Name{} (version Number)":"版本名称{}(版本号)",
    "Video Playback":"视频播放",
    "Virtual Key Constant (vk_*)":"虚拟键常量 (vk_*)",
    "Virtual Key Constant (vk_*) (keyboard_check_direct only)":"虚拟键常量 (vk_*) (仅 keyboard_check_direct)",
    "Virtual Keys And Virtual Keyboards":"虚拟按键和虚拟键盘",
    "Wallpaper Config Event":"壁纸配置事件",
    "Watches":"监视器",
    "Web And HTML5":"Web 和 HTML5",
    "What Is Programming":"什么是编程",
    "What Is Programming?":"什么是编程？",
    "When something is rendered in GameMaker Studio 2, it generally means that it has simply been \u0027drawn to the display buffer\u0027 or \u0027drawn to a surface\u0027. Rendering can also refer to the process of turning some kind of vector source (like a font) into a bitmap image,.":"当一些东西在GameMaker Studio 2中呈现时，通常意味着它只是被“绘制到显示缓冲区”或“绘制到表面”。渲染也可以指将某种矢量源(如字体)转换为位图图像的过程。",
    "Whitespace Characters":"空格字符",
    "Windows Batch File Name":"Windows 批处理文件名",
    "Windows Key Binding":"Windows 键位绑定",
    "Workspace":"工作区",
    "Workspace Preferences":"工作区首选项",
    "Workspaces":"工作空间",
    "Xbox Live":"<del>Xbox Live</del>",
    "YUV Videos":"YUV 视频",
    "YoYo Compiler":"YoYo 编译器",
    "Your Marketplace Library":"你的市场库",
    "audio_bus_main":"",
    "compatibility scripts":"兼容性脚本",
    "debug_mode":"<del>debug_mode</del>",
    "description":"描述",
    "errorString / resultString":"错误字符串 / 结果字符串",
    "health":"<del>health</del>",
    "iOS / tvOS Extensions":"iOS / tvOS 扩展",
    "if / else and Conditional Operators":"If/else 和条件运算符",
    "json_decode":"json_decode (弃用)",
    "json_encode":"json_encode (弃用)",
    "lives":"<del>lives</del>",
    "macOS Key Binding":"macOS 键位绑定",
    "macOS/Linux Shell Script Name":"MacOS/Linux Shell 脚本名称",
    "physics_joint_wheel_create":"physics_joint_wheel_create",
    "score":"<del>score</del>",
    "value":"值",
    "{} Platform-Specific Notes":"{}平台专用注释",
    "{}Additional IDE Tools{}{}Additional IDE Tools{}":"{}其他 IDE 工具{}",
    "{}Additional Information{}{}Additional Information{}":"{}补充信息{}{}补充信息{}",
    "{}Asset Editors{}{}Asset Editors{}":"{}资源编辑{}{}资源编辑{}",
    "{}Example 1: Basic Use{}":"{}示例1：基本使用{}",
    "{}Example 1: Custom String{}":"{}示例1：自定义字符串{}",
    "{}Example:{}":"{}示例:{}",
    "{}Feather{} only":"{}语法检查{}专用",
    "{}GameMaker Language{}{}GameMaker Language{}":"{}GameMaker语言{}{}GameMaker语言{}",
    "{}GameMaker{}&nbsp;Setup And Versions":"{}GameMaker{}安装和版本",
    "{}IDE Navigation{}{}IDE Navigation{}":"{}IDE导航{}{}IDE导航{}",
    "{}IDE Preferences &amp; Features{}{}IDE Preferences &amp; Features{}":"{} IDE 首选项和特性{}{} IDE 首选项和特性{}",
    "{}Introduction to {}GameMaker{}{}{}Introduction to {}GameMaker{}{}":"{}{}GameMaker{}的介绍{}{}{}GameMaker{}的介绍{}",
    "{}Quick Start Guide{}{}Quick Start Guide{}":"{}快速入门指南{}{}快速入门指南{}",
    "{}Returns:{}":"{}返回:{}",
    "{}Setting Up And Version Information{}{}Setting Up And Version Information{}":"{}设置和版本信息{}{}设置和版本信息{}",
    "{}Syntax:{}":"{}语法:{}",
    "{}Texture Group Status Constant{}":"{}纹理组状态常量{}",
    "{}Variable \"Type_Constant_Surface_Format\" is not defined{}":"{}变量\"Type_Constant_Surface_Format\"未定义{}",
    "{}Video Format Constant{}":"{}视频格式常量{}",
    "{}Video Status Constant{}":"{}视频状态常量{}",
    "{}{}Blend Mode Factor Constant{}{}":"{}{}混合模式因子常量{}{}",
    "{}{}Device Type Constant{}{}":"{}{}设备类型常量{}{}",
    "{}{}Example:{}{}":"{}{}示例:{}{}",
    "{}{}Mouse Button Constant{}{}":"{}{}鼠标按钮常量{}{}"
}
	var json={
    "Also note that arrays are {}passed by reference{}, but will copy the whole thing when a change is made (this behaviour is called {}copy on write{}). So, if you pass an array to a function, you are passing a {}reference {}to the original array and any values read from it will come from the original source. This is nice and fast, but if you need to modify any of the array values, the array itself is duplicated at the point of the write and any changes made {}need to be returned from the function or they will be lost{}. This is much slower and consumes more memory, so be careful how you use arrays in functions.":"还要注意，数组是通过{}引用{}传递的，但对于旧版项目或开启写时复制时，进行更改时将复制整个内容(这种行为称为{}写时复制{})。因此，如果你将一个数组传递给一个函数，你就是将一个{}引用{}传递给原始数组，从它中读取的任何值都将来自原始源。这很好也很快速，但是如果您需要修改任何数组值，数组本身会在写入时被复制，并且所做的任何更改{}都需要从函数中返回，否则它们将丢失{}。这要慢得多，并且消耗更多的内存，所以在函数中使用数组时要小心。",
    "Also note that while the script editor permits you to fold code at each of the open/close brackets, you can use {}#region{} and {}#endregion{}&nbsp;tags to section off parts of your code and greatly enhance readability, especially when dealing with larger scripts which contain multiple functions. Regions can be commented, too - see the Editing section of this page in the manual):":"还要注意的是，虽然脚本编辑器允许您在每个开/闭括号处折叠代码，但是您可以使用{}#region{}和{}#endregion{} 标记来分隔代码的一部分，并极大地增强可读性，特别是在处理包含多个函数的大型脚本时。区域也可以被注释-参见手册中该页的编辑部分):",
    "Alternatively, look into creating a{} tile-based collision system{}, which can be created using the {}tilemap functions{}&nbsp;or even a custom 2D array or DS grid. These will be very fast and will help boost your game\u0027s speed. However, if you are using irregular terrain or walls and objects that don\u0027t align to a grid they may not be appropriate. You can find a very simple tutorial on tilemap collisions from the following video link":"或者，考虑创建一个基于{}图块的碰撞系统{}，它可以使用{} tilemap 函数{}甚至是一个自定义的2D数组或DS网格。这些将非常快，将有助于提高你的游戏速度。然而，如果你使用的是不规则的地形或墙壁和物体，它们可能不符合网格。你可以从下面的视频链接中找到一个非常简单的关于图块图碰撞的教程",
    "Another way to reduce these numbers is to disable the {}Separate Texture Page{} option for sprites unless absolutely necessary. Each image stored in this way is sent to its own texture page and batched differently, so having these images on a regular texture page is better. You can then get the UVS coordinates using the {}{}sprite_get_uvs(){}{}&nbsp;function and store them in variables for use later. It may be a small amount of extra code, but the boost you will get is worth it. Note that this method will not permit texture repeats!":"另一种减少这些数量的方法是禁用精灵的{} 单独的纹理页面 {}选项，除非绝对必要。以这种方式存储的每个图像都被发送到自己的纹理页面，并以不同的批处理方式进行处理，所以将这些图像放在常规的纹理页面上会更好。然后，您可以使用{}{}sprite_get_uvs(){}{} 函数获取UVS坐标，并将它们存储在变量中以供以后使用。这可能需要少量额外的代码，但您将得到的提升是值得的。注意这个方法不允许纹理重复!",
    "Apart from the main things mentioned above, there are other more general things that can help with performance and that are considered \"good practices\" too:":"除了上面提到的主要事情之外，还有其他更普遍的事情可以帮助提高性能，也被认为是“良好实践”:",
    "As with all these tips, if it makes your life more difficult to change it and your game runs fine, don\u0027t worry about it too much...":"就像所有这些建议一样，如果它让你的生活变得更加困难，而你的游戏却运行得很好，那就不要太担心了。",
    "Best Practices When Programming":"编程时的最佳实践",
    "But, as we mentioned at the start of the page, all these optimisations are optional and if your game runs fine with 60 vertex batches, 80 texture swaps, additive blending, etc., then don\u0027t worry about it too much! Just keep these things in mind when programming your next game...":"但是，正如我们在页面开始时所提到的，所有这些优化都是可选的，如果你的游戏能够顺利运行60个顶点批次，80个纹理交换，添加混合(additive blending)等等，那么你就不必太担心这些了!在编写你的下一款游戏时，请牢记这些内容。",
    "Continuing on from the above point about programming style, one thing that a lot of beginners do is to cram as much into one line of code as possible. For example:":"从上面关于编程风格的观点继续，很多初学者所做的一件事就是尽可能多地将代码塞进一行代码中。例如:",
    "Finally, we\u0027re going to touch briefly on using {}surfaces{}, as {}GameMaker{} has a fairly significant optimisation when using them in your games: the ability to switch on and off the {}depth buffer{}.":"最后，我们将简要介绍一下 {}表面{} 的使用，因为{}GameMaker{}在你的游戏中使用它们时有一个相当重要的优化:打开和关闭{}深度缓冲区{}的能力。",
    "However, you can avoid this copy on write behaviour by using the special array {}accessor{}&nbsp;{}@{}, as this gives direct access to the underlying array. For example:":"但是，您可以通过使用特殊的数组{}访问器{} {}@{}来避免这种写时复制行为，因为这提供了对底层数组的直接访问。例如:",
    "If you switch on the {}{}debug overlay{}{},&nbsp;you will see that there are two figures in brackets at the top of your screen when testing. The first is the number of {}texture swaps {}being done and the second is the number of {}vertex batches{}. A number of factors will influence these figures and you will never get them down to (0) (0) as the engine requires one or two of each every step, but you should aim to get these values down as low as possible.":"如果您打开{}{}调试覆盖{}{}，&nbsp;您将在测试时看到屏幕顶部的括号中有两个数字。第一个是正在进行的{}纹理交换{}的数量，第二个是{}顶点批次{}的数量。许多因素会影响这些数值，你不可能将其降低到(0)(0)，因为引擎每一步都需要1到2个数值，但你应该尽可能降低这些数值。",
    "If your game runs fine and you are happy with things as they are, then {}don\u0027t rush to change everything just to squeeze a few extra FPS out{}. You have to strike a balance between readable, flexible and modular code with the time and energy required to change things, as well as the overall gain at the end. Basically, if it isn\u0027t broken, don\u0027t fix it and keep what you learn here for your next project.":"如果你的游戏运行得很好，你对现状也很满意，那么{}就不要为了从{}中挤出一些额外的FPS而急于改变一切。你必须在可读、灵活和模块化的代码之间取得平衡，同时还要花时间和精力去修改内容，以及最终的整体收益。基本上，如果它没有坏，就不要修复它，把你学到的东西保留到下一个项目中。",
    "In this way, all the bullets will be drawn in the same batch. Judicious use of the functions {}{}gpu_set_blendenable(){}{}, {}{}gpu_set_alphatestref(){}{}, and {}{}gpu_set_alphatestenable(){}{}&nbsp;can greatly improve performance and can be enabled/disabled as required throughout your project code, although they may not be appropriate for all types of graphics or projects.":"这样，所有的子弹都将在同一批次中取出。明智地使用函数{}{}gpu_set_blendenable(){}{}， {}{}gpu_set_alphatestref(){}{}，和{}{}gpu_set_alphatestenable(){}{} 可以极大地提高性能，并且可以在整个项目代码中根据需要启用/禁用它们，尽管它们可能不适用于所有类型的图形或项目。",
    "In {}GameMaker{} {}data structures{} have been optimised to be a lot faster than previous GameMaker versions. They still need to be cleaned up (destroyed) when not used to free memory, and they can still be slower than, say, arrays, but the ease of use and the extra functions for dealing with the data they contain can often out-weigh the minimal speed difference, so don\u0027t be afraid to use them in your games.":"在 {}GameMaker{} 中，{}数据结构{}已经过优化，比以前的 GameMaker 版本快得多。 它们在不用于时仍然需要清理（销毁）释放内存，并且它们仍然可能比数组慢，但是易用性和处理它们包含的数据的额外功能通常可以胜过 最小的速度差异，所以不要害怕在游戏中使用它们。",
    "It should be noted that of all the data structures, DS Maps in particular are lighting fast, both to read from and write to, making them an excellent option for all types of tasks.":"应该注意的是，在所有的数据结构中，DS map的读和写速度特别快，这使它们成为所有类型任务的绝佳选择。",
    "Local variables are fast to process in-game, so make the most of them, and if an expression appears in a code block or script two or more times, think about creating a local variable for it. When using the {}YoYo Compiler (YYC){} targets, if you reference {}global{} or instance variables various times in a function or code block it is particularly beneficial to assign them to a local variable at the start of your code and then reference that local variable, as this will give much better performance.":"局部变量在游戏中处理起来很快，所以要充分利用它们，如果一个表达式在代码块或脚本中出现两次或两次以上，考虑为它创建一个局部变量。当使用{}YoYo Compiler (YYC){}目标时，如果在函数或代码块中多次引用{}全局{}或实例变量，那么在代码开始时将它们赋值给一个局部变量，然后再引用该局部变量是非常有益的，因为这将提供更好的性能。",
    "Note that on the non-WebGL HTML5 target, having multi-coloured, fading particles will require a lot of image caching and will be very slow. However, since particle sprites can be animated, you can create an animated sprite that has sub-images which change colour and then use that for the particle instead. It will still look like a gradual colour change, but not require the constant creation of cache images.":"注意，在非webgl的HTML5目标上，拥有多颜色、褪色的粒子将需要大量图像缓存，并且速度会非常慢。然而，因为粒子精灵可以被动画化，你可以创建一个带有改变颜色的子图像的动画精灵，然后将其用于粒子。它看起来仍然像一个渐变的颜色变化，但不需要不断创建缓存图像。",
    "On this page we are going to cover some \"best practices\" when programming your game, and at the same time explain a little bit about the inner workings of {}GameMaker{}. Before continuing, however, it is worth noting two very important points:":"在这一页，我们将介绍一些游戏编程的“最佳实践”，同时解释一下{}GameMaker{}的内部工作原理。然而，在继续之前，有两点值得注意:",
    "Previously we mentioned {}accessors{}&nbsp;for arrays, but they are also available for data structures, which can help clean up your code and make it much easier to read.":"之前我们提到了用于数组的{}访问器{}，但它们也可用于数据结构，这有助于清理您的代码并使其更易于阅读。",
    "So, if you have a number of bullet instances that draw using the {}bm_add{} blend mode - for example - you will be creating a new vertex batch for each one, which is definitely a bad thing! Instead, have a controller object in your game that draws all the bullets instead, like this:":"因此，如果您有许多使用{}bm_add{}混合模式绘制的项目实例—例如—您将为每个实例创建一个新的顶点批处理，这绝对是一件坏事!相反地，在你的游戏中设置一个能够绘制所有子弹的控制器对象，就像这样:",
    "That is not to say that you shouldn\u0027t use these functions, as they can be very handy. However, you should know which ones to use and when, as they all work slightly differently and will have different speeds. Rough rule of thumb is that the {}place_{} functions are faster than the {}instance_{} functions, which are faster than the {}collision_{} and {}point_{} functions, so read the pages in the manual for each of these types of functions and make sure to choose the most appropriate for every situation.":"这并不是说您不应该使用这些函数，因为它们可能非常方便。但是，您应该知道使用哪个和什么时候使用，因为它们的工作方式和速度都略有不同。根据经验，{}place_{}函数比{}instance_{}函数快，{}instance_{}函数又比{}collision_{}和{}point_{}函数快，所以请阅读手册中的每一种类型的函数，并确保选择最适合每种情况的函数。",
    "The memory and resources required to create those local variables are negligible, and are far outweighed by the instant benefit you (or anyone else reading the code later) gets from its clarity. The same idea should be applied to functions too, where you should assign sensible names to the input variables, and use clear formatting and local variables where required to make it as readable as possible.":"创建这些局部变量所需的内存和资源几乎可以忽略不计，而且您(或者稍后阅读代码的任何人)从其清晰性中获得的即时好处远远超过了这些内存和资源。同样的思想也应该应用于函数，在函数中，您应该为输入变量分配合理的名称，并在需要的地方使用明确的格式和局部变量，以使其尽可能具有可读性。",
    "There are many, many {}programming styles{}, and some would argue that theirs is the best one to use, but the truth is that almost any style is fine as long as you are {}consistent {}when using it and it is {}clear {}and {}obvious {}what everything is and does.":"{}有很多很多的{}编程风格，有些人会说他们的风格是最好的，但事实是，几乎任何风格都是可以的，只要你在使用它的时候是{}一致的{}，{}清晰的{}和{}明显的{}。",
    "There are {}multiple ways to deal with collisions{} in {}GameMaker{}, and most of them come with a bit of extra CPU overhead attached. The {}collision_{} and {}point_{} functions, {}place_{} functions, and {}instance_{} functions all rely on {}bounding box{} checks with all instances of a given type within the room, and while there is some optimisation built in to the engine to limit these checks, collisions are never the most effecient thing to deal with. If you start to use precise collisions, performance will also get noticably worse, as not only will you be doing bounding box checks, but you will also be doing per-pixel checks, which is very slow indeed.":"{2}GameMaker{3} 中有{}多种处理碰撞的方法{}，其中大多数都附带了一些额外的 CPU 开销。 {}collision_{} 和 {}point_{} 函数、{}place_{} 函数和 {}instance_{} 函数都依赖于对房间内给定类型的所有实例进行的{}边界框{}检查，并且 虽然引擎内置了一些优化来限制这些检查，但碰撞从来都不是最有效的处理方法。 如果您开始使用精确碰撞，性能也会明显变差，因为您不仅会进行边界框检查，还会进行逐像素检查，这确实非常慢。",
    "This allocates the memory for it in one \"chunk\" with all array values being set to the default value of 0 and helps keep things fast, as otherwise every time you add a new value to the array the entire memory has to be re-allocated again.":"这将在一个“块”中为它分配内存，并将所有数组值设置为默认值0，这有助于保持速度，否则每次向数组添加新值时，整个内存都必须重新分配。",
    "This function can be called before you create a surface to disable the depth buffer generation, and all surfaces created afterwards will not have a depth buffer created for them. You can enable/disable this function as required, and can even call it once at the start of the game to disable depth buffers for all subsequent surface calls (and in most 2D games this is fine). It won\u0027t give a major performance boost, but it\u0027s certainly something to keep in mind if your game relies heavily on surfaces and might stop your game running out of memory on lower-specced devices.":"这个函数可以在创建表面之前调用，以禁用深度缓冲区生成，并且之后创建的所有表面都不会为它们创建深度缓冲区。你可以根据需要启用/禁用这个功能，甚至可以在游戏开始时调用它一次，为所有后续的表面调用禁用深度缓冲(在大多数2D游戏中这是可以的)。它不会给你带来很大的性能提升，但如果你的游戏严重依赖于表面，这肯定是你需要记住的，可能会防止你的游戏在低规格设备上耗尽内存。",
    "This is a {}guide{}, and not the be-all-and-end-all-definitive-100%-perfect method to write your game! The things mentioned here are generally more on the organisational and micro-optimisation scale and should be incorporated into your programming habits when you feel comfortable with GML and think that they are appropriate.":"这是一个{}指南{}，而不是编写游戏的100%完美的方法!这里提到的东西通常更多地是在组织和微观优化的范围内，当您对GML感到舒服并认为它们是合适的时候，应该将它们纳入到您的编程习惯中。",
    "Tile Collisions In {}GameMaker{}":"GameMaker中的图块碰撞",
    "Vertex information is sent in \"batches\" to the GPU for drawing, and in general the larger the batch the better. So \"breaking\" the batch should be avoided when drawing, as that will increase the number of vertex batches sent to the GPU. There are a number of things that will break the batch, with the main ones being {}blend modes{}, changing the&nbsp; {}shader{}, changing a uniform for a shader before drawing something, and drawing using&nbsp;the built-in shapes and primitives.":"顶点信息被“批量”发送到GPU进行绘制，通常批量越大越好。所以在绘制时应该避免“中断”批处理，因为这会增加发送到GPU的顶点批处理的数量。有许多事情会打破批处理，其中主要的是{}混合模式{}，改变 {}shader{}，在绘制一些东西之前更改着色器的uniform，以及使用内置的形状和原语进行绘制。",
    "When it comes to writing code everyone has a {}style{}. The style you program in is the way you place your brackets, how you indent the lines, and how you declare and name variables, etc., and is essential to making your code clear and readable to other people (and to your future self, when you have to come back to this project after a time on something else).":"在编写代码时，每个人都有一个{}风格{}。你编程的风格就是你放置方括号的方式，行的缩进方式，以及声明和命名变量的方式等等，这些对于让你的代码清晰可读是必不可少的(当你在其他事情上花费了一段时间后回到这个项目时，对于你未来的自己来说也是必不可少的)。",
    "When you just use surfaces as normal, {}GameMaker{} will actually create a surface and an accompanying depth buffer to ensure proper depth sorting when drawing anything in 3D. However, for most 2D games, this extra depth buffer is just not required and so is taking up extra memory space and processing time that could be used for other things. This is where the function {}{}surface_depth_disable(){}{}&nbsp;comes into play...":"当你只是像普通一样使用表面时，{}GameMaker{}实际上会创建一个表面和一个伴随的深度缓冲区，以确保在3D中绘制任何东西时正确的深度排序。然而，对于大多数2D游戏来说，这种额外的深度缓冲区是不需要的，它会占用额外的内存空间和处理时间，而这些时间本可以用于其他事情。这就是函数{}{}surface_depth_disable(){}{} 发挥作用的地方…",
    "While not completely unreadable, it is inefficient (the {}point_direction(){} function is called twice, for example) and it is messy and awkward to look at. It would be far better expressed as:":"虽然不是完全不可读，但效率很低(例如，point_direction()函数被调用了两次)，而且看起来很混乱，很难看。表述为:",
    "With that said, lets move on and look at some general tips for writing good GML code that you can apply at any time...":"说了这么多，让我们继续，看看编写好的GML代码的一些通用技巧，你可以在任何时候应用这些技巧……",
    "You can also free up the memory associated with an array by setting the variable used to equal 0. So, to clear the array from the code example above you would simply use:":"还可以通过将所用变量设置为0来释放与数组相关的内存。因此，要从上面的代码示例中清除数组，你可以简单地使用:",
    "You can find out more about particles from the page&nbsp;{}Guide To Using Particles{}.":"你可以从{}使用粒子指南{}页面找到更多关于粒子的信息。",
    "don\u0027t be afraid to use the trigonometric functions as (contrary to popular belief) they are pretty fast, especially when compared to particles, collisions, strings, etc...":"不要害怕使用三角函数，因为(与流行的观点相反)它们非常快，特别是与粒子、碰撞、字符串等相比……",
    "don\u0027t put code that is not for drawing things in the Draw events":"不要在绘制事件中放入非用于绘制事物的代码",
    "use an alarm to call any code that doesn\u0027t have to be called every step (rather than just adding this into the Step event anyway)":"使用一个警报来调用任何不需要每一步都调用的代码(而不是将其添加到步事件中)",
    "{}Arrays{} are fast to use and require less memory than data-structures, but they can be optimised further still. When you create an array, memory is allocated to it based on its size, so you should try to initialise an array to its maximum size first, even if you don\u0027t plan on filling it until later on. For example, if you know you need an array to hold a maximum of 100 values, you would initialise it to 100 slots straight away, using the {}{}array_create(){}{}&nbsp;function:":"{}数组{}使用起来很快，比数据结构需要更少的内存，但它们还可以进一步优化。当你创建一个数组时，内存会根据它的大小分配给它，所以你应该先尝试初始化一个数组到它的最大大小，即使你不打算在以后填充它。例如，如果你知道你需要一个数组来保存最多100个值，你可以直接将它初始化为100个槽，使用{}{}array_create(){}{} 函数:",
    "{}Arrays{}{}Arrays{}":"{}Arrays{}{}Arrays{} 数组",
    "{}Collisions{}{}Collisions{}":"{}Collisions{}{}Collisions{} 碰撞",
    "{}Data Structures{}{}Data Structures{}":"{}Data Structures{}{}Data Structures{} 数据结构",
    "{}For texture swaps, the best and most efficient way to do this is to optimise how your sprites and backgrounds are stored on the texture page. This is done from the {}sprite properties{}, and you can create texture pages in the {}Texture Group Editor{}. If you have a number of images that are only used in the main menu (for example), then put them together on a separate {}texture page{}. The same if you have level-specific images, or the player and the enemies, etc. Basically, you want to group them by use so that the swaps are reduced as much as possible. Additionally, to help keep {}VRAM{} optimised you can then use the different {}prefetch and flush{} functions&nbsp;to load and remove textures from memory as required.":"{}对于纹理交换，最好和最有效的方法是优化你的精灵和背景在纹理页面上的存储方式。这是通过{}精灵属性{}完成的，你可以在{}纹理组编辑器{}中创建纹理页面。如果你有一些只在主菜单中使用的图像(例如)，那么把它们放在一个单独的{}纹理页面{}上。如果你有特定关卡的图像，或者玩家和敌人等，也是如此。基本上，您希望按使用对它们进行分组，以便尽可能减少交换。此外，为了帮助保持{}VRAM{}的优化，你可以使用不同的{}预取和刷新{}函数 根据需要从内存中加载和删除纹理。",
    "{}NOTE{}&nbsp;As mentioned at the start of this page, if your game runs fine with a decent FPS then don\u0027t worry too much about texture swaps... especially when creating projects on the desktop targets. These optimisations are best when used with large games or on low-end mobile devices, and when used incorrectly can they actually negatively impact performance.":"{}注意{}正如本文开头所提到的，如果你的游戏运行良好，FPS也不错，那就不用太担心纹理交换了……特别是在桌面目标上创建项目时。这些优化在大型游戏或低端移动设备上使用时效果最好，如果使用不当，它们实际上会对性能产生负面影响。",
    "{}NOTE{}&nbsp;If you don\u0027t require the instance to draw itself when using a controller in this way then you can simply add a comment into the Draw Event to suppress the default drawing, or make the instance invisible (although this will prevent all code running for the instance in all draw events).":"{}注意{} 如果你用这种方式使用控制器时不要求实例绘制自己，那么你可以简单地在绘制事件中添加一个注释来抑制默认的绘制，或者使实例不可见(尽管这将阻止在所有绘制事件中为实例运行所有代码)。",
    "{}NOTE{}&nbsp;On the HTML5 target assigning arrays like this does not apply and your arrays should be initialised from 0 for this target! You can easily handle this by checking the os_browser variable, for example:":"{}注意{} 在HTML5目标上，这样分配数组是不适用的，你的数组应该从0开始初始化这个目标!你可以通过检查os_browser变量轻松地处理这个问题，例如:",
    "{}NOTE{}&nbsp;This doesn\u0027t just apply to using {}bm_add{} - any blending change will break the batch and will give a performance hit.":"{}注意{} 这不仅仅适用于使用{}bm_add{} -任何混合更改都会破坏批处理并会造成性能损失。",
    "{}Particles{} offer a very quick and efficient way to create dynamic effects in your game, and in general they give good performance. However, it\u0027s worth noting that using additive blending, alpha blending and colour blending on the particles may lower that performance, especially on mobile targets, so if you don\u0027t need it don\u0027t use it! Additive blending, in particular, can greatly increase the vertex batches and should be used with care.":"{}粒子{}提供了在游戏中创建动态效果的一种非常快速有效的方法，通常它们具有良好的性能。然而，值得注意的是，在粒子上使用添加混合，alpha混合和颜色混合可能会降低性能，特别是在移动目标上，所以如果你不需要它就不要使用它!特别是添加混合，可以大大增加顶点批次，应该谨慎使用。",
    "{}Particles{}{}Particles{}":"{}Particles{}{}Particles{} 粒子",
    "{}Programming Style{}{}Programming Style{}":"{}Programming Style{}{}Programming Style{} 编程风格",
    "{}Surfaces{}{}Surfaces{}":"{}Surfaces{}{}Surfaces{} 表面",
    "{}Texture Swaps And Vertex Batches{}{}Texture Swaps And Vertex Batches{}":"{}Texture Swaps And Vertex Batches{}{}Texture Swaps And Vertex Batches{} 纹理交换和顶点批次",
    "{}The above image is an example of a function declaration in a script to illustrate the above points. You can see that it uses the JSDoc style comments to clearly explain what it all does, and the coding style is consistent, with 4 space indents, underscores used for local vars, logged output, etc...":"上图是一个在脚本中声明函数的例子，用来说明上述几点。您可以看到，它使用JSDoc风格的注释清楚地解释了它所做的一切，并且编码风格是一致的，使用4个空格缩进、用于局部变量的下划线、日志输出等等……",
    "{}Use Local Variables{}{}Use Local Variables{}":"{}Use Local Variables{}{}Use Local Variables{} 使用局部变量",
    "{}When writing code, you should be aware that when compiling your final game, {}GameMaker{} strips out comments, removes unnecessary line breaks and whitespace, substitutes in constant/macro/enum values, and generally compresses your code down as part of the process. This means that you can add as much whitespace around your code as required and you don\u0027t need to worry about keeping your comments short or only using them sparingly.":"{}在编写代码时，您应该注意，在编译您的最终游戏时，{}GameMaker{} 会删除注释、删除不必要的换行符和空格、替换为常量/宏/枚举值，通常压缩你的代码作为过程的一部分。这意味着您可以根据需要在代码周围添加尽可能多的空白，而且您不需要担心保持注释的简短或只少量使用它们。"
}

	$(function(){

		//添加按钮
		addNoTranslationStateButton()
		//跳过翻译
		if(noTranslationState())return false

	//这么做只是为了方便移植修改
	const css1="div.footer a,h4,caption"
	const css2="p,h1,h2,h3,td,li,a,div.dropspotnote,figcaption"
	const css3="th,.warning,.important,.optional"

		$(css1).each(function(){
			setTranslator($(this),json_global)
		})

		$(css2).each(function(){
			setTranslator($(this),json)
		})

		$(css3).each(function(){
			setTranslator($(this),json_global)
		})

		//翻译主页
		if($(".header").length){
			window.setInterval(function(){
				//翻译菜单
				$("#toc-panel a:not('isTranslate')").each(function(){
					//区别于main.js,这个不管有没有翻译都将添加标记
					$(this).addClass("isTranslate")
					setTranslator($(this),json_global)
				})
				//翻译术语表
				$(".GlossDefinitionText:not('isTranslate')").each(function(){
					$(this).addClass("isTranslate")
					setTranslator($(this),json_global)
				})
			},250)
			console.log("成功啦!现在正在疯狂翻译菜单中!")
		}

		//翻译tooltip
		$(".tooltip").each(function(){
			setTranslator($(this),json_global,"title")
		})

	})

	document.addEventListener('DOMContentLoaded', () => {
		pangu.autoSpacingPage();
	})

</script>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "..";
    gCommonRootRelPath = "..";
    gTopicId = "7.0_1";
  
//]]></script>

  <script type="text/javascript" src="../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Best Practices When Programming</title>
  <meta name="generator" content="Adobe RoboHelp 2022">
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css">
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page that explains some best practices when programming using GameMaker">
  <meta name="rh-index-keywords" content="Best Practices When Programming">
  <meta name="search-keywords" content="best practices">
<meta name="brsnext" value="Additional_Information/The_File_System.htm"><meta name="brsprev" value="Additional_Information/Additional_Information.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Best Practices When Programming">
        <span>Best Practices When Programming</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Best Practices When Programming</h1>
  <p>On this page we are going to cover some "best practices" when programming your game, and at the same time explain a little bit about the inner workings of <span data-keyref="GameMaker Name">GameMaker</span>. Before continuing, however, it is worth noting two very important points:</p>
  <ul class="colour">
    <li>This is a <em>guide</em>, and not the be-all-and-end-all-definitive-100%-perfect method to write your game! The things mentioned here are generally more on the organisational and micro-optimisation scale and should be incorporated into your programming habits when you feel comfortable with GML and think that they are appropriate.</li>
    <li>If your game runs fine and you are happy with things as they are, then <em>don't rush to change everything just to squeeze a few extra FPS out</em>. You have to strike a balance between readable, flexible and modular code with the time and energy required to change things, as well as the overall gain at the end. Basically, if it isn't broken, don't fix it and keep what you learn here for your next project.</li>
  </ul>
  <p>With that said, lets move on and look at some general tips for writing good GML code that you can apply at any time...</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true" data-skip-index="true">Programming Style</span><span data-close-text="true">Programming Style</span></a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">When it comes to writing code everyone has a <em>style</em>. The style you program in is the way you place your brackets, how you indent the lines, and how you declare and name variables, etc., and is essential to making your code clear and readable to other people (and to your future self, when you have to come back to this project after a time on something else).</p>
    <p class="dropspot">There are many, many <a href="http://en.wikipedia.org/wiki/Programming_style">programming styles</a>, and some would argue that theirs is the best one to use, but the truth is that almost any style is fine as long as you are <strong>consistent </strong>when using it and it is <em>clear </em>and <em>obvious </em>what everything is and does.</p>
    <p class="dropspot"><img alt="Code Style Example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BestPractice_Style_Example.png">The above image is an example of a function declaration in a script to illustrate the above points. You can see that it uses the JSDoc style comments to clearly explain what it all does, and the coding style is consistent, with 4 space indents, underscores used for local vars, logged output, etc...</p>
    <p class="dropspot">Also note that while the script editor permits you to fold code at each of the open/close brackets, you can use <span class="inline">#region</span> and <span class="inline">#endregion</span>&nbsp;tags to section off parts of your code and greatly enhance readability, especially when dealing with larger scripts which contain multiple functions. Regions can be commented, too - see the Editing section of this page in the manual):</p>
    <p class="dropspot"><img alt="Example Of Using Regions" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BestPractice_Regions.png">When writing code, you should be aware that when compiling your final game, <span data-keyref="GameMaker Name">GameMaker</span> strips out comments, removes unnecessary line breaks and whitespace, substitutes in constant/macro/enum values, and generally compresses your code down as part of the process. This means that you can add as much whitespace around your code as required and you don't need to worry about keeping your comments short or only using them sparingly.</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true" data-skip-index="true">Use Local Variables</span><span data-close-text="true">Use Local Variables</span></a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Continuing on from the above point about programming style, one thing that a lot of beginners do is to cram as much into one line of code as possible. For example:</p>
    <p class="code">draw_sprite(sprite_index, image_index, x + lengthdir_x(100, point_direction(x, y, mouse_x, mouse_y)), y + lengthdir_y(100, point_direction(x, y, mouse_x, mouse_y)));</p>
    <p class="dropspot">While not completely unreadable, it is inefficient (the <span class="inline">point_direction()</span> function is called twice, for example) and it is messy and awkward to look at. It would be far better expressed as:</p>
    <p class="code">var p_dir = point_direction(x, y, mouse_x, mouse_y);<br>
      var local_x = x + lengthdir_x(100, p_dir);<br>
      var local_y = y + lengthdir_y(100, p_dir);<br>
      draw_sprite(sprite_index, image_index, local_x, local_y);</p>
    <p class="dropspot">The memory and resources required to create those local variables are negligible, and are far outweighed by the instant benefit you (or anyone else reading the code later) gets from its clarity. The same idea should be applied to functions too, where you should assign sensible names to the input variables, and use clear formatting and local variables where required to make it as readable as possible.</p>
    <p class="dropspot">Local variables are fast to process in-game, so make the most of them, and if an expression appears in a code block or script two or more times, think about creating a local variable for it. When using the <a class="tooltip" title="This is a special compiler for creating executable packages that use native code instead of interepreted code and a runner (wich is what the GameMaker VM compile uses). Compiled code is faster to run, but takes more time to compile the executable.">YoYo Compiler (YYC)</a> targets, if you reference <span class="inline">global</span> or instance variables various times in a function or code block it is particularly beneficial to assign them to a local variable at the start of your code and then reference that local variable, as this will give much better performance.</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true" data-skip-index="true">Arrays</span><span data-close-text="true">Arrays</span></a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><a href="../GameMaker_Language/GML_Overview/Arrays.htm">Arrays</a> are fast to use and require less memory than data-structures, but they can be optimised further still. When you create an array, memory is allocated to it based on its size, so you should try to initialise an array to its maximum size first, even if you don't plan on filling it until later on. For example, if you know you need an array to hold a maximum of 100 values, you would initialise it to 100 slots straight away, using the <a href="../GameMaker_Language/GML_Reference/Variable_Functions/array_create.htm"><span class="inline">array_create()</span></a>&nbsp;function:</p>
    <p class="code">array = array_create(100, 0);</p>
    <p class="dropspot">This allocates the memory for it in one "chunk" with all array values being set to the default value of 0 and helps keep things fast, as otherwise every time you add a new value to the array the entire memory has to be re-allocated again.</p>
    <p class="note"><span class="note">NOTE</span>&nbsp;On the HTML5 target assigning arrays like this does not apply and your arrays should be initialised from 0 for this target! You can easily handle this by checking the os_browser variable, for example:</p>
    <p class="code"><span style="padding-left:1px;">if (os_browser == browser_not_a_browser)<br>
        {<br>
        &nbsp; &nbsp; array_create(100, 0);<br>
        }<br>
        else<br>
        {<br>
        &nbsp; &nbsp; for (var i = 0; i &lt; 100; ++i;)<br>
        &nbsp; &nbsp; {<br>
        &nbsp; &nbsp; &nbsp; &nbsp; array[i] = 0;<br>
        &nbsp; &nbsp; }<br>
        }</span></p>
    <p class="dropspot">You can also free up the memory associated with an array by setting the variable used to equal 0. So, to clear the array from the code example above you would simply use:</p>
    <p class="code">array = 0;</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span data-open-text="true" data-skip-index="true">Data Structures</span><span data-close-text="true">Data Structures</span></a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">In <span data-keyref="GameMaker Name">GameMaker</span> <a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">data structures</a> have been optimised to be a lot faster than previous GameMaker versions. They still need to be cleaned up (destroyed) when not used to free memory, and they can still be slower than, say, arrays, but the ease of use and the extra functions for dealing with the data they contain can often out-weigh the minimal speed difference, so don't be afraid to use them in your games.</p>
    <p class="dropspot">It should be noted that of all the data structures, DS Maps in particular are lighting fast, both to read from and write to, making them an excellent option for all types of tasks.</p>
    <p class="dropspot">Previously we mentioned <a href="../GameMaker_Language/GML_Overview/Accessors.htm">accessors</a>&nbsp;for arrays, but they are also available for data structures, which can help clean up your code and make it much easier to read.</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#"><span data-open-text="true" data-skip-index="true">Collisions</span><span data-close-text="true">Collisions</span></a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">There are <a href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/Collisions.htm">multiple ways to deal with collisions</a> in <span data-keyref="GameMaker Name">GameMaker</span>, and most of them come with a bit of extra CPU overhead attached. The <span class="inline">collision_</span> and <span class="inline">point_</span> functions, <span class="inline">place_</span> functions, and <span class="inline">instance_</span> functions all rely on <a class="tooltip" title="For sprites, the bounding-box is the name given to the edges of the area that collisions will initially be detected in, and it doesn't have to be the same size as the sprite it's being applied to. For sequences, the bounding box is the outer edge of the total space that one or more assets occupy in the canvas.">bounding box</a> checks with all instances of a given type within the room, and while there is some optimisation built in to the engine to limit these checks, collisions are never the most effecient thing to deal with. If you start to use precise collisions, performance will also get noticably worse, as not only will you be doing bounding box checks, but you will also be doing per-pixel checks, which is very slow indeed.</p>
    <ul class="dropspotlist">
    </ul>
    <p class="dropspot">That is not to say that you shouldn't use these functions, as they can be very handy. However, you should know which ones to use and when, as they all work slightly differently and will have different speeds. Rough rule of thumb is that the <span class="inline">place_</span> functions are faster than the <span class="inline">instance_</span> functions, which are faster than the <span class="inline">collision_</span> and <span class="inline">point_</span> functions, so read the pages in the manual for each of these types of functions and make sure to choose the most appropriate for every situation.</p>
    <p class="dropspot">Alternatively, look into creating a<strong> tile-based collision system</strong>, which can be created using the <a href="../GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/Tile_Map_Layers.htm">tilemap functions</a>&nbsp;or even a custom 2D array or DS grid. These will be very fast and will help boost your game's speed. However, if you are using irregular terrain or walls and objects that don't align to a grid they may not be appropriate. You can find a very simple tutorial on tilemap collisions from the following video link</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="https://youtu.be/UyKdQQ3UR_0">Tile Collisions In <span data-keyref="GameMaker Name">GameMaker</span></a></li>
    </ul>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#"><span data-open-text="true" data-skip-index="true">Texture Swaps And Vertex Batches</span><span data-close-text="true">Texture Swaps And Vertex Batches</span></a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot">If you switch on the <a href="../GameMaker_Language/GML_Reference/Debugging/show_debug_overlay.htm"><strong>debug overlay</strong></a>,&nbsp;you will see that there are two figures in brackets at the top of your screen when testing. The first is the number of <strong>texture swaps </strong>being done and the second is the number of <strong>vertex batches</strong>. A number of factors will influence these figures and you will never get them down to (0) (0) as the engine requires one or two of each every step, but you should aim to get these values down as low as possible.</p>
    <p class="dropspot"><img alt="The Debug Overlay Bar" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BestPractices_DebugOverlay.png">For texture swaps, the best and most efficient way to do this is to optimise how your sprites and backgrounds are stored on the texture page. This is done from the <a href="../The_Asset_Editors/Sprites.htm">sprite properties</a>, and you can create texture pages in the <a href="../Settings/Texture_Groups.htm">Texture Group Editor</a>. If you have a number of images that are only used in the main menu (for example), then put them together on a separate <a href="../Settings/Texture_Information/Texture_Pages.htm">texture page</a>. The same if you have level-specific images, or the player and the enemies, etc. Basically, you want to group them by use so that the swaps are reduced as much as possible. Additionally, to help keep <a class="tooltip" title="VRAM is the amount of memory available for video, ie: the memory space that can store textures and images.">VRAM</a> optimised you can then use the different <a href="../GameMaker_Language/GML_Reference/Drawing/Textures/Textures.htm">prefetch and flush</a> functions&nbsp;to load and remove textures from memory as required.</p>
    <p class="note"><span class="note">NOTE</span>&nbsp;As mentioned at the start of this page, if your game runs fine with a decent FPS then don't worry too much about texture swaps... especially when creating projects on the desktop targets. These optimisations are best when used with large games or on low-end mobile devices, and when used incorrectly can they actually negatively impact performance.</p>
    <p class="dropspot">Vertex information is sent in "batches" to the GPU for drawing, and in general the larger the batch the better. So "breaking" the batch should be avoided when drawing, as that will increase the number of vertex batches sent to the GPU. There are a number of things that will break the batch, with the main ones being <strong>blend modes</strong>, changing the&nbsp; <strong>shader</strong>, changing a uniform for a shader before drawing something, and drawing using&nbsp;the built-in shapes and primitives.</p>
    <p class="dropspot">So, if you have a number of bullet instances that draw using the <span class="inline">bm_add</span> blend mode - for example - you will be creating a new vertex batch for each one, which is definitely a bad thing! Instead, have a controller object in your game that draws all the bullets instead, like this:</p>
    <p class="code">gpu_set_blendmode(bm_add);<br>
      <br>
      with (obj_BULLET)<br>
      {<br>
      &nbsp; &nbsp; draw_self();<br>
      }<br>
      <br>
      gpu_set_blendmode(bm_normal);
    </p>
    <p class="note"><span class="note">NOTE</span>&nbsp;This doesn't just apply to using <span class="inline" style="font-size: 14px">bm_add</span> - any blending change will break the batch and will give a performance hit.</p>
    <p class="dropspot">In this way, all the bullets will be drawn in the same batch. Judicious use of the functions <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendenable.htm"><span class="inline">gpu_set_blendenable()</span></a>, <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestref.htm"><span class="inline">gpu_set_alphatestref()</span></a>, and <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestenable.htm"><span class="inline">gpu_set_alphatestenable()</span></a>&nbsp;can greatly improve performance and can be enabled/disabled as required throughout your project code, although they may not be appropriate for all types of graphics or projects.</p>
    <p class="note"><span class="note">NOTE</span>&nbsp;If you don't require the instance to draw itself when using a controller in this way then you can simply add a comment into the Draw Event to suppress the default drawing, or make the instance invisible (although this will prevent all code running for the instance in all draw events).</p>
    <p class="dropspot">Another way to reduce these numbers is to disable the <strong>Separate Texture Page</strong> option for sprites unless absolutely necessary. Each image stored in this way is sent to its own texture page and batched differently, so having these images on a regular texture page is better. You can then get the UVS coordinates using the <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="inline">sprite_get_uvs()</span></a>&nbsp;function and store them in variables for use later. It may be a small amount of extra code, but the boost you will get is worth it. Note that this method will not permit texture repeats!</p>
    <p class="dropspot">As with all these tips, if it makes your life more difficult to change it and your game runs fine, don't worry about it too much...</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#"><span data-open-text="true" data-skip-index="true">Particles</span><span data-close-text="true">Particles</span></a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">Particles</a> offer a very quick and efficient way to create dynamic effects in your game, and in general they give good performance. However, it's worth noting that using additive blending, alpha blending and colour blending on the particles may lower that performance, especially on mobile targets, so if you don't need it don't use it! Additive blending, in particular, can greatly increase the vertex batches and should be used with care.</p>
    <p class="dropspot">Note that on the non-WebGL HTML5 target, having multi-coloured, fading particles will require a lot of image caching and will be very slow. However, since particle sprites can be animated, you can create an animated sprite that has sub-images which change colour and then use that for the particle instead. It will still look like a gradual colour change, but not require the constant creation of cache images.</p>
    <p class="dropspot">You can find out more about particles from the page&nbsp;<a href="Guide_To_Using_Particles.htm">Guide To Using Particles</a>.</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#"><span data-open-text="true" data-skip-index="true">Surfaces</span><span data-close-text="true">Surfaces</span></a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">Finally, we're going to touch briefly on using <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/Surfaces.htm">surfaces</a>, as <span data-keyref="GameMaker Name">GameMaker</span> has a fairly significant optimisation when using them in your games: the ability to switch on and off the <strong>depth buffer</strong>.</p>
    <p class="dropspot">When you just use surfaces as normal, <span data-keyref="GameMaker Name">GameMaker</span> will actually create a surface and an accompanying depth buffer to ensure proper depth sorting when drawing anything in 3D. However, for most 2D games, this extra depth buffer is just not required and so is taking up extra memory space and processing time that could be used for other things. This is where the function <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_depth_disable.htm"><span class="inline">surface_depth_disable()</span></a>&nbsp;comes into play...</p>
    <p class="dropspot">This function can be called before you create a surface to disable the depth buffer generation, and all surfaces created afterwards will not have a depth buffer created for them. You can enable/disable this function as required, and can even call it once at the start of the game to disable depth buffers for all subsequent surface calls (and in most 2D games this is fine). It won't give a major performance boost, but it's certainly something to keep in mind if your game relies heavily on surfaces and might stop your game running out of memory on lower-specced devices.</p>
  </div>
  <p>&nbsp;</p>
  <p>Apart from the main things mentioned above, there are other more general things that can help with performance and that are considered "good practices" too:</p>
  <ul class="colour">
    <li>don't be afraid to use the trigonometric functions as (contrary to popular belief) they are pretty fast, especially when compared to particles, collisions, strings, etc...</li>
    <li>don't put code that is not for drawing things in the Draw events</li>
    <li>use an alarm to call any code that doesn't have to be called every step (rather than just adding this into the Step event anyway)</li>
  </ul>
  <p>But, as we mentioned at the start of the page, all these optimisations are optional and if your game runs fine with 60 vertex batches, 80 texture swaps, additive blending, etc., then don't worry about it too much! Just keep these things in mind when programming your next game...</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Additional_Information.htm">Additional Information</a></div>
        <div style="float:right">Next: <a href="The_File_System.htm">The File System</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Nest Practices
-->
  <!-- TAGS
best_practices
-->

</body></html>